
#include "../SDK.h"

// Name: AceCombat7, Version: 1.3.0

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
// Functions
//---------------------------------------------------------------------------

// Function Nimbus.AIASCommandComponent.StopBarrier
// (Final, Native, Public, BlueprintCallable)

void UAIASCommandComponent::StopBarrier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASCommandComponent.StopBarrier");

	UAIASCommandComponent_StopBarrier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.AIASCommandComponent.OnStopBarrier__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             Owner                          (Parm, ZeroConstructor, IsPlainOldData)

void UAIASCommandComponent::OnStopBarrier__DelegateSignature(class AGameObject* Owner)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.AIASCommandComponent.OnStopBarrier__DelegateSignature");

	UAIASCommandComponent_OnStopBarrier__DelegateSignature_Params params;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIASCommandComponent.OnReleaseBarrierWeapon
// (Final, Native, Public)

void UAIASCommandComponent::OnReleaseBarrierWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASCommandComponent.OnReleaseBarrierWeapon");

	UAIASCommandComponent_OnReleaseBarrierWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.AIASCommandComponent.OnActivateBarrier__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             Owner                          (Parm, ZeroConstructor, IsPlainOldData)

void UAIASCommandComponent::OnActivateBarrier__DelegateSignature(class AGameObject* Owner)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.AIASCommandComponent.OnActivateBarrier__DelegateSignature");

	UAIASCommandComponent_OnActivateBarrier__DelegateSignature_Params params;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIASCommandComponent.ActivateBarrier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            InNumber                       (Parm, ZeroConstructor, IsPlainOldData)

void UAIASCommandComponent::ActivateBarrier(int InNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASCommandComponent.ActivateBarrier");

	UAIASCommandComponent_ActivateBarrier_Params params;
	params.InNumber = InNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIASDamagedStateComponent.OnVisibilityChanged
// (Final, Native, Public)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void UAIASDamagedStateComponent::OnVisibilityChanged(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASDamagedStateComponent.OnVisibilityChanged");

	UAIASDamagedStateComponent_OnVisibilityChanged_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIASDamagedStateComponent.OnRestored
// (Final, Native, Public)

void UAIASDamagedStateComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASDamagedStateComponent.OnRestored");

	UAIASDamagedStateComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIASDamagedStateComponent.OnComponentHitSurface
// (Final, Native, Private, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UAIASDamagedStateComponent::OnComponentHitSurface(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASDamagedStateComponent.OnComponentHitSurface");

	UAIASDamagedStateComponent_OnComponentHitSurface_Params params;
	params.HitComponent = HitComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIASDamagedStateComponent.ForceShowExtraDestroyedVFX
// (Final, Native, Public, BlueprintCallable)

void UAIASDamagedStateComponent::ForceShowExtraDestroyedVFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASDamagedStateComponent.ForceShowExtraDestroyedVFX");

	UAIASDamagedStateComponent_ForceShowExtraDestroyedVFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIASDamagedStateComponent.DamageStateLifeSpanExpired
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FDamagedStateInstance   DamagedStateInstance           (Parm, OutParm)

void UAIASDamagedStateComponent::DamageStateLifeSpanExpired(struct FDamagedStateInstance* DamagedStateInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASDamagedStateComponent.DamageStateLifeSpanExpired");

	UAIASDamagedStateComponent_DamageStateLifeSpanExpired_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DamagedStateInstance != nullptr)
		*DamagedStateInstance = params.DamagedStateInstance;
}


// Function Nimbus.AIASStateComponent.OnRestored
// (Final, Native, Public)

void UAIASStateComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIASStateComponent.OnRestored");

	UAIASStateComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIFireControlSystem.SetInitialPose
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UAIFireControlSystem::SetInitialPose(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIFireControlSystem.SetInitialPose");

	UAIFireControlSystem_SetInitialPose_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.AIFireControlSystem.OnWeaponFired__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UAIFireControlSystem::OnWeaponFired__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.AIFireControlSystem.OnWeaponFired__DelegateSignature");

	UAIFireControlSystem_OnWeaponFired__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIFireControlSystem.CanActivateFlares
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAIFireControlSystem::CanActivateFlares()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIFireControlSystem.CanActivateFlares");

	UAIFireControlSystem_CanActivateFlares_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.SetMinHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InHealth                       (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::SetMinHealth(float InHealth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.SetMinHealth");

	AGameObject_SetMinHealth_Params params;
	params.InHealth = InHealth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.SetIsUnidentified
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bUnidentified                  (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::SetIsUnidentified(bool bUnidentified)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.SetIsUnidentified");

	AGameObject_SetIsUnidentified_Params params;
	params.bUnidentified = bUnidentified;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.SetIsInvincibleFromAI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInvincible                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::SetIsInvincibleFromAI(bool bInvincible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.SetIsInvincibleFromAI");

	AGameObject_SetIsInvincibleFromAI_Params params;
	params.bInvincible = bInvincible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.SetIsInvincible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInvincible                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::SetIsInvincible(bool bInvincible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.SetIsInvincible");

	AGameObject_SetIsInvincible_Params params;
	params.bInvincible = bInvincible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.SetIsExcludeFromGunAutoFire
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bExcludeFromGunAutoFire        (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::SetIsExcludeFromGunAutoFire(bool bExcludeFromGunAutoFire)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.SetIsExcludeFromGunAutoFire");

	AGameObject_SetIsExcludeFromGunAutoFire_Params params;
	params.bExcludeFromGunAutoFire = bExcludeFromGunAutoFire;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.SetIsAttackTargetsException
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bAttackTargetsException        (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::SetIsAttackTargetsException(bool bAttackTargetsException)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.SetIsAttackTargetsException");

	AGameObject_SetIsAttackTargetsException_Params params;
	params.bAttackTargetsException = bAttackTargetsException;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.SetHudBoxAttribute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHudBoxAttribute               Type                           (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::SetHudBoxAttribute(EHudBoxAttribute Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.SetHudBoxAttribute");

	AGameObject_SetHudBoxAttribute_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.SetActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bActive                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::SetActive(bool bActive, bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.SetActive");

	AGameObject_SetActive_Params params;
	params.bActive = bActive;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnWeaponLocked
// (Event, Public, BlueprintEvent)

void AGameObject::OnWeaponLocked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnWeaponLocked");

	AGameObject_OnWeaponLocked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnWeaponDetectionLost
// (Event, Public, BlueprintEvent)

void AGameObject::OnWeaponDetectionLost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnWeaponDetectionLost");

	AGameObject_OnWeaponDetectionLost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnWeaponDetectionAcquired
// (Event, Public, BlueprintEvent)

void AGameObject::OnWeaponDetectionAcquired()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnWeaponDetectionAcquired");

	AGameObject_OnWeaponDetectionAcquired_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnVisibilityChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnVisibilityChanged__DelegateSignature(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnVisibilityChanged__DelegateSignature");

	AGameObject_OnVisibilityChanged__DelegateSignature_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnTakeDamage__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             DamagedObject                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             WeaponTypeCDO                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnTakeDamage__DelegateSignature(class AGameObject* Causer, class AGameObject* DamagedObject, class AWeaponBase* Weapon, float Damage, class AWeaponBase* WeaponTypeCDO)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnTakeDamage__DelegateSignature");

	AGameObject_OnTakeDamage__DelegateSignature_Params params;
	params.Causer = Causer;
	params.DamagedObject = DamagedObject;
	params.Weapon = Weapon;
	params.Damage = Damage;
	params.WeaponTypeCDO = WeaponTypeCDO;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnSleepChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGameObject::OnSleepChanged__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnSleepChanged__DelegateSignature");

	AGameObject_OnSleepChanged__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnRestoredDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGameObject::OnRestoredDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnRestoredDelegate__DelegateSignature");

	AGameObject_OnRestoredDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnRestored
// (Native, Event, Public, BlueprintEvent)

void AGameObject::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnRestored");

	AGameObject_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnRepositionDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGameObject::OnRepositionDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnRepositionDelegate__DelegateSignature");

	AGameObject_OnRepositionDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnReposition
// (Native, Event, Public, BlueprintEvent)

void AGameObject::OnReposition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnReposition");

	AGameObject_OnReposition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnMissileAlertStateChange
// (Event, Public, BlueprintEvent)
// Parameters:
// EMissileAlert                  NewState                       (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Attacker                       (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnMissileAlertStateChange(EMissileAlert NewState, class AActor* Attacker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnMissileAlertStateChange");

	AGameObject_OnMissileAlertStateChange_Params params;
	params.NewState = NewState;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnLockedOnByEnemy__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             LockedObject                   (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             EnemyObject                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnLockedOnByEnemy__DelegateSignature(class AGameObject* LockedObject, class AGameObject* EnemyObject)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnLockedOnByEnemy__DelegateSignature");

	AGameObject_OnLockedOnByEnemy__DelegateSignature_Params params;
	params.LockedObject = LockedObject;
	params.EnemyObject = EnemyObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnIdentified__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AGameObject::OnIdentified__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnIdentified__DelegateSignature");

	AGameObject_OnIdentified__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnHitByGun
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                  Attacker                       (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnHitByGun(class AActor* Attacker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnHitByGun");

	AGameObject_OnHitByGun_Params params;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnExecRecordableEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// int                            EventID                        (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnExecRecordableEvent(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnExecRecordableEvent");

	AGameObject_OnExecRecordableEvent_Params params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnDeath
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AGameObject*             DeadGameObject                 (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnDeath(class AGameObject* DeadGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnDeath");

	AGameObject_OnDeath_Params params;
	params.DeadGameObject = DeadGameObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnDeactivate
// (Event, Public, BlueprintEvent)

void AGameObject::OnDeactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnDeactivate");

	AGameObject_OnDeactivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnChildGameObjectRecoveryTriggered__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             ChildGameObject                (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnChildGameObjectRecoveryTriggered__DelegateSignature(class AGameObject* ChildGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnChildGameObjectRecoveryTriggered__DelegateSignature");

	AGameObject_OnChildGameObjectRecoveryTriggered__DelegateSignature_Params params;
	params.ChildGameObject = ChildGameObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnChildGameObjectRecoveryEnded__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             ChildGameObject                (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnChildGameObjectRecoveryEnded__DelegateSignature(class AGameObject* ChildGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnChildGameObjectRecoveryEnded__DelegateSignature");

	AGameObject_OnChildGameObjectRecoveryEnded__DelegateSignature_Params params;
	params.ChildGameObject = ChildGameObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.GameObject.OnChildGameObjectDeath__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             DeadChildGameObject            (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnChildGameObjectDeath__DelegateSignature(class AGameObject* DeadChildGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.GameObject.OnChildGameObjectDeath__DelegateSignature");

	AGameObject_OnChildGameObjectDeath__DelegateSignature_Params params;
	params.DeadChildGameObject = DeadChildGameObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnAttackedBySpecialWeapon
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           isAttacked                     (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Attacker                       (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnAttackedBySpecialWeapon(bool isAttacked, class AActor* Attacker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnAttackedBySpecialWeapon");

	AGameObject_OnAttackedBySpecialWeapon_Params params;
	params.isAttacked = isAttacked;
	params.Attacker = Attacker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnAttachedActorLockedOnByEnemy
// (Native, Public)
// Parameters:
// class AGameObject*             LockedObject                   (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             EnemyObject                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::OnAttachedActorLockedOnByEnemy(class AGameObject* LockedObject, class AGameObject* EnemyObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnAttachedActorLockedOnByEnemy");

	AGameObject_OnAttachedActorLockedOnByEnemy_Params params;
	params.LockedObject = LockedObject;
	params.EnemyObject = EnemyObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.OnActivate
// (Event, Public, BlueprintEvent)

void AGameObject::OnActivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.OnActivate");

	AGameObject_OnActivate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.ModifyHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InValue                        (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCauseDamageEvent              (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameObject::ModifyHealth(float InValue, class APawn* DamageCauser, bool bCauseDamageEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.ModifyHealth");

	AGameObject_ModifyHealth_Params params;
	params.InValue = InValue;
	params.DamageCauser = DamageCauser;
	params.bCauseDamageEvent = bCauseDamageEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.K2_DestroyActor
// (Native, Public, BlueprintCallable)

void AGameObject::K2_DestroyActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.K2_DestroyActor");

	AGameObject_K2_DestroyActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.IsStruckByLightning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::IsStruckByLightning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.IsStruckByLightning");

	AGameObject_IsStruckByLightning_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.IsPlayerTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::IsPlayerTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.IsPlayerTarget");

	AGameObject_IsPlayerTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.IsNimbusOverlappingActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::IsNimbusOverlappingActor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.IsNimbusOverlappingActor");

	AGameObject_IsNimbusOverlappingActor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.IsAttackedBySpecialWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::IsAttackedBySpecialWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.IsAttackedBySpecialWeapon");

	AGameObject_IsAttackedBySpecialWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.IsAttackedByOpponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::IsAttackedByOpponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.IsAttackedByOpponent");

	AGameObject_IsAttackedByOpponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.IsAttackedByMainWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::IsAttackedByMainWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.IsAttackedByMainWeapon");

	AGameObject_IsAttackedByMainWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::IsAlive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.IsAlive");

	AGameObject_IsAlive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.IsActivated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::IsActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.IsActivated");

	AGameObject_IsActivated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetUnit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUnit*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AUnit* AGameObject::GetUnit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetUnit");

	AGameObject_GetUnit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetTrueSkyQueryID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            RelativeID                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AGameObject::GetTrueSkyQueryID(int RelativeID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetTrueSkyQueryID");

	AGameObject_GetTrueSkyQueryID_Params params;
	params.RelativeID = RelativeID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetSpeedMps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameObject::GetSpeedMps()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetSpeedMps");

	AGameObject_GetSpeedMps_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetSpeedKmph
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameObject::GetSpeedKmph()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetSpeedKmph");

	AGameObject_GetSpeedKmph_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetSpeakerID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AGameObject::GetSpeakerID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetSpeakerID");

	AGameObject_GetSpeakerID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetPursuitPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AGameObject::GetPursuitPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetPursuitPoint");

	AGameObject_GetPursuitPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetObjNameID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AGameObject::GetObjNameID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetObjNameID");

	AGameObject_GetObjNameID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetObjName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AGameObject::GetObjName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetObjName");

	AGameObject_GetObjName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetNimbusOverlappingActors
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>          OverlappingActors              (Parm, OutParm, ZeroConstructor)
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::GetNimbusOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetNimbusOverlappingActors");

	AGameObject_GetNimbusOverlappingActors_Params params;
	params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;
}


// Function Nimbus.GameObject.GetMinHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameObject::GetMinHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetMinHealth");

	AGameObject_GetMinHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameObject::GetMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetMaxHealth");

	AGameObject_GetMaxHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetLockedOnTarget
// (Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* AGameObject::GetLockedOnTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetLockedOnTarget");

	AGameObject_GetLockedOnTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetLeadPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector AGameObject::GetLeadPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetLeadPoint");

	AGameObject_GetLeadPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetIsUnidentified
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::GetIsUnidentified()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetIsUnidentified");

	AGameObject_GetIsUnidentified_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetIsInStealth
// (Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 PlayerLocation                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::GetIsInStealth(const struct FVector& PlayerLocation, class AGameObject* GameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetIsInStealth");

	AGameObject_GetIsInStealth_Params params;
	params.PlayerLocation = PlayerLocation;
	params.GameObject = GameObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetIsDetected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGameObject::GetIsDetected()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetIsDetected");

	AGameObject_GetIsDetected_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameObject::GetHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetHealth");

	AGameObject_GetHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetDamagePercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameObject::GetDamagePercentage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetDamagePercentage");

	AGameObject_GetDamagePercentage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetCallsignID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AGameObject::GetCallsignID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetCallsignID");

	AGameObject_GetCallsignID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetCallsign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString AGameObject::GetCallsign()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetCallsign");

	AGameObject_GetCallsign_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetAttackingMainWeaponArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AWeaponBase*>     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AWeaponBase*> AGameObject::GetAttackingMainWeaponArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetAttackingMainWeaponArray");

	AGameObject_GetAttackingMainWeaponArray_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.GetAltitudeMeters
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AGameObject::GetAltitudeMeters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.GetAltitudeMeters");

	AGameObject_GetAltitudeMeters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GameObject.ForceShowHudBoxInSand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::ForceShowHudBoxInSand(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.ForceShowHudBoxInSand");

	AGameObject_ForceShowHudBoxInSand_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.ForceDetection
// (Final, Native, Public, BlueprintCallable)

void AGameObject::ForceDetection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.ForceDetection");

	AGameObject_ForceDetection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.ExecRecordableEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            EventID                        (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::ExecRecordableEvent(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.ExecRecordableEvent");

	AGameObject_ExecRecordableEvent_Params params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.EnableKDSMode
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsEnabled                     (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::EnableKDSMode(bool bIsEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.EnableKDSMode");

	AGameObject_EnableKDSMode_Params params;
	params.bIsEnabled = bIsEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GameObject.EnableFriendlyFireDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AGameObject::EnableFriendlyFireDamage(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GameObject.EnableFriendlyFireDamage");

	AGameObject_EnableFriendlyFireDamage_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.StopFireContinuousShotWeapon
// (Final, Native, Public, BlueprintCallable)

void AAIGameObject::StopFireContinuousShotWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.StopFireContinuousShotWeapon");

	AAIGameObject_StopFireContinuousShotWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetWeaponSpecialBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWeaponNumber                  WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// EWeaponSpecialBehaviorType     BehaviorType                   (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetWeaponSpecialBehavior(EWeaponNumber WeaponNumber, EWeaponSpecialBehaviorType BehaviorType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetWeaponSpecialBehavior");

	AAIGameObject_SetWeaponSpecialBehavior_Params params;
	params.WeaponNumber = WeaponNumber;
	params.BehaviorType = BehaviorType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetWeaponSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInCanDamageTGT                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInCanFireNoCollisionWeapon    (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetWeaponSettings(bool bInCanDamageTGT, bool bInCanFireNoCollisionWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetWeaponSettings");

	AAIGameObject_SetWeaponSettings_Params params;
	params.bInCanDamageTGT = bInCanDamageTGT;
	params.bInCanFireNoCollisionWeapon = bInCanFireNoCollisionWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetShowHudBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetShowHudBox(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetShowHudBox");

	AAIGameObject_SetShowHudBox_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetPathParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSpeedKmph                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InAccelerationMpss             (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRotationSpeedDegree          (Parm, ZeroConstructor, IsPlainOldData)
// EAIPathMovingActorSnap         InSnapSetting                  (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetPathParameter(float InSpeedKmph, float InAccelerationMpss, float InRotationSpeedDegree, EAIPathMovingActorSnap InSnapSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetPathParameter");

	AAIGameObject_SetPathParameter_Params params;
	params.InSpeedKmph = InSpeedKmph;
	params.InAccelerationMpss = InAccelerationMpss;
	params.InRotationSpeedDegree = InRotationSpeedDegree;
	params.InSnapSetting = InSnapSetting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetParkingMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bParked                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          DelayTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetParkingMode(bool bParked, float DelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetParkingMode");

	AAIGameObject_SetParkingMode_Params params;
	params.bParked = bParked;
	params.DelayTime = DelayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetMoveOnPathApproachTimeOutValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetMoveOnPathApproachTimeOutValue(float InTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetMoveOnPathApproachTimeOutValue");

	AAIGameObject_SetMoveOnPathApproachTimeOutValue_Params params;
	params.InTime = InTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetIsTGT
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsTarget                      (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetIsTGT(bool bIsTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetIsTGT");

	AAIGameObject_SetIsTGT_Params params;
	params.bIsTarget = bIsTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetIsMissionSpecialObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsMissionSpecial              (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetIsMissionSpecialObject(bool bIsMissionSpecial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetIsMissionSpecialObject");

	AAIGameObject_SetIsMissionSpecialObject_Params params;
	params.bIsMissionSpecial = bIsMissionSpecial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetExceptionTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             ExceptionTarget                (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetExceptionTarget(class AGameObject* ExceptionTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetExceptionTarget");

	AAIGameObject_SetExceptionTarget_Params params;
	params.ExceptionTarget = ExceptionTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.SetEnemySearchType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETargetType                    InType                         (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::SetEnemySearchType(ETargetType InType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.SetEnemySearchType");

	AAIGameObject_SetEnemySearchType_Params params;
	params.InType = InType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.RemoveFromDebriefingRecording
// (Final, Native, Public, BlueprintCallable)

void AAIGameObject::RemoveFromDebriefingRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.RemoveFromDebriefingRecording");

	AAIGameObject_RemoveFromDebriefingRecording_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.ParkOnPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Point                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::ParkOnPoint(class AActor* Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.ParkOnPoint");

	AAIGameObject_ParkOnPoint_Params params;
	params.Point = Point;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.AIGameObject.OnStartedMovingOnPath__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPath*                 Path                           (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::OnStartedMovingOnPath__DelegateSignature(class AAIPath* Path)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.AIGameObject.OnStartedMovingOnPath__DelegateSignature");

	AAIGameObject_OnStartedMovingOnPath__DelegateSignature_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.AIGameObject.OnResetPath__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPath*                 Path                           (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::OnResetPath__DelegateSignature(class AAIPath* Path)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.AIGameObject.OnResetPath__DelegateSignature");

	AAIGameObject_OnResetPath__DelegateSignature_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.OnRecoveryTriggered
// (Event, Protected, BlueprintEvent)

void AAIGameObject::OnRecoveryTriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.OnRecoveryTriggered");

	AAIGameObject_OnRecoveryTriggered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.OnRecoveryEnded
// (Event, Protected, BlueprintEvent)

void AAIGameObject::OnRecoveryEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.OnRecoveryEnded");

	AAIGameObject_OnRecoveryEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.AIGameObject.OnReachedPathPoint__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPathPoint*            PathPoint                      (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::OnReachedPathPoint__DelegateSignature(class AAIPathPoint* PathPoint)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.AIGameObject.OnReachedPathPoint__DelegateSignature");

	AAIGameObject_OnReachedPathPoint__DelegateSignature_Params params;
	params.PathPoint = PathPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.AIGameObject.OnReachedPathEntryPoint__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPath*                 Path                           (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::OnReachedPathEntryPoint__DelegateSignature(class AAIPath* Path)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.AIGameObject.OnReachedPathEntryPoint__DelegateSignature");

	AAIGameObject_OnReachedPathEntryPoint__DelegateSignature_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.OnNotRecoveryTriggered
// (Event, Protected, BlueprintEvent)

void AAIGameObject::OnNotRecoveryTriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.OnNotRecoveryTriggered");

	AAIGameObject_OnNotRecoveryTriggered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.AIGameObject.OnFinishedMovingOnPath__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPath*                 Path                           (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::OnFinishedMovingOnPath__DelegateSignature(class AAIPath* Path)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.AIGameObject.OnFinishedMovingOnPath__DelegateSignature");

	AAIGameObject_OnFinishedMovingOnPath__DelegateSignature_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.OnEngagementOrderIssued
// (Event, Public, BlueprintEvent)

void AAIGameObject::OnEngagementOrderIssued()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.OnEngagementOrderIssued");

	AAIGameObject_OnEngagementOrderIssued_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.MoveWithCurve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveVector*            TransCurve                     (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveVector*            RotCurve                       (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::MoveWithCurve(class UCurveVector* TransCurve, class UCurveVector* RotCurve)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.MoveWithCurve");

	AAIGameObject_MoveWithCurve_Params params;
	params.TransCurve = TransCurve;
	params.RotCurve = RotCurve;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.MoveOnPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AAIPath*                 AIPath                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          InSpeedKmph                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InAccelerationMpss             (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRotationSpeedDegree          (Parm, ZeroConstructor, IsPlainOldData)
// EAIPathMovingActorSnap         InSnapSetting                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          InPointRadiusMeter             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTeleport                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseApproachActorForwardVector (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bKeepOnLastPathPoint           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseQuaternionVersion          (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::MoveOnPath(class AAIPath* AIPath, float InSpeedKmph, float InAccelerationMpss, float InRotationSpeedDegree, EAIPathMovingActorSnap InSnapSetting, float InPointRadiusMeter, bool bTeleport, bool bUseApproachActorForwardVector, bool bKeepOnLastPathPoint, bool bUseQuaternionVersion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.MoveOnPath");

	AAIGameObject_MoveOnPath_Params params;
	params.AIPath = AIPath;
	params.InSpeedKmph = InSpeedKmph;
	params.InAccelerationMpss = InAccelerationMpss;
	params.InRotationSpeedDegree = InRotationSpeedDegree;
	params.InSnapSetting = InSnapSetting;
	params.InPointRadiusMeter = InPointRadiusMeter;
	params.bTeleport = bTeleport;
	params.bUseApproachActorForwardVector = bUseApproachActorForwardVector;
	params.bKeepOnLastPathPoint = bKeepOnLastPathPoint;
	params.bUseQuaternionVersion = bUseQuaternionVersion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.IsTrackingAirTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIGameObject::IsTrackingAirTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.IsTrackingAirTarget");

	AAIGameObject_IsTrackingAirTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.IsTGT
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIGameObject::IsTGT()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.IsTGT");

	AAIGameObject_IsTGT_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.IsSea
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIGameObject::IsSea()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.IsSea");

	AAIGameObject_IsSea_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.IsReallyOnGround
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIGameObject::IsReallyOnGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.IsReallyOnGround");

	AAIGameObject_IsReallyOnGround_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.IsParkingMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIGameObject::IsParkingMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.IsParkingMode");

	AAIGameObject_IsParkingMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.IsAir
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIGameObject::IsAir()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.IsAir");

	AAIGameObject_IsAir_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.GetTrackingTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* AAIGameObject::GetTrackingTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.GetTrackingTarget");

	AAIGameObject_GetTrackingTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.GetSubFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESubFaction                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ESubFaction AAIGameObject::GetSubFaction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.GetSubFaction");

	AAIGameObject_GetSubFaction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.GetLockedOnTarget
// (Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* AAIGameObject::GetLockedOnTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.GetLockedOnTarget");

	AAIGameObject_GetLockedOnTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.GetFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFaction                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EFaction AAIGameObject::GetFaction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.GetFaction");

	AAIGameObject_GetFaction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.GetChildGameObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FName                   ComponentName                  (Parm, ZeroConstructor, IsPlainOldData)
// class AAIGameObject*           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AAIGameObject* AAIGameObject::GetChildGameObject(const struct FName& ComponentName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.GetChildGameObject");

	AAIGameObject_GetChildGameObject_Params params;
	params.ComponentName = ComponentName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.FireOneShotWeaponWithTargetTracking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWeaponNumber                  WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             Target                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreTargetRange             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bContinueTrackingTarget        (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::FireOneShotWeaponWithTargetTracking(EWeaponNumber WeaponNumber, class AGameObject* Target, bool bIgnoreTargetRange, bool bContinueTrackingTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.FireOneShotWeaponWithTargetTracking");

	AAIGameObject_FireOneShotWeaponWithTargetTracking_Params params;
	params.WeaponNumber = WeaponNumber;
	params.Target = Target;
	params.bIgnoreTargetRange = bIgnoreTargetRange;
	params.bContinueTrackingTarget = bContinueTrackingTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.FireOneShotWeaponWithLocationTracking
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// EWeaponNumber                  WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Target                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIgnoreTargetRange             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bContinueTrackingTarget        (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::FireOneShotWeaponWithLocationTracking(EWeaponNumber WeaponNumber, const struct FVector& Target, bool bIgnoreTargetRange, bool bContinueTrackingTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.FireOneShotWeaponWithLocationTracking");

	AAIGameObject_FireOneShotWeaponWithLocationTracking_Params params;
	params.WeaponNumber = WeaponNumber;
	params.Target = Target;
	params.bIgnoreTargetRange = bIgnoreTargetRange;
	params.bContinueTrackingTarget = bContinueTrackingTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.FireOneShotWeapon
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// EWeaponNumber                  WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DummyTargetOffset              (Parm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIGameObject::FireOneShotWeapon(EWeaponNumber WeaponNumber, class AGameObject* Target, const struct FVector& DummyTargetOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.FireOneShotWeapon");

	AAIGameObject_FireOneShotWeapon_Params params;
	params.WeaponNumber = WeaponNumber;
	params.Target = Target;
	params.DummyTargetOffset = DummyTargetOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIGameObject.FireContinuousShotWeapon
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// EWeaponNumber                  WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 DummyTargetOffset              (Parm, IsPlainOldData)
// float                          InFCSVolleyTime                (Parm, ZeroConstructor, IsPlainOldData)
// float                          InFCSVolleyFireInterval        (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::FireContinuousShotWeapon(EWeaponNumber WeaponNumber, class AGameObject* Target, const struct FVector& DummyTargetOffset, float InFCSVolleyTime, float InFCSVolleyFireInterval)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.FireContinuousShotWeapon");

	AAIGameObject_FireContinuousShotWeapon_Params params;
	params.WeaponNumber = WeaponNumber;
	params.Target = Target;
	params.DummyTargetOffset = DummyTargetOffset;
	params.InFCSVolleyTime = InFCSVolleyTime;
	params.InFCSVolleyFireInterval = InFCSVolleyFireInterval;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.EngagementOrderOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EEngagement                    Order                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TargetEnemy                    (Parm, ZeroConstructor, IsPlainOldData)
// EEnemySearchPriority           SearchPriority                 (Parm, ZeroConstructor, IsPlainOldData)
// EEnemySearchPriorityExtension  SearchPriorityExtension        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreUnidentifiedObject      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IgnoreAttackQuota              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CanFireWeapon1                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CanFireWeapon2                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CanFireWeapon3                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           PropogateToChild               (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::EngagementOrderOverride(EEngagement Order, class AActor* TargetEnemy, EEnemySearchPriority SearchPriority, EEnemySearchPriorityExtension SearchPriorityExtension, bool bIgnoreUnidentifiedObject, bool IgnoreAttackQuota, bool CanFireWeapon1, bool CanFireWeapon2, bool CanFireWeapon3, bool PropogateToChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.EngagementOrderOverride");

	AAIGameObject_EngagementOrderOverride_Params params;
	params.Order = Order;
	params.TargetEnemy = TargetEnemy;
	params.SearchPriority = SearchPriority;
	params.SearchPriorityExtension = SearchPriorityExtension;
	params.bIgnoreUnidentifiedObject = bIgnoreUnidentifiedObject;
	params.IgnoreAttackQuota = IgnoreAttackQuota;
	params.CanFireWeapon1 = CanFireWeapon1;
	params.CanFireWeapon2 = CanFireWeapon2;
	params.CanFireWeapon3 = CanFireWeapon3;
	params.PropogateToChild = PropogateToChild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.DisableRecovery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bDisable                       (Parm, ZeroConstructor, IsPlainOldData)

void AAIGameObject::DisableRecovery(bool bDisable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.DisableRecovery");

	AAIGameObject_DisableRecovery_Params params;
	params.bDisable = bDisable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.CheckOutOfWorld
// (Final, Native, Public, BlueprintCallable)

void AAIGameObject::CheckOutOfWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.CheckOutOfWorld");

	AAIGameObject_CheckOutOfWorld_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.CancelMovingOnPath
// (Final, Native, Public, BlueprintCallable)

void AAIGameObject::CancelMovingOnPath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.CancelMovingOnPath");

	AAIGameObject_CancelMovingOnPath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.AddToDebriefingRecording
// (Final, Native, Public, BlueprintCallable)

void AAIGameObject::AddToDebriefingRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.AddToDebriefingRecording");

	AAIGameObject_AddToDebriefingRecording_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGameObject.ActivateFlares
// (Final, Native, Public, BlueprintCallable)

void AAIGameObject::ActivateFlares()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGameObject.ActivateFlares");

	AAIGameObject_ActivateFlares_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineSurface
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineSurface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineSurface");

	AAIGroundVehicle_SubmarineSurface_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineStartNoseLift
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineStartNoseLift()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineStartNoseLift");

	AAIGroundVehicle_SubmarineStartNoseLift_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineRailgunStored
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineRailgunStored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineRailgunStored");

	AAIGroundVehicle_SubmarineRailgunStored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineRailgunExtract
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineRailgunExtract()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineRailgunExtract");

	AAIGroundVehicle_SubmarineRailgunExtract_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineRailgunDown
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineRailgunDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineRailgunDown");

	AAIGroundVehicle_SubmarineRailgunDown_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineRailgunBroken
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineRailgunBroken()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineRailgunBroken");

	AAIGroundVehicle_SubmarineRailgunBroken_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineRailgunAttack
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineRailgunAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineRailgunAttack");

	AAIGroundVehicle_SubmarineRailgunAttack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineForcedUnderWater
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineForcedUnderWater()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineForcedUnderWater");

	AAIGroundVehicle_SubmarineForcedUnderWater_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineForcedOnWater
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineForcedOnWater()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineForcedOnWater");

	AAIGroundVehicle_SubmarineForcedOnWater_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineEndNoseLift
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineEndNoseLift()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineEndNoseLift");

	AAIGroundVehicle_SubmarineEndNoseLift_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SubmarineDiving
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SubmarineDiving()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SubmarineDiving");

	AAIGroundVehicle_SubmarineDiving_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIGroundVehicle.SetLocationAboveGround
// (Final, Native, Public, BlueprintCallable)

void AAIGroundVehicle::SetLocationAboveGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIGroundVehicle.SetLocationAboveGround");

	AAIGroundVehicle_SetLocationAboveGround_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIHeli.IsEnabledRotorRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIHeli::IsEnabledRotorRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIHeli.IsEnabledRotorRotation");

	AAIHeli_IsEnabledRotorRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIHeli.EnableRotorRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDelayTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AAIHeli::EnableRotorRotation(bool bEnable, float InDelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIHeli.EnableRotorRotation");

	AAIHeli_EnableRotorRotation_Params params;
	params.bEnable = bEnable;
	params.InDelayTime = InDelayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIHeli.DroneSelfDestruct
// (Final, Native, Public, BlueprintCallable)

void AAIHeli::DroneSelfDestruct()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIHeli.DroneSelfDestruct");

	AAIHeli_DroneSelfDestruct_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIHeli.DroneReturn
// (Final, Native, Public, BlueprintCallable)

void AAIHeli::DroneReturn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIHeli.DroneReturn");

	AAIHeli_DroneReturn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIMihaiComponent.StopRailgunCharge
// (Final, Native, Public, BlueprintCallable)

void UAIMihaiComponent::StopRailgunCharge()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIMihaiComponent.StopRailgunCharge");

	UAIMihaiComponent_StopRailgunCharge_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIMihaiComponent.StopRailgunAiming
// (Final, Native, Public, BlueprintCallable)

void UAIMihaiComponent::StopRailgunAiming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIMihaiComponent.StopRailgunAiming");

	UAIMihaiComponent_StopRailgunAiming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIMihaiComponent.StartRailgunCharge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          ChargeTime                     (Parm, ZeroConstructor, IsPlainOldData)

void UAIMihaiComponent::StartRailgunCharge(float ChargeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIMihaiComponent.StartRailgunCharge");

	UAIMihaiComponent_StartRailgunCharge_Params params;
	params.ChargeTime = ChargeTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIMihaiComponent.StartRailgunAiming
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          AimingTime                     (Parm, ZeroConstructor, IsPlainOldData)

void UAIMihaiComponent::StartRailgunAiming(float AimingTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIMihaiComponent.StartRailgunAiming");

	UAIMihaiComponent_StartRailgunAiming_Params params;
	params.AimingTime = AimingTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.StopImbalanceAnime
// (Final, Native, Public, BlueprintCallable)

void AAIPlane::StopImbalanceAnime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.StopImbalanceAnime");

	AAIPlane_StopImbalanceAnime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.StartDamagedRotate
// (Final, Native, Public, BlueprintCallable)

void AAIPlane::StartDamagedRotate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.StartDamagedRotate");

	AAIPlane_StartDamagedRotate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetFormationLightEmissive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          intensity                      (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::SetFormationLightEmissive(float intensity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetFormationLightEmissive");

	AAIPlane_SetFormationLightEmissive_Params params;
	params.intensity = intensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetFELocationAndRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, IsPlainOldData)

void AAIPlane::SetFELocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetFELocationAndRotation");

	AAIPlane_SetFELocationAndRotation_Params params;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetCurrentBehaviorTreeName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 Name                           (Parm, ZeroConstructor)

void AAIPlane::SetCurrentBehaviorTreeName(const struct FString& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetCurrentBehaviorTreeName");

	AAIPlane_SetCurrentBehaviorTreeName_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetCloudAvoidanceAbility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           CloudAvoidanceAbility          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::SetCloudAvoidanceAbility(bool CloudAvoidanceAbility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetCloudAvoidanceAbility");

	AAIPlane_SetCloudAvoidanceAbility_Params params;
	params.CloudAvoidanceAbility = CloudAvoidanceAbility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetBehaviorActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           BehaviorActiveState            (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::SetBehaviorActive(bool BehaviorActiveState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetBehaviorActive");

	AAIPlane_SetBehaviorActive_Params params;
	params.BehaviorActiveState = BehaviorActiveState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetAutopilotYawRelative
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          RelativeAngle                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::SetAutopilotYawRelative(float RelativeAngle, float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetAutopilotYawRelative");

	AAIPlane_SetAutopilotYawRelative_Params params;
	params.RelativeAngle = RelativeAngle;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetAutopilotRollRelative
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          RelativeAngle                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::SetAutopilotRollRelative(float RelativeAngle, float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetAutopilotRollRelative");

	AAIPlane_SetAutopilotRollRelative_Params params;
	params.RelativeAngle = RelativeAngle;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetAutopilotRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          AbsoluteAngle                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::SetAutopilotRoll(float AbsoluteAngle, float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetAutopilotRoll");

	AAIPlane_SetAutopilotRoll_Params params;
	params.AbsoluteAngle = AbsoluteAngle;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SetAutopilotPitchRelative
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          RelativeAngle                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::SetAutopilotPitchRelative(float RelativeAngle, float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SetAutopilotPitchRelative");

	AAIPlane_SetAutopilotPitchRelative_Params params;
	params.RelativeAngle = RelativeAngle;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.SearchFrontCloudDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::SearchFrontCloudDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.SearchFrontCloudDirection");

	AAIPlane_SearchFrontCloudDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.RequestSpecialAction
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FAISpecialActionRequestInfo SpecialActionRequestInfo       (ConstParm, Parm, OutParm, ReferenceParm)

void AAIPlane::RequestSpecialAction(const struct FAISpecialActionRequestInfo& SpecialActionRequestInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.RequestSpecialAction");

	AAIPlane_RequestSpecialAction_Params params;
	params.SpecialActionRequestInfo = SpecialActionRequestInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.PlayImbalanceAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveVector*            InRotationCurveData            (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::PlayImbalanceAnime(class UCurveVector* InRotationCurveData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.PlayImbalanceAnime");

	AAIPlane_PlayImbalanceAnime_Params params;
	params.InRotationCurveData = InRotationCurveData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.OverwriteFELocationAndRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, IsPlainOldData)

void AAIPlane::OverwriteFELocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.OverwriteFELocationAndRotation");

	AAIPlane_OverwriteFELocationAndRotation_Params params;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.OverrideAIPlaneConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*              AIPlaneConfig                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::OverrideAIPlaneConfig(class UDataTable* AIPlaneConfig)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.OverrideAIPlaneConfig");

	AAIPlane_OverrideAIPlaneConfig_Params params;
	params.AIPlaneConfig = AIPlaneConfig;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.OnUpdateAIState
// (Native, Public, BlueprintCallable)

void AAIPlane::OnUpdateAIState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.OnUpdateAIState");

	AAIPlane_OnUpdateAIState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.OnPostAIState
// (Native, Public, BlueprintCallable)

void AAIPlane::OnPostAIState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.OnPostAIState");

	AAIPlane_OnPostAIState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.IsStrictDrift
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::IsStrictDrift()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.IsStrictDrift");

	AAIPlane_IsStrictDrift_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.IsInKDSP2
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::IsInKDSP2()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.IsInKDSP2");

	AAIPlane_IsInKDSP2_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.IsInKDSP1
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::IsInKDSP1()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.IsInKDSP1");

	AAIPlane_IsInKDSP1_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.IsInCloud
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::IsInCloud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.IsInCloud");

	AAIPlane_IsInCloud_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.IsFireMissileFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::IsFireMissileFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.IsFireMissileFinished");

	AAIPlane_IsFireMissileFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.IsEnabledSurroundPursuitTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::IsEnabledSurroundPursuitTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.IsEnabledSurroundPursuitTarget");

	AAIPlane_IsEnabledSurroundPursuitTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.IsDrift
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::IsDrift()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.IsDrift");

	AAIPlane_IsDrift_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.IsApproachingCloud
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AAIPlane::IsApproachingCloud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.IsApproachingCloud");

	AAIPlane_IsApproachingCloud_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.InputYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::InputYaw(float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.InputYaw");

	AAIPlane_InputYaw_Params params;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.InputRoll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::InputRoll(float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.InputRoll");

	AAIPlane_InputRoll_Params params;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.InputPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::InputPitch(float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.InputPitch");

	AAIPlane_InputPitch_Params params;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.GetTurnSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AAIPlane::GetTurnSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.GetTurnSpeed");

	AAIPlane_GetTurnSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.GetMinSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AAIPlane::GetMinSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.GetMinSpeed");

	AAIPlane_GetMinSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.GetMaxSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AAIPlane::GetMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.GetMaxSpeed");

	AAIPlane_GetMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.GetDecelerationMpss
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AAIPlane::GetDecelerationMpss()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.GetDecelerationMpss");

	AAIPlane_GetDecelerationMpss_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.GetCockpitPartsAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FNimbusCockpitPartsAnim ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FNimbusCockpitPartsAnim AAIPlane::GetCockpitPartsAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.GetCockpitPartsAnimation");

	AAIPlane_GetCockpitPartsAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.GetBodyPartsAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FNimbusBodyPartsAnim    ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FNimbusBodyPartsAnim AAIPlane::GetBodyPartsAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.GetBodyPartsAnimation");

	AAIPlane_GetBodyPartsAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.GetAccelerationMpss
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AAIPlane::GetAccelerationMpss()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.GetAccelerationMpss");

	AAIPlane_GetAccelerationMpss_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIPlane.FrameUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::FrameUpdate(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.FrameUpdate");

	AAIPlane_FrameUpdate_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.EnableTakeoffAfterburner
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::EnableTakeoffAfterburner(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.EnableTakeoffAfterburner");

	AAIPlane_EnableTakeoffAfterburner_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.EnableLandingGear
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDelayTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::EnableLandingGear(bool bEnable, float InDelayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.EnableLandingGear");

	AAIPlane_EnableLandingGear_Params params;
	params.bEnable = bEnable;
	params.InDelayTime = InDelayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.EnableAvoidObstacle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::EnableAvoidObstacle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.EnableAvoidObstacle");

	AAIPlane_EnableAvoidObstacle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.CheckAvoidObstacle
// (Final, Native, Public, BlueprintCallable)

void AAIPlane::CheckAvoidObstacle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.CheckAvoidObstacle");

	AAIPlane_CheckAvoidObstacle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.AutopilotHorizontalYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::AutopilotHorizontalYaw(float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.AutopilotHorizontalYaw");

	AAIPlane_AutopilotHorizontalYaw_Params params;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.AutopilotAdjustSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          spd                            (Parm, ZeroConstructor, IsPlainOldData)
// float                          Power                          (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::AutopilotAdjustSpeed(float spd, float Power)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.AutopilotAdjustSpeed");

	AAIPlane_AutopilotAdjustSpeed_Params params;
	params.spd = spd;
	params.Power = Power;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.AIFlightEngineTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaTimeSeconds               (Parm, ZeroConstructor, IsPlainOldData)

void AAIPlane::AIFlightEngineTick(float DeltaTimeSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.AIFlightEngineTick");

	AAIPlane_AIFlightEngineTick_Params params;
	params.DeltaTimeSeconds = DeltaTimeSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIPlane.AIFlightEngineRepositionDebugUseOnly
// (Final, Native, Public, BlueprintCallable)

void AAIPlane::AIFlightEngineRepositionDebugUseOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIPlane.AIFlightEngineRepositionDebugUseOnly");

	AAIPlane_AIFlightEngineRepositionDebugUseOnly_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AirCurrentVolume.OnPreRestartPhaseEvent
// (Final, Native, Protected)

void AAirCurrentVolume::OnPreRestartPhaseEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AirCurrentVolume.OnPreRestartPhaseEvent");

	AAirCurrentVolume_OnPreRestartPhaseEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiplayerZone.Activate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bActive                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AMultiplayerZone::Activate(bool bActive, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiplayerZone.Activate");

	AMultiplayerZone_Activate_Params params;
	params.bActive = bActive;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AITurnToTargetComponent.TurnToOriginal
// (Final, Native, Public, BlueprintCallable)

void UAITurnToTargetComponent::TurnToOriginal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.TurnToOriginal");

	UAITurnToTargetComponent_TurnToOriginal_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AITurnToTargetComponent.SetTurnToTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             TargetToTurnTo                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAITurnToTargetComponent::SetTurnToTarget(class AGameObject* TargetToTurnTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.SetTurnToTarget");

	UAITurnToTargetComponent_SetTurnToTarget_Params params;
	params.TargetToTurnTo = TargetToTurnTo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.SetTurnToLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 LocationToTurnTo               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAITurnToTargetComponent::SetTurnToLocation(const struct FVector& LocationToTurnTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.SetTurnToLocation");

	UAITurnToTargetComponent_SetTurnToLocation_Params params;
	params.LocationToTurnTo = LocationToTurnTo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.SetTurnToDirection
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 DirectionToTurnTo              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAITurnToTargetComponent::SetTurnToDirection(const struct FVector& DirectionToTurnTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.SetTurnToDirection");

	UAITurnToTargetComponent_SetTurnToDirection_Params params;
	params.DirectionToTurnTo = DirectionToTurnTo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.PerformTargetSweep
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             Target                         (Parm, ZeroConstructor, IsPlainOldData)

void UAITurnToTargetComponent::PerformTargetSweep(class AGameObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.PerformTargetSweep");

	UAITurnToTargetComponent_PerformTargetSweep_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AITurnToTargetComponent.PerformCustomSweep
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartDirection                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 EndDirection                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          StayAtStartDuration            (Parm, ZeroConstructor, IsPlainOldData)
// float                          StayAtEndDuration              (Parm, ZeroConstructor, IsPlainOldData)
// float                          TurnRateMultiplier             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSweepLongerDirection          (Parm, ZeroConstructor, IsPlainOldData)

void UAITurnToTargetComponent::PerformCustomSweep(const struct FVector& StartDirection, const struct FVector& EndDirection, float StayAtStartDuration, float StayAtEndDuration, float TurnRateMultiplier, bool bSweepLongerDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.PerformCustomSweep");

	UAITurnToTargetComponent_PerformCustomSweep_Params params;
	params.StartDirection = StartDirection;
	params.EndDirection = EndDirection;
	params.StayAtStartDuration = StayAtStartDuration;
	params.StayAtEndDuration = StayAtEndDuration;
	params.TurnRateMultiplier = TurnRateMultiplier;
	params.bSweepLongerDirection = bSweepLongerDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AITurnToTargetComponent.IsSweeping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAITurnToTargetComponent::IsSweeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.IsSweeping");

	UAITurnToTargetComponent_IsSweeping_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.IsStartingSweep
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAITurnToTargetComponent::IsStartingSweep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.IsStartingSweep");

	UAITurnToTargetComponent_IsStartingSweep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.HasCompletedTurning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UAITurnToTargetComponent::HasCompletedTurning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.HasCompletedTurning");

	UAITurnToTargetComponent_HasCompletedTurning_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.GetYawBoneTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UAITurnToTargetComponent::GetYawBoneTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.GetYawBoneTransform");

	UAITurnToTargetComponent_GetYawBoneTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.GetTurnToDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UAITurnToTargetComponent::GetTurnToDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.GetTurnToDirection");

	UAITurnToTargetComponent_GetTurnToDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.GetTurnRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UAITurnToTargetComponent::GetTurnRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.GetTurnRotation");

	UAITurnToTargetComponent_GetTurnRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.GetTurnForwardVector
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UAITurnToTargetComponent::GetTurnForwardVector()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.GetTurnForwardVector");

	UAITurnToTargetComponent_GetTurnForwardVector_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AITurnToTargetComponent.GetPitchBoneTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform              ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FTransform UAITurnToTargetComponent::GetPitchBoneTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AITurnToTargetComponent.GetPitchBoneTransform");

	UAITurnToTargetComponent_GetPitchBoneTransform_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AIUAVComponent.ResetUAVDockSlots
// (Final, Native, Static, Public, BlueprintCallable)

void UAIUAVComponent::STATIC_ResetUAVDockSlots()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIUAVComponent.ResetUAVDockSlots");

	UAIUAVComponent_ResetUAVDockSlots_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIUAVComponent.OnVisibilityChanged
// (Final, Native, Protected)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void UAIUAVComponent::OnVisibilityChanged(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIUAVComponent.OnVisibilityChanged");

	UAIUAVComponent_OnVisibilityChanged_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AIUAVComponent.Launch
// (Final, Native, Public, BlueprintCallable)

void UAIUAVComponent::Launch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AIUAVComponent.Launch");

	UAIUAVComponent_Launch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.ApproachDistObservationComponent.RemoveApproachGameObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             AddGameObject                  (Parm, ZeroConstructor, IsPlainOldData)

void UApproachDistObservationComponent::RemoveApproachGameObject(class AGameObject* AddGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ApproachDistObservationComponent.RemoveApproachGameObject");

	UApproachDistObservationComponent_RemoveApproachGameObject_Params params;
	params.AddGameObject = AddGameObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.ApproachDistObservationComponent.IsApproachGameObjectsAllDead
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UApproachDistObservationComponent::IsApproachGameObjectsAllDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ApproachDistObservationComponent.IsApproachGameObjectsAllDead");

	UApproachDistObservationComponent_IsApproachGameObjectsAllDead_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.ApproachDistObservationComponent.GetRemainingDistanceMeter
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UApproachDistObservationComponent::GetRemainingDistanceMeter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ApproachDistObservationComponent.GetRemainingDistanceMeter");

	UApproachDistObservationComponent_GetRemainingDistanceMeter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.ApproachDistObservationComponent.AddApproachGameObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             AddGameObject                  (Parm, ZeroConstructor, IsPlainOldData)

void UApproachDistObservationComponent::AddApproachGameObject(class AGameObject* AddGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ApproachDistObservationComponent.AddApproachGameObject");

	UApproachDistObservationComponent_AddApproachGameObject_Params params;
	params.AddGameObject = AddGameObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.WeaponBase.OnWeaponDestroyed
// (Event, Public, BlueprintEvent)

void AWeaponBase::OnWeaponDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.OnWeaponDestroyed");

	AWeaponBase_OnWeaponDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.WeaponBase.OnInitialized
// (Event, Public, BlueprintEvent)

void AWeaponBase::OnInitialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.OnInitialized");

	AWeaponBase_OnInitialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.WeaponBase.OnImpact
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 OldVelocity                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AWeaponBase::OnImpact(const struct FHitResult& HitResult, const struct FVector& OldVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.OnImpact");

	AWeaponBase_OnImpact_Params params;
	params.HitResult = HitResult;
	params.OldVelocity = OldVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.WeaponBase.OnCreateWeapon_BP
// (Event, Public, BlueprintEvent)

void AWeaponBase::OnCreateWeapon_BP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.OnCreateWeapon_BP");

	AWeaponBase_OnCreateWeapon_BP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.WeaponBase.IsDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AWeaponBase::IsDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.IsDestroyed");

	AWeaponBase_IsDestroyed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.WeaponBase.GetWeaponID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EWeaponID                      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EWeaponID AWeaponBase::GetWeaponID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.GetWeaponID");

	AWeaponBase_GetWeaponID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.WeaponBase.GetTargetToHome
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* AWeaponBase::GetTargetToHome()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.GetTargetToHome");

	AWeaponBase_GetTargetToHome_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.WeaponBase.GetSelectionAssistRange
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWeaponBase::GetSelectionAssistRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.GetSelectionAssistRange");

	AWeaponBase_GetSelectionAssistRange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.WeaponBase.GetSelectionAssistRadius
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWeaponBase::GetSelectionAssistRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.GetSelectionAssistRadius");

	AWeaponBase_GetSelectionAssistRadius_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.WeaponBase.GetSelectionAssistLockOnTime
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWeaponBase::GetSelectionAssistLockOnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.GetSelectionAssistLockOnTime");

	AWeaponBase_GetSelectionAssistLockOnTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.WeaponBase.GetSelectionAssistAngle
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWeaponBase::GetSelectionAssistAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.GetSelectionAssistAngle");

	AWeaponBase_GetSelectionAssistAngle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.WeaponBase.GetLifeTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AWeaponBase::GetLifeTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponBase.GetLifeTime");

	AWeaponBase_GetLifeTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.ExplosiveWeapon.OnTargetMiss
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AExplosiveWeapon::OnTargetMiss()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ExplosiveWeapon.OnTargetMiss");

	AExplosiveWeapon_OnTargetMiss_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.ExplosiveWeapon.OnMovementReportMiss
// (Final, Native, Public)

void AExplosiveWeapon::OnMovementReportMiss()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ExplosiveWeapon.OnMovementReportMiss");

	AExplosiveWeapon_OnMovementReportMiss_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.ExplosiveWeapon.InformTargetBeingAttacked
// (Final, Native, Public)
// Parameters:
// bool                           bIsAttacked                    (Parm, ZeroConstructor, IsPlainOldData)

void AExplosiveWeapon::InformTargetBeingAttacked(bool bIsAttacked)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ExplosiveWeapon.InformTargetBeingAttacked");

	AExplosiveWeapon_InformTargetBeingAttacked_Params params;
	params.bIsAttacked = bIsAttacked;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AsyncTaskActivateUnit.ActivateUnit
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AUnit*                   Unit                           (Parm, ZeroConstructor, IsPlainOldData)
// class UVariableComparator*     ConditionToActivate            (Parm, ZeroConstructor, IsPlainOldData)
// float                          DelayInSeconds                 (Parm, ZeroConstructor, IsPlainOldData)
// EUnitActivationType            ActivationType                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, IsPlainOldData)
// class AActor*                  TransformReferenceActor        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddHeightOfGroundToZ          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Comment                        (Parm, ZeroConstructor)
// bool                           bEnabledDelay                  (Parm, ZeroConstructor, IsPlainOldData)
// class UAsyncTaskActivateUnit*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAsyncTaskActivateUnit* UAsyncTaskActivateUnit::STATIC_ActivateUnit(class AUnit* Unit, class UVariableComparator* ConditionToActivate, float DelayInSeconds, EUnitActivationType ActivationType, const struct FVector& Position, const struct FRotator& Rotation, class AActor* TransformReferenceActor, bool bAddHeightOfGroundToZ, const struct FString& Comment, bool bEnabledDelay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AsyncTaskActivateUnit.ActivateUnit");

	UAsyncTaskActivateUnit_ActivateUnit_Params params;
	params.Unit = Unit;
	params.ConditionToActivate = ConditionToActivate;
	params.DelayInSeconds = DelayInSeconds;
	params.ActivationType = ActivationType;
	params.Position = Position;
	params.Rotation = Rotation;
	params.TransformReferenceActor = TransformReferenceActor;
	params.bAddHeightOfGroundToZ = bAddHeightOfGroundToZ;
	params.Comment = Comment;
	params.bEnabledDelay = bEnabledDelay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AsyncTaskMissionRequestIGC.RequestIGC
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMatineeActor*           MatineeActor                   (Parm, ZeroConstructor, IsPlainOldData)
// EMultiplayerIGCType            IGCType                        (Parm, ZeroConstructor, IsPlainOldData)
// class UDataTable*              BeginSubtitleDataTable         (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           BeginVoiceEvent                (Parm, ZeroConstructor, IsPlainOldData)
// EIGCTransitionType             TransitionType                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBeginFade                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBeginUpdateShadowDistanceScale (Parm, ZeroConstructor, IsPlainOldData)
// float                          BeginShadowDistance            (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           EndVoiceEvent                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEndFade                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   MiniGameMapPhaseName           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopBGMWhenSkip               (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           OverrideStopBGMEventWhenSkip   (Parm, ZeroConstructor, IsPlainOldData)
// class UAsyncTaskMissionRequestIGC* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAsyncTaskMissionRequestIGC* UAsyncTaskMissionRequestIGC::STATIC_RequestIGC(class AMatineeActor* MatineeActor, EMultiplayerIGCType IGCType, class UDataTable* BeginSubtitleDataTable, class UAkAudioEvent* BeginVoiceEvent, EIGCTransitionType TransitionType, bool bBeginFade, bool bBeginUpdateShadowDistanceScale, float BeginShadowDistance, class UAkAudioEvent* EndVoiceEvent, bool bEndFade, const struct FName& MiniGameMapPhaseName, bool bStopBGMWhenSkip, class UAkAudioEvent* OverrideStopBGMEventWhenSkip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AsyncTaskMissionRequestIGC.RequestIGC");

	UAsyncTaskMissionRequestIGC_RequestIGC_Params params;
	params.MatineeActor = MatineeActor;
	params.IGCType = IGCType;
	params.BeginSubtitleDataTable = BeginSubtitleDataTable;
	params.BeginVoiceEvent = BeginVoiceEvent;
	params.TransitionType = TransitionType;
	params.bBeginFade = bBeginFade;
	params.bBeginUpdateShadowDistanceScale = bBeginUpdateShadowDistanceScale;
	params.BeginShadowDistance = BeginShadowDistance;
	params.EndVoiceEvent = EndVoiceEvent;
	params.bEndFade = bEndFade;
	params.MiniGameMapPhaseName = MiniGameMapPhaseName;
	params.bStopBGMWhenSkip = bStopBGMWhenSkip;
	params.OverrideStopBGMEventWhenSkip = OverrideStopBGMEventWhenSkip;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AsyncTaskProcessUnit.StopTask
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AUnit*                   Target                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsInterrupted                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCallExit                      (Parm, ZeroConstructor, IsPlainOldData)

void UAsyncTaskProcessUnit::STATIC_StopTask(class AUnit* Target, bool bIsInterrupted, bool bCallExit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AsyncTaskProcessUnit.StopTask");

	UAsyncTaskProcessUnit_StopTask_Params params;
	params.Target = Target;
	params.bIsInterrupted = bIsInterrupted;
	params.bCallExit = bCallExit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AsyncTaskMoveUnit.MoveToLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AUnit*                   Target                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// class UVariableComparator*     InterruptCondition             (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinDistanceToLocationInMeters  (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedKmph                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeLimitInSeconds             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBoostable                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Comment                        (Parm, ZeroConstructor)
// class UAsyncTaskMoveUnit*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAsyncTaskMoveUnit* UAsyncTaskMoveUnit::STATIC_MoveToLocation(class AUnit* Target, const struct FVector& Location, class UVariableComparator* InterruptCondition, float MinDistanceToLocationInMeters, float SpeedKmph, float TimeLimitInSeconds, bool bBoostable, const struct FString& Comment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AsyncTaskMoveUnit.MoveToLocation");

	UAsyncTaskMoveUnit_MoveToLocation_Params params;
	params.Target = Target;
	params.Location = Location;
	params.InterruptCondition = InterruptCondition;
	params.MinDistanceToLocationInMeters = MinDistanceToLocationInMeters;
	params.SpeedKmph = SpeedKmph;
	params.TimeLimitInSeconds = TimeLimitInSeconds;
	params.bBoostable = bBoostable;
	params.Comment = Comment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AsyncTaskMoveUnit.MoveToActor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AUnit*                   Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// class UVariableComparator*     InterruptCondition             (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinDistanceToLocationInMeters  (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedKmph                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeLimitInSeconds             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 OffsetFromActor                (Parm, IsPlainOldData)
// bool                           bBoostable                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Comment                        (Parm, ZeroConstructor)
// class UAsyncTaskMoveUnit*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAsyncTaskMoveUnit* UAsyncTaskMoveUnit::STATIC_MoveToActor(class AUnit* Target, class AActor* Actor, class UVariableComparator* InterruptCondition, float MinDistanceToLocationInMeters, float SpeedKmph, float TimeLimitInSeconds, const struct FVector& OffsetFromActor, bool bBoostable, const struct FString& Comment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AsyncTaskMoveUnit.MoveToActor");

	UAsyncTaskMoveUnit_MoveToActor_Params params;
	params.Target = Target;
	params.Actor = Actor;
	params.InterruptCondition = InterruptCondition;
	params.MinDistanceToLocationInMeters = MinDistanceToLocationInMeters;
	params.SpeedKmph = SpeedKmph;
	params.TimeLimitInSeconds = TimeLimitInSeconds;
	params.OffsetFromActor = OffsetFromActor;
	params.bBoostable = bBoostable;
	params.Comment = Comment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AsyncTaskMoveUnit.MoveOnPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AUnit*                   Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class AAIPath*                 AIPath                         (Parm, ZeroConstructor, IsPlainOldData)
// class UVariableComparator*     InterruptCondition             (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeLimitInSeconds             (Parm, ZeroConstructor, IsPlainOldData)
// float                          SpeedKmph                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          AccelerationMpss               (Parm, ZeroConstructor, IsPlainOldData)
// float                          RotationSpeedDegree            (Parm, ZeroConstructor, IsPlainOldData)
// float                          PointRadiusMeter               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bTeleportUnitLocation          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseApproachActorForwardVector (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBoostable                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Comment                        (Parm, ZeroConstructor)
// class UAsyncTaskMoveUnit*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAsyncTaskMoveUnit* UAsyncTaskMoveUnit::STATIC_MoveOnPath(class AUnit* Target, class AAIPath* AIPath, class UVariableComparator* InterruptCondition, float TimeLimitInSeconds, float SpeedKmph, float AccelerationMpss, float RotationSpeedDegree, float PointRadiusMeter, bool bTeleportUnitLocation, bool bUseApproachActorForwardVector, bool bBoostable, const struct FString& Comment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AsyncTaskMoveUnit.MoveOnPath");

	UAsyncTaskMoveUnit_MoveOnPath_Params params;
	params.Target = Target;
	params.AIPath = AIPath;
	params.InterruptCondition = InterruptCondition;
	params.TimeLimitInSeconds = TimeLimitInSeconds;
	params.SpeedKmph = SpeedKmph;
	params.AccelerationMpss = AccelerationMpss;
	params.RotationSpeedDegree = RotationSpeedDegree;
	params.PointRadiusMeter = PointRadiusMeter;
	params.bTeleportUnitLocation = bTeleportUnitLocation;
	params.bUseApproachActorForwardVector = bUseApproachActorForwardVector;
	params.bBoostable = bBoostable;
	params.Comment = Comment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AsyncTaskStopUnit.StopUnit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AUnit*                   Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class UVariableComparator*     InterruptCondition             (Parm, ZeroConstructor, IsPlainOldData)
// float                          StopDurationInSeconds          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Comment                        (Parm, ZeroConstructor)
// class UAsyncTaskStopUnit*      ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UAsyncTaskStopUnit* UAsyncTaskStopUnit::STATIC_StopUnit(class AUnit* Target, class UVariableComparator* InterruptCondition, float StopDurationInSeconds, const struct FString& Comment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AsyncTaskStopUnit.StopUnit");

	UAsyncTaskStopUnit_StopUnit_Params params;
	params.Target = Target;
	params.InterruptCondition = InterruptCondition;
	params.StopDurationInSeconds = StopDurationInSeconds;
	params.Comment = Comment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.AttachedInstantWeapon.OnLifeTimeExpired
// (Event, Public, BlueprintEvent)

void AAttachedInstantWeapon::OnLifeTimeExpired()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AttachedInstantWeapon.OnLifeTimeExpired");

	AAttachedInstantWeapon_OnLifeTimeExpired_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.AttachedInstantWeapon.OnCreateWeaponEnd
// (Event, Public, BlueprintEvent)

void AAttachedInstantWeapon::OnCreateWeaponEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.AttachedInstantWeapon.OnCreateWeaponEnd");

	AAttachedInstantWeapon_OnCreateWeaponEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasePassSoundComponent.OnReplayCameraChanged
// (Final, Native, Protected)
// Parameters:
// unsigned char                  Type                           (Parm, ZeroConstructor, IsPlainOldData)

void UBasePassSoundComponent::OnReplayCameraChanged(unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasePassSoundComponent.OnReplayCameraChanged");

	UBasePassSoundComponent_OnReplayCameraChanged_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasePassSoundComponent.OnCameraViewChanged
// (Final, Native, Protected)
// Parameters:
// ECameraType                    Type                           (Parm, ZeroConstructor, IsPlainOldData)

void UBasePassSoundComponent::OnCameraViewChanged(ECameraType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasePassSoundComponent.OnCameraViewChanged");

	UBasePassSoundComponent_OnCameraViewChanged_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.UpdateSunParameters_BP
// (Event, Protected, BlueprintEvent)

void ABasicLightRig::UpdateSunParameters_BP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.UpdateSunParameters_BP");

	ABasicLightRig_UpdateSunParameters_BP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.UpdateLoop_BP
// (Event, Protected, BlueprintEvent)

void ABasicLightRig::UpdateLoop_BP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.UpdateLoop_BP");

	ABasicLightRig_UpdateLoop_BP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.UpdateLocalCameraPosition_BP
// (Event, Protected, BlueprintEvent)

void ABasicLightRig::UpdateLocalCameraPosition_BP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.UpdateLocalCameraPosition_BP");

	ABasicLightRig_UpdateLocalCameraPosition_BP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.UpdateLightRigMPC_BP
// (Event, Protected, BlueprintEvent)

void ABasicLightRig::UpdateLightRigMPC_BP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.UpdateLightRigMPC_BP");

	ABasicLightRig_UpdateLightRigMPC_BP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.UpdateBlendHeight
// (Final, Native, Protected, BlueprintCallable)

void ABasicLightRig::UpdateBlendHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.UpdateBlendHeight");

	ABasicLightRig_UpdateBlendHeight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.UpdateAircraftMaterial_BP
// (Event, Protected, BlueprintEvent)

void ABasicLightRig::UpdateAircraftMaterial_BP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.UpdateAircraftMaterial_BP");

	ABasicLightRig_UpdateAircraftMaterial_BP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.SetMinBlendHeight
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ABasicLightRig::SetMinBlendHeight(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.SetMinBlendHeight");

	ABasicLightRig_SetMinBlendHeight_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.SetMaxBlendHeight
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ABasicLightRig::SetMaxBlendHeight(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.SetMaxBlendHeight");

	ABasicLightRig_SetMaxBlendHeight_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.ResetAircraftMaterial_BP
// (Event, Protected, BlueprintEvent)

void ABasicLightRig::ResetAircraftMaterial_BP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.ResetAircraftMaterial_BP");

	ABasicLightRig_ResetAircraftMaterial_BP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.OnTransitionToMiniGameEvent_Native
// (Final, Native, Private)
// Parameters:
// bool                           bIsTransitingIn                (Parm, ZeroConstructor, IsPlainOldData)

void ABasicLightRig::OnTransitionToMiniGameEvent_Native(bool bIsTransitingIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.OnTransitionToMiniGameEvent_Native");

	ABasicLightRig_OnTransitionToMiniGameEvent_Native_Params params;
	params.bIsTransitingIn = bIsTransitingIn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.MaterialUpdateCP_BP
// (Event, Protected, BlueprintEvent)

void ABasicLightRig::MaterialUpdateCP_BP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.MaterialUpdateCP_BP");

	ABasicLightRig_MaterialUpdateCP_BP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BasicLightRig.GetUseSkyLight
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABasicLightRig::GetUseSkyLight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetUseSkyLight");

	ABasicLightRig_GetUseSkyLight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetUseOfflineCapture
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABasicLightRig::GetUseOfflineCapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetUseOfflineCapture");

	ABasicLightRig_GetUseOfflineCapture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetUseHDRI
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABasicLightRig::GetUseHDRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetUseHDRI");

	ABasicLightRig_GetUseHDRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetUseCubemapBlending
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABasicLightRig::GetUseCubemapBlending()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetUseCubemapBlending");

	ABasicLightRig_GetUseCubemapBlending_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetTimeline_RoughnessRampUp
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UTimelineComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UTimelineComponent* ABasicLightRig::GetTimeline_RoughnessRampUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetTimeline_RoughnessRampUp");

	ABasicLightRig_GetTimeline_RoughnessRampUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetTimeline_RoughnessRampDown
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UTimelineComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UTimelineComponent* ABasicLightRig::GetTimeline_RoughnessRampDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetTimeline_RoughnessRampDown");

	ABasicLightRig_GetTimeline_RoughnessRampDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetTimeline_2
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UTimelineComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UTimelineComponent* ABasicLightRig::GetTimeline_2()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetTimeline_2");

	ABasicLightRig_GetTimeline_2_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetTimeline_1
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UTimelineComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UTimelineComponent* ABasicLightRig::GetTimeline_1()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetTimeline_1");

	ABasicLightRig_GetTimeline_1_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSunLight_CP
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UDirectionalLightComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UDirectionalLightComponent* ABasicLightRig::GetSunLight_CP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSunLight_CP");

	ABasicLightRig_GetSunLight_CP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSunLight
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UDirectionalLightComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UDirectionalLightComponent* ABasicLightRig::GetSunLight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSunLight");

	ABasicLightRig_GetSunLight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSunDirLight
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UDirectionalLightComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UDirectionalLightComponent* ABasicLightRig::GetSunDirLight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSunDirLight");

	ABasicLightRig_GetSunDirLight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSkylight_PreviewBlendHeight
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UStaticMeshComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UStaticMeshComponent* ABasicLightRig::GetSkylight_PreviewBlendHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSkylight_PreviewBlendHeight");

	ABasicLightRig_GetSkylight_PreviewBlendHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSkyLight_Intensity
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ABasicLightRig::GetSkyLight_Intensity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSkyLight_Intensity");

	ABasicLightRig_GetSkyLight_Intensity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSkyLight_CubemapBlending
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USkyLightComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkyLightComponent* ABasicLightRig::GetSkyLight_CubemapBlending()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSkyLight_CubemapBlending");

	ABasicLightRig_GetSkyLight_CubemapBlending_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSkyLight
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USkyLightComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USkyLightComponent* ABasicLightRig::GetSkyLight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSkyLight");

	ABasicLightRig_GetSkyLight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetShow_EnvDome
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABasicLightRig::GetShow_EnvDome()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetShow_EnvDome");

	ABasicLightRig_GetShow_EnvDome_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSceneCaptureCube_InClouds
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USceneCaptureComponentCube* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneCaptureComponentCube* ABasicLightRig::GetSceneCaptureCube_InClouds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSceneCaptureCube_InClouds");

	ABasicLightRig_GetSceneCaptureCube_InClouds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSceneCaptureCube_BelowClouds
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USceneCaptureComponentCube* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneCaptureComponentCube* ABasicLightRig::GetSceneCaptureCube_BelowClouds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSceneCaptureCube_BelowClouds");

	ABasicLightRig_GetSceneCaptureCube_BelowClouds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSceneCaptureCube_AboveClouds
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USceneCaptureComponentCube* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneCaptureComponentCube* ABasicLightRig::GetSceneCaptureCube_AboveClouds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSceneCaptureCube_AboveClouds");

	ABasicLightRig_GetSceneCaptureCube_AboveClouds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetSceneCaptureComponentCube
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USceneCaptureComponentCube* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class USceneCaptureComponentCube* ABasicLightRig::GetSceneCaptureComponentCube()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetSceneCaptureComponentCube");

	ABasicLightRig_GetSceneCaptureComponentCube_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetPostProcessComp00
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UPostProcessComponent*   ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UPostProcessComponent* ABasicLightRig::GetPostProcessComp00()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetPostProcessComp00");

	ABasicLightRig_GetPostProcessComp00_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetPostProcess00
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FPostProcessSettings    ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPostProcessSettings ABasicLightRig::GetPostProcess00()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetPostProcess00");

	ABasicLightRig_GetPostProcess00_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetMinBlendHeight
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ABasicLightRig::GetMinBlendHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetMinBlendHeight");

	ABasicLightRig_GetMinBlendHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetMaxBlendHeight
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ABasicLightRig::GetMaxBlendHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetMaxBlendHeight");

	ABasicLightRig_GetMaxBlendHeight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetLightTemperature
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ABasicLightRig::GetLightTemperature()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetLightTemperature");

	ABasicLightRig_GetLightTemperature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetLightScale
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ABasicLightRig::GetLightScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetLightScale");

	ABasicLightRig_GetLightScale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetLightIntensity
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ABasicLightRig::GetLightIntensity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetLightIntensity");

	ABasicLightRig_GetLightIntensity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetLightDirection
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator ABasicLightRig::GetLightDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetLightDirection");

	ABasicLightRig_GetLightDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetLevelVFX_Intensity
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ABasicLightRig::GetLevelVFX_Intensity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetLevelVFX_Intensity");

	ABasicLightRig_GetLevelVFX_Intensity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetLevelCloudSand_Color
// (Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FLinearColor ABasicLightRig::GetLevelCloudSand_Color()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetLevelCloudSand_Color");

	ABasicLightRig_GetLevelCloudSand_Color_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetHDRI_CubeMap
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UTexture*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTexture* ABasicLightRig::GetHDRI_CubeMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetHDRI_CubeMap");

	ABasicLightRig_GetHDRI_CubeMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetHDRI_Brightness
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ABasicLightRig::GetHDRI_Brightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetHDRI_Brightness");

	ABasicLightRig_GetHDRI_Brightness_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetGet_TrueSky_Sun_Rotation
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABasicLightRig::GetGet_TrueSky_Sun_Rotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetGet_TrueSky_Sun_Rotation");

	ABasicLightRig_GetGet_TrueSky_Sun_Rotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetFollow_TrusSky
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABasicLightRig::GetFollow_TrusSky()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetFollow_TrusSky");

	ABasicLightRig_GetFollow_TrusSky_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetEnvSphere
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UStaticMeshComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UStaticMeshComponent* ABasicLightRig::GetEnvSphere()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetEnvSphere");

	ABasicLightRig_GetEnvSphere_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetCockpit_SunLight_Increase
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UTimelineComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UTimelineComponent* ABasicLightRig::GetCockpit_SunLight_Increase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetCockpit_SunLight_Increase");

	ABasicLightRig_GetCockpit_SunLight_Increase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetCockpit_SunLight_Decrease
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UTimelineComponent*      ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UTimelineComponent* ABasicLightRig::GetCockpit_SunLight_Decrease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetCockpit_SunLight_Decrease");

	ABasicLightRig_GetCockpit_SunLight_Decrease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BasicLightRig.GetApply_Reflection
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ABasicLightRig::GetApply_Reflection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BasicLightRig.GetApply_Reflection");

	ABasicLightRig_GetApply_Reflection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Missile.OnTargetWithinProximity
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMissile::OnTargetWithinProximity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Missile.OnTargetWithinProximity");

	AMissile_OnTargetWithinProximity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Missile.OnMissForceKill
// (Final, Native, Public)

void AMissile::OnMissForceKill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Missile.OnMissForceKill");

	AMissile_OnMissForceKill_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Missile.GetTrueSkyQueryID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AMissile::GetTrueSkyQueryID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Missile.GetTrueSkyQueryID");

	AMissile_GetTrueSkyQueryID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Bomb_TGTP.ReacquireLocationRotation
// (Final, Native, Public, BlueprintCallable)

void ABomb_TGTP::ReacquireLocationRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Bomb_TGTP.ReacquireLocationRotation");

	ABomb_TGTP_ReacquireLocationRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Bomb_TGTP.GetTGTP_DropLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector ABomb_TGTP::GetTGTP_DropLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Bomb_TGTP.GetTGTP_DropLocation");

	ABomb_TGTP_GetTGTP_DropLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Bomb_TGTP.GetAttackResult
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETGTP_AttackResult             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ETGTP_AttackResult ABomb_TGTP::GetAttackResult()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Bomb_TGTP.GetAttackResult");

	ABomb_TGTP_GetAttackResult_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.UIBaseWidget.GetUIManagerActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIManagerActor*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AUIManagerActor* UUIBaseWidget::GetUIManagerActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIBaseWidget.GetUIManagerActor");

	UUIBaseWidget_GetUIManagerActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MenuBaseWidget.SimpleDialogInputResult
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMenuBaseWidget::SimpleDialogInputResult(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuBaseWidget.SimpleDialogInputResult");

	UMenuBaseWidget_SimpleDialogInputResult_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MenuBaseWidget.SetIsEnableControl
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UMenuBaseWidget::SetIsEnableControl(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuBaseWidget.SetIsEnableControl");

	UMenuBaseWidget_SetIsEnableControl_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MenuBaseWidget.OnUnfocusedBP
// (Event, Protected, BlueprintEvent)

void UMenuBaseWidget::OnUnfocusedBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuBaseWidget.OnUnfocusedBP");

	UMenuBaseWidget_OnUnfocusedBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MenuBaseWidget.OnFocusedBP
// (Event, Protected, BlueprintEvent)

void UMenuBaseWidget::OnFocusedBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuBaseWidget.OnFocusedBP");

	UMenuBaseWidget_OnFocusedBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MenuBaseWidget.IsEnableControl
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UMenuBaseWidget::IsEnableControl()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuBaseWidget.IsEnableControl");

	UMenuBaseWidget_IsEnableControl_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.BuildingDamagedState.OnVisibilityChanged
// (Final, Native, Public)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void UBuildingDamagedState::OnVisibilityChanged(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BuildingDamagedState.OnVisibilityChanged");

	UBuildingDamagedState_OnVisibilityChanged_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BuildingDamagedState.OnRestored
// (Final, Native, Public)

void UBuildingDamagedState::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BuildingDamagedState.OnRestored");

	UBuildingDamagedState_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.BuildingDamagedState.OnComponentHitSurface
// (Final, Native, Private, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UBuildingDamagedState::OnComponentHitSurface(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.BuildingDamagedState.OnComponentHitSurface");

	UBuildingDamagedState_OnComponentHitSurface_Params params;
	params.HitComponent = HitComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CameraViewComponent.SwitchToThirdPersonView
// (Final, Native, Public, BlueprintCallable)

void UCameraViewComponent::SwitchToThirdPersonView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CameraViewComponent.SwitchToThirdPersonView");

	UCameraViewComponent_SwitchToThirdPersonView_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CameraViewComponent.SwitchToMiniGameView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMiniGameCameraType            MiniGameCameraType             (Parm, ZeroConstructor, IsPlainOldData)

void UCameraViewComponent::SwitchToMiniGameView(EMiniGameCameraType MiniGameCameraType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CameraViewComponent.SwitchToMiniGameView");

	UCameraViewComponent_SwitchToMiniGameView_Params params;
	params.MiniGameCameraType = MiniGameCameraType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CameraViewComponent.SwitchToFirstPersonView
// (Final, Native, Public, BlueprintCallable)

void UCameraViewComponent::SwitchToFirstPersonView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CameraViewComponent.SwitchToFirstPersonView");

	UCameraViewComponent_SwitchToFirstPersonView_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CameraViewComponent.SwitchToCockpitView
// (Final, Native, Public, BlueprintCallable)

void UCameraViewComponent::SwitchToCockpitView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CameraViewComponent.SwitchToCockpitView");

	UCameraViewComponent_SwitchToCockpitView_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CameraViewComponent.OnIGCStart
// (Final, Native, Public, BlueprintCallable)

void UCameraViewComponent::OnIGCStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CameraViewComponent.OnIGCStart");

	UCameraViewComponent_OnIGCStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CameraViewComponent.OnIGCEnd
// (Final, Native, Public, BlueprintCallable)

void UCameraViewComponent::OnIGCEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CameraViewComponent.OnIGCEnd");

	UCameraViewComponent_OnIGCEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CameraViewComponent.InitializeCameras
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraComponent*        FirstPersonCam                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCameraComponent*        CockpitCam                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCameraComponent*        ThirdPersonCam                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCameraComponent*        MiniGameCam                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCameraInputComponent*   FirstPersonCamInput            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCameraInputComponent*   CockpitCamInput                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCameraInputComponent*   ThirdPersonCamInput            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UCameraViewComponent::InitializeCameras(class UCameraComponent* FirstPersonCam, class UCameraComponent* CockpitCam, class UCameraComponent* ThirdPersonCam, class UCameraComponent* MiniGameCam, class UCameraInputComponent* FirstPersonCamInput, class UCameraInputComponent* CockpitCamInput, class UCameraInputComponent* ThirdPersonCamInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CameraViewComponent.InitializeCameras");

	UCameraViewComponent_InitializeCameras_Params params;
	params.FirstPersonCam = FirstPersonCam;
	params.CockpitCam = CockpitCam;
	params.ThirdPersonCam = ThirdPersonCam;
	params.MiniGameCam = MiniGameCam;
	params.FirstPersonCamInput = FirstPersonCamInput;
	params.CockpitCamInput = CockpitCamInput;
	params.ThirdPersonCamInput = ThirdPersonCamInput;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CameraViewComponent.GetCurrentCameraViewType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECameraType                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ECameraType UCameraViewComponent::GetCurrentCameraViewType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CameraViewComponent.GetCurrentCameraViewType");

	UCameraViewComponent_GetCurrentCameraViewType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.CampaignBriefingWidget.OnMapMeshLoaded
// (Final, Native, Private, BlueprintCallable)

void UCampaignBriefingWidget::OnMapMeshLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CampaignBriefingWidget.OnMapMeshLoaded");

	UCampaignBriefingWidget_OnMapMeshLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CampaignBriefingWidget.OnCloudMaterialLoaded
// (Final, Native, Private, BlueprintCallable)

void UCampaignBriefingWidget::OnCloudMaterialLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CampaignBriefingWidget.OnCloudMaterialLoaded");

	UCampaignBriefingWidget_OnCloudMaterialLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CampaignBriefingWidget.OnBriefingLevelLoaded
// (Final, Native, Private, BlueprintCallable)

void UCampaignBriefingWidget::OnBriefingLevelLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CampaignBriefingWidget.OnBriefingLevelLoaded");

	UCampaignBriefingWidget_OnBriefingLevelLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CampaignDebriefingWidget.OnMapTextureLoaded
// (Final, Native, Private, BlueprintCallable)

void UCampaignDebriefingWidget::OnMapTextureLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CampaignDebriefingWidget.OnMapTextureLoaded");

	UCampaignDebriefingWidget_OnMapTextureLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CampaignDebriefingWidget.OnLevelLoaded
// (Final, Native, Private, BlueprintCallable)

void UCampaignDebriefingWidget::OnLevelLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CampaignDebriefingWidget.OnLevelLoaded");

	UCampaignDebriefingWidget_OnLevelLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnVRFadeOut
// (Native, Public)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusUserWidget::OnVRFadeOut(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnVRFadeOut");

	UNimbusUserWidget_OnVRFadeOut_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnSpecialWeaponChanged
// (Native, Public)

void UNimbusUserWidget::OnSpecialWeaponChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnSpecialWeaponChanged");

	UNimbusUserWidget_OnSpecialWeaponChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnResetWeaponName
// (Event, Public, BlueprintEvent)

void UNimbusUserWidget::OnResetWeaponName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnResetWeaponName");

	UNimbusUserWidget_OnResetWeaponName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnHUDShowGroup
// (Native, Public)
// Parameters:
// int                            Group                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusUserWidget::OnHUDShowGroup(int Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnHUDShowGroup");

	UNimbusUserWidget_OnHUDShowGroup_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnHUDEnabled
// (Native, Public)

void UNimbusUserWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnHUDEnabled");

	UNimbusUserWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnHUDDisabled
// (Native, Public)

void UNimbusUserWidget::OnHUDDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnHUDDisabled");

	UNimbusUserWidget_OnHUDDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnHUDAlertEnd
// (Native, Public)

void UNimbusUserWidget::OnHUDAlertEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnHUDAlertEnd");

	UNimbusUserWidget_OnHUDAlertEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnHUDAlertBegin
// (Native, Public)

void UNimbusUserWidget::OnHUDAlertBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnHUDAlertBegin");

	UNimbusUserWidget_OnHUDAlertBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnCurrentHUDAlertColorUpdated
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusUserWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnCurrentHUDAlertColorUpdated");

	UNimbusUserWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUserWidget.OnCameraViewChanged
// (Native, Public)
// Parameters:
// ECameraType                    CameraType                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusUserWidget::OnCameraViewChanged(ECameraType CameraType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUserWidget.OnCameraViewChanged");

	UNimbusUserWidget_OnCameraViewChanged_Params params;
	params.CameraType = CameraType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.CompassWidget.CurrentHUDAlertColorUpdated
// (Native, Event, Protected, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UCompassWidget::CurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.CompassWidget.CurrentHUDAlertColorUpdated");

	UCompassWidget_CurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DamagedStateComponent.OnVisibilityChanged
// (Final, Native, Public)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void UDamagedStateComponent::OnVisibilityChanged(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DamagedStateComponent.OnVisibilityChanged");

	UDamagedStateComponent_OnVisibilityChanged_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DamagedStateComponent.OnRestored
// (Final, Native, Public)

void UDamagedStateComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DamagedStateComponent.OnRestored");

	UDamagedStateComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DamagedStateComponent.OnOwnerChildObjectRecoveryTriggered
// (Final, Native, Private)
// Parameters:
// class AGameObject*             ChildGameObject                (Parm, ZeroConstructor, IsPlainOldData)

void UDamagedStateComponent::OnOwnerChildObjectRecoveryTriggered(class AGameObject* ChildGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DamagedStateComponent.OnOwnerChildObjectRecoveryTriggered");

	UDamagedStateComponent_OnOwnerChildObjectRecoveryTriggered_Params params;
	params.ChildGameObject = ChildGameObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DamagedStateComponent.OnComponentHitSurface
// (Final, Native, Private, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UDamagedStateComponent::OnComponentHitSurface(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DamagedStateComponent.OnComponentHitSurface");

	UDamagedStateComponent_OnComponentHitSurface_Params params;
	params.HitComponent = HitComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DamagedStateComponent.OnCameraViewChanged
// (Final, Native, Public)
// Parameters:
// ECameraType                    CameraViewType                 (Parm, ZeroConstructor, IsPlainOldData)

void UDamagedStateComponent::OnCameraViewChanged(ECameraType CameraViewType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DamagedStateComponent.OnCameraViewChanged");

	UDamagedStateComponent_OnCameraViewChanged_Params params;
	params.CameraViewType = CameraViewType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DamagedStateComponent.ForceCauseFinalExplosion
// (Final, Native, Public, BlueprintCallable)

void UDamagedStateComponent::ForceCauseFinalExplosion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DamagedStateComponent.ForceCauseFinalExplosion");

	UDamagedStateComponent_ForceCauseFinalExplosion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DamagedStateComponent.DamageStateLifeSpanExpired
// (Final, Native, Private)
// Parameters:
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)

void UDamagedStateComponent::DamageStateLifeSpanExpired(int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DamagedStateComponent.DamageStateLifeSpanExpired");

	UDamagedStateComponent_DamageStateLifeSpanExpired_Params params;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiPlayerGameMode.ToggleManuallyRequestGameResults
// (Final, Native, Public, BlueprintCallable)

void AMultiPlayerGameMode::ToggleManuallyRequestGameResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiPlayerGameMode.ToggleManuallyRequestGameResults");

	AMultiPlayerGameMode_ToggleManuallyRequestGameResults_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiPlayerGameMode.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void AMultiPlayerGameMode::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiPlayerGameMode.OnDialogItemAccepted");

	AMultiPlayerGameMode_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TeamDeathMatchGameMode.PlayIGC
// (Event, Public, BlueprintEvent)
// Parameters:
// EMultiplayerIGCType            IGCType                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            IGCIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void ATeamDeathMatchGameMode::PlayIGC(EMultiplayerIGCType IGCType, int IGCIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TeamDeathMatchGameMode.PlayIGC");

	ATeamDeathMatchGameMode_PlayIGC_Params params;
	params.IGCType = IGCType;
	params.IGCIndex = IGCIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TeamDeathMatchGameMode.OnIGCCompleted
// (Native, Public, BlueprintCallable)
// Parameters:
// EMultiplayerIGCType            IGCType                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            IGCIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void ATeamDeathMatchGameMode::OnIGCCompleted(EMultiplayerIGCType IGCType, int IGCIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TeamDeathMatchGameMode.OnIGCCompleted");

	ATeamDeathMatchGameMode_OnIGCCompleted_Params params;
	params.IGCType = IGCType;
	params.IGCIndex = IGCIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TeamDeathMatchGameMode.GetBaseMatchResultReward
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int ATeamDeathMatchGameMode::GetBaseMatchResultReward()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TeamDeathMatchGameMode.GetBaseMatchResultReward");

	ATeamDeathMatchGameMode_GetBaseMatchResultReward_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MultiPlayerInGameWidget.OnHUDEnabled
// (Native, Public)

void UMultiPlayerInGameWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiPlayerInGameWidget.OnHUDEnabled");

	UMultiPlayerInGameWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiPlayerInGameWidget.OnCurrentHUDAlertColorUpdated
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UMultiPlayerInGameWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiPlayerInGameWidget.OnCurrentHUDAlertColorUpdated");

	UMultiPlayerInGameWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugController.StopDebugMode
// (Final, Native, Static, Public, BlueprintCallable)

void ANimbusDebugController::STATIC_StopDebugMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.StopDebugMode");

	ANimbusDebugController_StopDebugMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugController.StartDebugMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       PlayerController               (Parm, ZeroConstructor, IsPlainOldData)
// class ANimbusDebugController*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ANimbusDebugController* ANimbusDebugController::STATIC_StartDebugMode(class APlayerController* PlayerController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.StartDebugMode");

	ANimbusDebugController_StartDebugMode_Params params;
	params.PlayerController = PlayerController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusDebugController.SetYawAcceleration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusDebugController::SetYawAcceleration(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.SetYawAcceleration");

	ANimbusDebugController_SetYawAcceleration_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugController.SetState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDebugModeState                Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusDebugController::SetState(EDebugModeState Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.SetState");

	ANimbusDebugController_SetState_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugController.SetSpeedScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusDebugController::SetSpeedScale(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.SetSpeedScale");

	ANimbusDebugController_SetSpeedScale_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugController.SetLookSensitivity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusDebugController::SetLookSensitivity(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.SetLookSensitivity");

	ANimbusDebugController_SetLookSensitivity_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugController.SetIsUsingFPSControls
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusDebugController::SetIsUsingFPSControls(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.SetIsUsingFPSControls");

	ANimbusDebugController_SetIsUsingFPSControls_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugController.SetIsSpeedBoostEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusDebugController::SetIsSpeedBoostEnabled(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.SetIsSpeedBoostEnabled");

	ANimbusDebugController_SetIsSpeedBoostEnabled_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusDebugController.OnStateChange__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EDebugModeState                NewState                       (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusDebugController::OnStateChange__DelegateSignature(EDebugModeState NewState)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusDebugController.OnStateChange__DelegateSignature");

	ANimbusDebugController_OnStateChange__DelegateSignature_Params params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusDebugController.OnShowDebugMenu__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ANimbusDebugController::OnShowDebugMenu__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusDebugController.OnShowDebugMenu__DelegateSignature");

	ANimbusDebugController_OnShowDebugMenu__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusDebugController.OnPause__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ANimbusDebugController::OnPause__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusDebugController.OnPause__DelegateSignature");

	ANimbusDebugController_OnPause__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusDebugController.OnHideDebugMenu__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ANimbusDebugController::OnHideDebugMenu__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusDebugController.OnHideDebugMenu__DelegateSignature");

	ANimbusDebugController_OnHideDebugMenu__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusDebugController.OnExit__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ANimbusDebugController::OnExit__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusDebugController.OnExit__DelegateSignature");

	ANimbusDebugController_OnExit__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusDebugController.OnAttachToTarget__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ANimbusDebugController::OnAttachToTarget__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusDebugController.OnAttachToTarget__DelegateSignature");

	ANimbusDebugController_OnAttachToTarget__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugController.GetYawAcceleration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ANimbusDebugController::GetYawAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.GetYawAcceleration");

	ANimbusDebugController_GetYawAcceleration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusDebugController.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDebugModeState                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EDebugModeState ANimbusDebugController::GetState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.GetState");

	ANimbusDebugController_GetState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusDebugController.GetSpeedScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ANimbusDebugController::GetSpeedScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.GetSpeedScale");

	ANimbusDebugController_GetSpeedScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusDebugController.GetLookSensitivity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ANimbusDebugController::GetLookSensitivity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.GetLookSensitivity");

	ANimbusDebugController_GetLookSensitivity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusDebugController.GetIsUsingFPSControls
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANimbusDebugController::GetIsUsingFPSControls()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.GetIsUsingFPSControls");

	ANimbusDebugController_GetIsUsingFPSControls_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusDebugController.GetIsSpeedBoostEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANimbusDebugController::GetIsSpeedBoostEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.GetIsSpeedBoostEnabled");

	ANimbusDebugController_GetIsSpeedBoostEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusDebugController.GetDebugController
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ANimbusDebugController*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ANimbusDebugController* ANimbusDebugController::STATIC_GetDebugController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugController.GetDebugController");

	ANimbusDebugController_GetDebugController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DebugMenuPreviewRadioDataTableList.SetRadioDataTable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class UDataTable*>      InRadioDataTable               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UDebugMenuPreviewRadioDataTableList::STATIC_SetRadioDataTable(TArray<class UDataTable*> InRadioDataTable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DebugMenuPreviewRadioDataTableList.SetRadioDataTable");

	UDebugMenuPreviewRadioDataTableList_SetRadioDataTable_Params params;
	params.InRadioDataTable = InRadioDataTable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DestroyableTGT.ActivateTGT
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bActive                        (Parm, ZeroConstructor, IsPlainOldData)

void ADestroyableTGT::ActivateTGT(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DestroyableTGT.ActivateTGT");

	ADestroyableTGT_ActivateTGT_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DialogManager.OpenDialogID
// (Final, Native, Public)
// Parameters:
// EDialogIDs                     DialogID                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 DialogArguments                (Parm, ZeroConstructor)
// struct FDialogHandle           ReturnValue                    (Parm, OutParm, ReturnParm)

struct FDialogHandle UDialogManager::OpenDialogID(EDialogIDs DialogID, const struct FString& DialogArguments)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.OpenDialogID");

	UDialogManager_OpenDialogID_Params params;
	params.DialogID = DialogID;
	params.DialogArguments = DialogArguments;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.OpenDialog
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FDialogInfo             DialogInfo                     (ConstParm, Parm, OutParm, ReferenceParm)
// struct FDialogHandle           ReturnValue                    (Parm, OutParm, ReturnParm)

struct FDialogHandle UDialogManager::OpenDialog(const struct FDialogInfo& DialogInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.OpenDialog");

	UDialogManager_OpenDialog_Params params;
	params.DialogInfo = DialogInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.OnItemAccepted
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FDialogInfo             DialogInfo                     (ConstParm, Parm, OutParm, ReferenceParm)

void UDialogManager::OnItemAccepted(const struct FDialogInfo& DialogInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.OnItemAccepted");

	UDialogManager_OnItemAccepted_Params params;
	params.DialogInfo = DialogInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DialogManager.OnDialogOpened
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FDialogInfo             DialogInfo                     (ConstParm, Parm, OutParm, ReferenceParm)

void UDialogManager::OnDialogOpened(const struct FDialogInfo& DialogInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.OnDialogOpened");

	UDialogManager_OnDialogOpened_Params params;
	params.DialogInfo = DialogInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DialogManager.OnDialogClosed
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FDialogInfo             DialogInfo                     (ConstParm, Parm, OutParm, ReferenceParm)

void UDialogManager::OnDialogClosed(const struct FDialogInfo& DialogInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.OnDialogClosed");

	UDialogManager_OnDialogClosed_Params params;
	params.DialogInfo = DialogInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.DialogManager.IsDialogStackEmpty
// (Final, Native, Public, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDialogManager::IsDialogStackEmpty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.IsDialogStackEmpty");

	UDialogManager_IsDialogStackEmpty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.IsDialogOpen
// (Final, Native, Public, Const)
// Parameters:
// bool                           bIncludeIcons                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDialogManager::IsDialogOpen(bool bIncludeIcons)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.IsDialogOpen");

	UDialogManager_IsDialogOpen_Params params;
	params.bIncludeIcons = bIncludeIcons;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.IsDialogInStack
// (Final, Native, Public, HasOutParms, Const)
// Parameters:
// struct FDialogHandle           DialogHandle                   (ConstParm, Parm, OutParm, ReferenceParm)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDialogManager::IsDialogInStack(const struct FDialogHandle& DialogHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.IsDialogInStack");

	UDialogManager_IsDialogInStack_Params params;
	params.DialogHandle = DialogHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.IsDialogIDInStack
// (Final, Native, Public, HasOutParms, Const)
// Parameters:
// EDialogIDs                     DialogID                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDialogManager::IsDialogIDInStack(EDialogIDs DialogID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.IsDialogIDInStack");

	UDialogManager_IsDialogIDInStack_Params params;
	params.DialogID = DialogID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.GetDialogResultByHandle
// (Final, Native, Public, HasOutParms, Const)
// Parameters:
// struct FDialogHandle           DialogHandle                   (ConstParm, Parm, OutParm, ReferenceParm)
// EDialogResults                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EDialogResults UDialogManager::GetDialogResultByHandle(const struct FDialogHandle& DialogHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.GetDialogResultByHandle");

	UDialogManager_GetDialogResultByHandle_Params params;
	params.DialogHandle = DialogHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.GetDialogResult
// (Final, Native, Public, Const)
// Parameters:
// EDialogResults                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EDialogResults UDialogManager::GetDialogResult()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.GetDialogResult");

	UDialogManager_GetDialogResult_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.GetCurrentOpenDialogWidget
// (Final, Native, Public)
// Parameters:
// class UDialogWidget*           ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UDialogWidget* UDialogManager::GetCurrentOpenDialogWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.GetCurrentOpenDialogWidget");

	UDialogManager_GetCurrentOpenDialogWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.GetCurrentDialogID
// (Final, Native, Public, Const)
// Parameters:
// EDialogIDs                     ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EDialogIDs UDialogManager::GetCurrentDialogID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.GetCurrentDialogID");

	UDialogManager_GetCurrentDialogID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.GetCurrentDialogHandle
// (Final, Native, Public, Const)
// Parameters:
// struct FDialogHandle           ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm)

struct FDialogHandle UDialogManager::GetCurrentDialogHandle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.GetCurrentDialogHandle");

	UDialogManager_GetCurrentDialogHandle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.DoesDialogWidgetExist
// (Final, Native, Public, Const)
// Parameters:
// EDialogType                    DialogType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDialogManager::DoesDialogWidgetExist(EDialogType DialogType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.DoesDialogWidgetExist");

	UDialogManager_DoesDialogWidgetExist_Params params;
	params.DialogType = DialogType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.CloseDialogByID
// (Final, Native, Public, HasOutParms)
// Parameters:
// EDialogIDs                     DialogID                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDialogManager::CloseDialogByID(EDialogIDs DialogID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.CloseDialogByID");

	UDialogManager_CloseDialogByID_Params params;
	params.DialogID = DialogID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.DialogManager.CloseAllDialogs
// (Final, Native, Public)
// Parameters:
// uint32_t                       LimitPriorityHigh              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UDialogManager::CloseAllDialogs(uint32_t LimitPriorityHigh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.DialogManager.CloseAllDialogs");

	UDialogManager_CloseAllDialogs_Params params;
	params.LimitPriorityHigh = LimitPriorityHigh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.EnemyMissileIndicatorComponent.OnOwnerSuspendedBySleep
// (Final, Native, Protected)

void UEnemyMissileIndicatorComponent::OnOwnerSuspendedBySleep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.EnemyMissileIndicatorComponent.OnOwnerSuspendedBySleep");

	UEnemyMissileIndicatorComponent_OnOwnerSuspendedBySleep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.EnemyMissileIndicatorComponent.OnOwnerResumedBySleep
// (Final, Native, Protected)

void UEnemyMissileIndicatorComponent::OnOwnerResumedBySleep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.EnemyMissileIndicatorComponent.OnOwnerResumedBySleep");

	UEnemyMissileIndicatorComponent_OnOwnerResumedBySleep_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.EnemyMissileIndicatorComponent.OnHUDEnabled
// (Final, Native, Public)

void UEnemyMissileIndicatorComponent::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.EnemyMissileIndicatorComponent.OnHUDEnabled");

	UEnemyMissileIndicatorComponent_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.EnemyMissileIndicatorComponent.OnHUDDisabled
// (Final, Native, Public)

void UEnemyMissileIndicatorComponent::OnHUDDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.EnemyMissileIndicatorComponent.OnHUDDisabled");

	UEnemyMissileIndicatorComponent_OnHUDDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.EULAHelper.OnDialogItemAccepted
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UEULAHelper::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.EULAHelper.OnDialogItemAccepted");

	UEULAHelper_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Flare.OnImpact
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FHitResult              HitResult                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AFlare::OnImpact(const struct FHitResult& HitResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Flare.OnImpact");

	AFlare_OnImpact_Params params;
	params.HitResult = HitResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.FlyBySoundComponent.OnRestored
// (Final, Native, Public)

void UFlyBySoundComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.FlyBySoundComponent.OnRestored");

	UFlyBySoundComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GenericMenu.SetActiveLayerId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            LayerId                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ForceSet                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AGenericMenu::SetActiveLayerId(int LayerId, bool ForceSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GenericMenu.SetActiveLayerId");

	AGenericMenu_SetActiveLayerId_Params params;
	params.LayerId = LayerId;
	params.ForceSet = ForceSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.GenericMenu.PrevLayer
// (Final, Native, Public, BlueprintCallable)

void AGenericMenu::PrevLayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GenericMenu.PrevLayer");

	AGenericMenu_PrevLayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GenericMenu.NextLayer
// (Final, Native, Public, BlueprintCallable)

void AGenericMenu::NextLayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GenericMenu.NextLayer");

	AGenericMenu_NextLayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GroundVehicleTrailVFXComponent.OnRestored
// (Final, Native, Public)

void UGroundVehicleTrailVFXComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GroundVehicleTrailVFXComponent.OnRestored");

	UGroundVehicleTrailVFXComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GroundVehicleTrailVFXComponent.OnOwnerVisibilityChanged
// (Final, Native, Public)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void UGroundVehicleTrailVFXComponent::OnOwnerVisibilityChanged(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GroundVehicleTrailVFXComponent.OnOwnerVisibilityChanged");

	UGroundVehicleTrailVFXComponent_OnOwnerVisibilityChanged_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GuideMessageWidget.OnHUDEnabled
// (Native, Public)

void UGuideMessageWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GuideMessageWidget.OnHUDEnabled");

	UGuideMessageWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GuideMessageWidget.OnHUDDisabled
// (Native, Public)

void UGuideMessageWidget::OnHUDDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GuideMessageWidget.OnHUDDisabled");

	UGuideMessageWidget_OnHUDDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GuideMessageWidget.OnCameraViewChanged
// (Native, Public)
// Parameters:
// ECameraType                    CameraType                     (Parm, ZeroConstructor, IsPlainOldData)

void UGuideMessageWidget::OnCameraViewChanged(ECameraType CameraType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GuideMessageWidget.OnCameraViewChanged");

	UGuideMessageWidget_OnCameraViewChanged_Params params;
	params.CameraType = CameraType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GuideMessageWidget.HideGuideMessage
// (Final, Native, Public)

void UGuideMessageWidget::HideGuideMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GuideMessageWidget.HideGuideMessage");

	UGuideMessageWidget_HideGuideMessage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GuideMessageWidget.DisplayGuideMessage
// (Final, Native, Public)
// Parameters:
// EGuideMessageType              GuideMessageType               (Parm, ZeroConstructor, IsPlainOldData)

void UGuideMessageWidget::DisplayGuideMessage(EGuideMessageType GuideMessageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GuideMessageWidget.DisplayGuideMessage");

	UGuideMessageWidget_DisplayGuideMessage_Params params;
	params.GuideMessageType = GuideMessageType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsVSyncOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           InVSyncOn                      (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsVSyncOn(bool InVSyncOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsVSyncOn");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsVSyncOn_Params params;
	params.InVSyncOn = InVSyncOn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsTextureQuality
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsTextureQuality InTextureQuality               (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsTextureQuality(EGraphicsSettingsWindowsTextureQuality InTextureQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsTextureQuality");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsTextureQuality_Params params;
	params.InTextureQuality = InTextureQuality;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsSSROn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           InSSROn                        (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsSSROn(bool InSSROn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsSSROn");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsSSROn_Params params;
	params.InSSROn = InSSROn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsShadowQuality
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsShadowQuality InShadowQuality                (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsShadowQuality(EGraphicsSettingsWindowsShadowQuality InShadowQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsShadowQuality");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsShadowQuality_Params params;
	params.InShadowQuality = InShadowQuality;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsPreset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsPreset InPreset                       (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsPreset(EGraphicsSettingsWindowsPreset InPreset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsPreset");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsPreset_Params params;
	params.InPreset = InPreset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsPostProcessQuality
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsPostProcessQuality InPostProcessQuality           (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsPostProcessQuality(EGraphicsSettingsWindowsPostProcessQuality InPostProcessQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsPostProcessQuality");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsPostProcessQuality_Params params;
	params.InPostProcessQuality = InPostProcessQuality;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsMotionBlurOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           InMotionBlurOn                 (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsMotionBlurOn(bool InMotionBlurOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsMotionBlurOn");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsMotionBlurOn_Params params;
	params.InMotionBlurOn = InMotionBlurOn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsFrameLimit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsFrameLimit InFrameLimit                   (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsFrameLimit(EGraphicsSettingsWindowsFrameLimit InFrameLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsFrameLimit");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsFrameLimit_Params params;
	params.InFrameLimit = InFrameLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsEffectQuality
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsEffectQuality InEffectQuality                (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsEffectQuality(EGraphicsSettingsWindowsEffectQuality InEffectQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsEffectQuality");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsEffectQuality_Params params;
	params.InEffectQuality = InEffectQuality;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsEffectAmount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsEffectAmount InEffectAmount                 (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsEffectAmount(EGraphicsSettingsWindowsEffectAmount InEffectAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsEffectAmount");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsEffectAmount_Params params;
	params.InEffectAmount = InEffectAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsDrawScale
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsDrawScale InDrawScale                    (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsDrawScale(EGraphicsSettingsWindowsDrawScale InDrawScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsDrawScale");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsDrawScale_Params params;
	params.InDrawScale = InDrawScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsBloomOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           InBloomOn                      (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsBloomOn(bool InBloomOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsBloomOn");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsBloomOn_Params params;
	params.InBloomOn = InBloomOn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsAntiAliasing
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettingsWindowsAntiAliasing InAntiAliasing                 (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SetWindowsAntiAliasing(EGraphicsSettingsWindowsAntiAliasing InAntiAliasing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SetWindowsAntiAliasing");

	UGraphicsSettingsWindowsBlueprintLibrary_SetWindowsAntiAliasing_Params params;
	params.InAntiAliasing = InAntiAliasing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SaveWindowsSetting
// (Final, Native, Static, Public, BlueprintCallable)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_SaveWindowsSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.SaveWindowsSetting");

	UGraphicsSettingsWindowsBlueprintLibrary_SaveWindowsSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.RevertWindowsScreenSetting
// (Final, Native, Static, Public, BlueprintCallable)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_RevertWindowsScreenSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.RevertWindowsScreenSetting");

	UGraphicsSettingsWindowsBlueprintLibrary_RevertWindowsScreenSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.ResetWindowsSetting
// (Final, Native, Static, Public, BlueprintCallable)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_ResetWindowsSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.ResetWindowsSetting");

	UGraphicsSettingsWindowsBlueprintLibrary_ResetWindowsSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.RequestWindowsScreenSetting
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FGraphicsSettingsWindowsScreenSetting InScreenSetting                (ConstParm, Parm, OutParm, ReferenceParm)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_RequestWindowsScreenSetting(const struct FGraphicsSettingsWindowsScreenSetting& InScreenSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.RequestWindowsScreenSetting");

	UGraphicsSettingsWindowsBlueprintLibrary_RequestWindowsScreenSetting_Params params;
	params.InScreenSetting = InScreenSetting;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.ReflectWindowsSetting
// (Final, Native, Static, Public, BlueprintCallable)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_ReflectWindowsSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.ReflectWindowsSetting");

	UGraphicsSettingsWindowsBlueprintLibrary_ReflectWindowsSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.IsWindowsVSyncOn
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           OutVSyncOn                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_IsWindowsVSyncOn(bool* OutVSyncOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.IsWindowsVSyncOn");

	UGraphicsSettingsWindowsBlueprintLibrary_IsWindowsVSyncOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVSyncOn != nullptr)
		*OutVSyncOn = params.OutVSyncOn;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.IsWindowsSSROn
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           OutSSROn                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_IsWindowsSSROn(bool* OutSSROn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.IsWindowsSSROn");

	UGraphicsSettingsWindowsBlueprintLibrary_IsWindowsSSROn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSSROn != nullptr)
		*OutSSROn = params.OutSSROn;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.IsWindowsMotionBlurOn
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           OutMotionBlurOn                (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_IsWindowsMotionBlurOn(bool* OutMotionBlurOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.IsWindowsMotionBlurOn");

	UGraphicsSettingsWindowsBlueprintLibrary_IsWindowsMotionBlurOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMotionBlurOn != nullptr)
		*OutMotionBlurOn = params.OutMotionBlurOn;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.IsWindowsBloomOn
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           OutBloomOn                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_IsWindowsBloomOn(bool* OutBloomOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.IsWindowsBloomOn");

	UGraphicsSettingsWindowsBlueprintLibrary_IsWindowsBloomOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutBloomOn != nullptr)
		*OutBloomOn = params.OutBloomOn;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsWindowResolutionArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FGraphicsSettingsWindowsResolution> OutResolutionArray             (Parm, OutParm, ZeroConstructor)
// bool                           bIsNeedAspect                  (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsWindowResolutionArray(bool bIsNeedAspect, TArray<struct FGraphicsSettingsWindowsResolution>* OutResolutionArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsWindowResolutionArray");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsWindowResolutionArray_Params params;
	params.bIsNeedAspect = bIsNeedAspect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutResolutionArray != nullptr)
		*OutResolutionArray = params.OutResolutionArray;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsTextureQuality
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsTextureQuality OutTextureQuality              (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsTextureQuality(EGraphicsSettingsWindowsTextureQuality* OutTextureQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsTextureQuality");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsTextureQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutTextureQuality != nullptr)
		*OutTextureQuality = params.OutTextureQuality;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsShadowQuality
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsShadowQuality OutShadowQuality               (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsShadowQuality(EGraphicsSettingsWindowsShadowQuality* OutShadowQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsShadowQuality");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsShadowQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutShadowQuality != nullptr)
		*OutShadowQuality = params.OutShadowQuality;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsScreenSettingDefault
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGraphicsSettingsWindowsScreenSetting OutScreenSetting               (Parm, OutParm)
// bool                           bIsNeedAspect                  (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsScreenSettingDefault(bool bIsNeedAspect, struct FGraphicsSettingsWindowsScreenSetting* OutScreenSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsScreenSettingDefault");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsScreenSettingDefault_Params params;
	params.bIsNeedAspect = bIsNeedAspect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutScreenSetting != nullptr)
		*OutScreenSetting = params.OutScreenSetting;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsScreenSetting
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGraphicsSettingsWindowsScreenSetting OutScreenSetting               (Parm, OutParm)
// bool                           bIsNeedAspect                  (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsScreenSetting(bool bIsNeedAspect, struct FGraphicsSettingsWindowsScreenSetting* OutScreenSetting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsScreenSetting");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsScreenSetting_Params params;
	params.bIsNeedAspect = bIsNeedAspect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutScreenSetting != nullptr)
		*OutScreenSetting = params.OutScreenSetting;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsPreset
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsPreset OutPreset                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsPreset(EGraphicsSettingsWindowsPreset* OutPreset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsPreset");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsPreset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPreset != nullptr)
		*OutPreset = params.OutPreset;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsPostProcessQuality
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsPostProcessQuality OutPostProcessQuality          (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsPostProcessQuality(EGraphicsSettingsWindowsPostProcessQuality* OutPostProcessQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsPostProcessQuality");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsPostProcessQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPostProcessQuality != nullptr)
		*OutPostProcessQuality = params.OutPostProcessQuality;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsFullScreenResolutionArray
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FGraphicsSettingsWindowsResolution> OutResolutionArray             (Parm, OutParm, ZeroConstructor)
// bool                           bIsNeedAspect                  (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsFullScreenResolutionArray(bool bIsNeedAspect, TArray<struct FGraphicsSettingsWindowsResolution>* OutResolutionArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsFullScreenResolutionArray");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsFullScreenResolutionArray_Params params;
	params.bIsNeedAspect = bIsNeedAspect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutResolutionArray != nullptr)
		*OutResolutionArray = params.OutResolutionArray;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsFrameLimit
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsFrameLimit OutFrameLimit                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsFrameLimit(EGraphicsSettingsWindowsFrameLimit* OutFrameLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsFrameLimit");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsFrameLimit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFrameLimit != nullptr)
		*OutFrameLimit = params.OutFrameLimit;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsEffectQuality
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsEffectQuality OutEffectQuality               (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsEffectQuality(EGraphicsSettingsWindowsEffectQuality* OutEffectQuality)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsEffectQuality");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsEffectQuality_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutEffectQuality != nullptr)
		*OutEffectQuality = params.OutEffectQuality;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsEffectAmount
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsEffectAmount OutEffectAmount                (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsEffectAmount(EGraphicsSettingsWindowsEffectAmount* OutEffectAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsEffectAmount");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsEffectAmount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutEffectAmount != nullptr)
		*OutEffectAmount = params.OutEffectAmount;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsDrawScale
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsDrawScale OutDrawScale                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsDrawScale(EGraphicsSettingsWindowsDrawScale* OutDrawScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsDrawScale");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsDrawScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDrawScale != nullptr)
		*OutDrawScale = params.OutDrawScale;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsBorderlessResolution
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGraphicsSettingsWindowsResolution OutResolution                  (Parm, OutParm)
// bool                           bIsNeedAspect                  (Parm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsBorderlessResolution(bool bIsNeedAspect, struct FGraphicsSettingsWindowsResolution* OutResolution)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsBorderlessResolution");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsBorderlessResolution_Params params;
	params.bIsNeedAspect = bIsNeedAspect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutResolution != nullptr)
		*OutResolution = params.OutResolution;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsAntiAliasing
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// EGraphicsSettingsWindowsAntiAliasing OutAntiAliasing                (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_GetWindowsAntiAliasing(EGraphicsSettingsWindowsAntiAliasing* OutAntiAliasing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.GetWindowsAntiAliasing");

	UGraphicsSettingsWindowsBlueprintLibrary_GetWindowsAntiAliasing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAntiAliasing != nullptr)
		*OutAntiAliasing = params.OutAntiAliasing;
}


// Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.ConfirmWindowsScreenSetting
// (Final, Native, Static, Public, BlueprintCallable)

void UGraphicsSettingsWindowsBlueprintLibrary::STATIC_ConfirmWindowsScreenSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.GraphicsSettingsWindowsBlueprintLibrary.ConfirmWindowsScreenSetting");

	UGraphicsSettingsWindowsBlueprintLibrary_ConfirmWindowsScreenSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HeatBombExplosion.OnImpactResponse
// (Event, Public, BlueprintEvent)

void AHeatBombExplosion::OnImpactResponse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HeatBombExplosion.OnImpactResponse");

	AHeatBombExplosion_OnImpactResponse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.TurnOffGlowForPortrait
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InLuminanceRate                (Parm, ZeroConstructor, IsPlainOldData)

void UHUDMessageWidget::TurnOffGlowForPortrait(float InLuminanceRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.TurnOffGlowForPortrait");

	UHUDMessageWidget_TurnOffGlowForPortrait_Params params;
	params.InLuminanceRate = InLuminanceRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.ShowPortraitEvent
// (Event, Public, BlueprintEvent)

void UHUDMessageWidget::ShowPortraitEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.ShowPortraitEvent");

	UHUDMessageWidget_ShowPortraitEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.RadioMessageReceived
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FRadioText              RadioText                      (ConstParm, Parm, OutParm, ReferenceParm)

void UHUDMessageWidget::RadioMessageReceived(const struct FRadioText& RadioText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.RadioMessageReceived");

	UHUDMessageWidget_RadioMessageReceived_Params params;
	params.RadioText = RadioText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.OnHUDEnabled
// (Native, Public)

void UHUDMessageWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.OnHUDEnabled");

	UHUDMessageWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.OnHUDDisabled
// (Native, Public)

void UHUDMessageWidget::OnHUDDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.OnHUDDisabled");

	UHUDMessageWidget_OnHUDDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.OnHUDAlertEnd
// (Native, Public)

void UHUDMessageWidget::OnHUDAlertEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.OnHUDAlertEnd");

	UHUDMessageWidget_OnHUDAlertEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.OnHUDAlertBegin
// (Native, Public)

void UHUDMessageWidget::OnHUDAlertBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.OnHUDAlertBegin");

	UHUDMessageWidget_OnHUDAlertBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.OnCurrentHUDAlertColorUpdated
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UHUDMessageWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.OnCurrentHUDAlertColorUpdated");

	UHUDMessageWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.HUDMessageWidget.OnCameraViewChanged
// (Native, Public)
// Parameters:
// ECameraType                    CameraType                     (Parm, ZeroConstructor, IsPlainOldData)

void UHUDMessageWidget::OnCameraViewChanged(ECameraType CameraType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.HUDMessageWidget.OnCameraViewChanged");

	UHUDMessageWidget_OnCameraViewChanged_Params params;
	params.CameraType = CameraType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.IconStatBaseWidget.SetForcedPlaneIconDefaultColor
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor            Color                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UIconStatBaseWidget::SetForcedPlaneIconDefaultColor(const struct FLinearColor& Color)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IconStatBaseWidget.SetForcedPlaneIconDefaultColor");

	UIconStatBaseWidget_SetForcedPlaneIconDefaultColor_Params params;
	params.Color = Color;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.IconStatBaseWidget.OnWeaponActivatorInitialize
// (Final, Native, Private)

void UIconStatBaseWidget::OnWeaponActivatorInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IconStatBaseWidget.OnWeaponActivatorInitialize");

	UIconStatBaseWidget_OnWeaponActivatorInitialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.IconStatBaseWidget.OnSpecialWeaponChanged
// (Final, Native, Private)

void UIconStatBaseWidget::OnSpecialWeaponChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IconStatBaseWidget.OnSpecialWeaponChanged");

	UIconStatBaseWidget_OnSpecialWeaponChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.IconStatBaseWidget.OnHUDEnabled
// (Final, Native, Private)

void UIconStatBaseWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IconStatBaseWidget.OnHUDEnabled");

	UIconStatBaseWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.IGCPlaneController.OnIGCStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bStopPlaneSounds               (Parm, ZeroConstructor, IsPlainOldData)

void AIGCPlaneController::OnIGCStart(bool bStopPlaneSounds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IGCPlaneController.OnIGCStart");

	AIGCPlaneController_OnIGCStart_Params params;
	params.bStopPlaneSounds = bStopPlaneSounds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.IGCPlaneController.OnIGCEnd
// (Final, Native, Public, BlueprintCallable)

void AIGCPlaneController::OnIGCEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IGCPlaneController.OnIGCEnd");

	AIGCPlaneController_OnIGCEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.IGCPlaneController.OnIgcCameraChanged
// (Final, Native, Private)
// Parameters:
// class ACameraActor*            NewCameraActor                 (Parm, ZeroConstructor, IsPlainOldData)

void AIGCPlaneController::OnIgcCameraChanged(class ACameraActor* NewCameraActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IGCPlaneController.OnIgcCameraChanged");

	AIGCPlaneController_OnIgcCameraChanged_Params params;
	params.NewCameraActor = NewCameraActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.IGCPlaneController.GetControlledPlayerPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerPlane*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerPlane* AIGCPlaneController::GetControlledPlayerPlane()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IGCPlaneController.GetControlledPlayerPlane");

	AIGCPlaneController_GetControlledPlayerPlane_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.IGCPlaneController.GetControlledAIPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AAIPlane*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AAIPlane* AIGCPlaneController::GetControlledAIPlane()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.IGCPlaneController.GetControlledAIPlane");

	AIGCPlaneController_GetControlledAIPlane_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.InstantRadioReceiveWidget.OnHUDEnabled
// (Final, Native, Protected)

void UInstantRadioReceiveWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.InstantRadioReceiveWidget.OnHUDEnabled");

	UInstantRadioReceiveWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.InstantRadioReceiveWidget.OnHUDDisabled
// (Final, Native, Protected)

void UInstantRadioReceiveWidget::OnHUDDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.InstantRadioReceiveWidget.OnHUDDisabled");

	UInstantRadioReceiveWidget_OnHUDDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.LaserInterceptor.OnLifeTimeExpired
// (Event, Public, BlueprintEvent)

void ALaserInterceptor::OnLifeTimeExpired()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LaserInterceptor.OnLifeTimeExpired");

	ALaserInterceptor_OnLifeTimeExpired_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.LaserInterceptor.OnCreateWeaponEnd
// (Event, Public, BlueprintEvent)

void ALaserInterceptor::OnCreateWeaponEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LaserInterceptor.OnCreateWeaponEnd");

	ALaserInterceptor_OnCreateWeaponEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.LobbyGameMode.StartGame
// (Final, Native, Public, BlueprintCallable)

void ALobbyGameMode::StartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LobbyGameMode.StartGame");

	ALobbyGameMode_StartGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.LobbyGameMode.AllClientsHaveValidSessionObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ALobbyGameMode::AllClientsHaveValidSessionObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LobbyGameMode.AllClientsHaveValidSessionObject");

	ALobbyGameMode_AllClientsHaveValidSessionObject_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.LocalizationManager.SetVoiceCulture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Name                           (Parm, ZeroConstructor)

void ULocalizationManager::STATIC_SetVoiceCulture(const struct FString& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.SetVoiceCulture");

	ULocalizationManager_SetVoiceCulture_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.LocalizationManager.SetSubtitleCulture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Name                           (Parm, ZeroConstructor)

void ULocalizationManager::STATIC_SetSubtitleCulture(const struct FString& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.SetSubtitleCulture");

	ULocalizationManager_SetSubtitleCulture_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.LocalizationManager.SetIsDebugOutputEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)

void ULocalizationManager::STATIC_SetIsDebugOutputEnabled(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.SetIsDebugOutputEnabled");

	ULocalizationManager_SetIsDebugOutputEnabled_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.LocalizationManager.SetCulture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Name                           (Parm, ZeroConstructor)

void ULocalizationManager::STATIC_SetCulture(const struct FString& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.SetCulture");

	ULocalizationManager_SetCulture_Params params;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.LocalizationManager.LocalizeStringParams
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// TArray<struct FString>         Params                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString ULocalizationManager::STATIC_LocalizeStringParams(const struct FString& Key, TArray<struct FString> Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.LocalizeStringParams");

	ULocalizationManager_LocalizeStringParams_Params params;
	params.Key = Key;
	params.Params = Params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.LocalizationManager.LocalizeString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// bool                           bErrorCheck                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 DummyPrefix                    (ConstParm, Parm, ZeroConstructor)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString ULocalizationManager::STATIC_LocalizeString(const struct FString& Key, bool bErrorCheck, const struct FString& DummyPrefix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.LocalizeString");

	ULocalizationManager_LocalizeString_Params params;
	params.Key = Key;
	params.bErrorCheck = bErrorCheck;
	params.DummyPrefix = DummyPrefix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.LocalizationManager.HasString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 Key                            (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocalizationManager::STATIC_HasString(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.HasString");

	ULocalizationManager_HasString_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.LocalizationManager.GetVoiceCulture
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString ULocalizationManager::STATIC_GetVoiceCulture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.GetVoiceCulture");

	ULocalizationManager_GetVoiceCulture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.LocalizationManager.GetSubtitleCulture
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString ULocalizationManager::STATIC_GetSubtitleCulture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.GetSubtitleCulture");

	ULocalizationManager_GetSubtitleCulture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.LocalizationManager.GetIsDebugOutputEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ULocalizationManager::STATIC_GetIsDebugOutputEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.GetIsDebugOutputEnabled");

	ULocalizationManager_GetIsDebugOutputEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.LocalizationManager.GetCulture
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString ULocalizationManager::STATIC_GetCulture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.LocalizationManager.GetCulture");

	ULocalizationManager_GetCulture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MagneticAnomalyDetectorComponent.StopJammingMode
// (Final, Native, Public, BlueprintCallable)

void UMagneticAnomalyDetectorComponent::StopJammingMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MagneticAnomalyDetectorComponent.StopJammingMode");

	UMagneticAnomalyDetectorComponent_StopJammingMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MagneticAnomalyDetectorComponent.SetJammingMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bActive                        (Parm, ZeroConstructor, IsPlainOldData)

void UMagneticAnomalyDetectorComponent::SetJammingMode(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MagneticAnomalyDetectorComponent.SetJammingMode");

	UMagneticAnomalyDetectorComponent_SetJammingMode_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MagneticAnomalyDetectorComponent.GetSearchResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSearchResultDeta       ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FSearchResultDeta UMagneticAnomalyDetectorComponent::GetSearchResult()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MagneticAnomalyDetectorComponent.GetSearchResult");

	UMagneticAnomalyDetectorComponent_GetSearchResult_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MenuScrollBox.SetMenuScrollBar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UImage*                  InScrollBar                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UImage*                  InScrollBarBackground          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UMenuScrollBox::SetMenuScrollBar(class UImage* InScrollBar, class UImage* InScrollBarBackground)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuScrollBox.SetMenuScrollBar");

	UMenuScrollBox_SetMenuScrollBar_Params params;
	params.InScrollBar = InScrollBar;
	params.InScrollBarBackground = InScrollBarBackground;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MenuScrollBox.SetMenuBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextBlock*              InText                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UScrollBox*              InScrollBox                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UMenuScrollBox::SetMenuBox(class UTextBlock* InText, class UScrollBox* InScrollBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuScrollBox.SetMenuBox");

	UMenuScrollBox_SetMenuBox_Params params;
	params.InText = InText;
	params.InScrollBox = InScrollBox;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MenuScrollBox.RemoveChildAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UMenuScrollBox::RemoveChildAt(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuScrollBox.RemoveChildAt");

	UMenuScrollBox_RemoveChildAt_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MenuScrollBox.GetChildAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// class UWidget*                 ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UWidget* UMenuScrollBox::GetChildAt(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuScrollBox.GetChildAt");

	UMenuScrollBox_GetChildAt_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MenuScrollBox.ClearContent
// (Final, Native, Public, BlueprintCallable)

void UMenuScrollBox::ClearContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuScrollBox.ClearContent");

	UMenuScrollBox_ClearContent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MenuScrollBox.AddChild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                 InWidget                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UMenuScrollBox::AddChild(class UWidget* InWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MenuScrollBox.AddChild");

	UMenuScrollBox_AddChild_Params params;
	params.InWidget = InWidget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameHUDManager.OnSuccessAerialRefuelingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameHUDManager::OnSuccessAerialRefuelingDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameHUDManager.OnSuccessAerialRefuelingDelegate__DelegateSignature");

	UMiniGameHUDManager_OnSuccessAerialRefuelingDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameHUDManager.OnReferencedActorEndPlayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameHUDManager::OnReferencedActorEndPlayHandler(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameHUDManager.OnReferencedActorEndPlayHandler");

	UMiniGameHUDManager_OnReferencedActorEndPlayHandler_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnSuccessTakeoffHandler
// (Final, Native, Private)
// Parameters:
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnSuccessTakeoffHandler(float ElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnSuccessTakeoffHandler");

	AMiniGamePhase_OnSuccessTakeoffHandler_Params params;
	params.ElapsedTime = ElapsedTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnSuccessLandingHandler
// (Final, Native, Private)
// Parameters:
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnSuccessLandingHandler(float ElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnSuccessLandingHandler");

	AMiniGamePhase_OnSuccessLandingHandler_Params params;
	params.ElapsedTime = ElapsedTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnSuccessAerialRefuelingHandler
// (Final, Native, Private)
// Parameters:
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnSuccessAerialRefuelingHandler(float ElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnSuccessAerialRefuelingHandler");

	AMiniGamePhase_OnSuccessAerialRefuelingHandler_Params params;
	params.ElapsedTime = ElapsedTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartTakeoffHandler
// (Final, Native, Private)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnStartTakeoffHandler(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartTakeoffHandler");

	AMiniGamePhase_OnStartTakeoffHandler_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartSupplyMenuHandler
// (Final, Native, Private)

void AMiniGamePhase::OnStartSupplyMenuHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartSupplyMenuHandler");

	AMiniGamePhase_OnStartSupplyMenuHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartPlayableTakeoffHandler
// (Final, Native, Private)

void AMiniGamePhase::OnStartPlayableTakeoffHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartPlayableTakeoffHandler");

	AMiniGamePhase_OnStartPlayableTakeoffHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartPlayableLandingHandler
// (Final, Native, Private)

void AMiniGamePhase::OnStartPlayableLandingHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartPlayableLandingHandler");

	AMiniGamePhase_OnStartPlayableLandingHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartPlayableAerialRefuelingHandler
// (Final, Native, Private)

void AMiniGamePhase::OnStartPlayableAerialRefuelingHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartPlayableAerialRefuelingHandler");

	AMiniGamePhase_OnStartPlayableAerialRefuelingHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartLandingHandler
// (Final, Native, Private)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnStartLandingHandler(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartLandingHandler");

	AMiniGamePhase_OnStartLandingHandler_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartAerialRefuelingProbeStartHandler
// (Final, Native, Private)

void AMiniGamePhase::OnStartAerialRefuelingProbeStartHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartAerialRefuelingProbeStartHandler");

	AMiniGamePhase_OnStartAerialRefuelingProbeStartHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartAerialRefuelingProbeEndHandler
// (Final, Native, Private)

void AMiniGamePhase::OnStartAerialRefuelingProbeEndHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartAerialRefuelingProbeEndHandler");

	AMiniGamePhase_OnStartAerialRefuelingProbeEndHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnStartAerialRefuelingHandler
// (Final, Native, Private)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnStartAerialRefuelingHandler(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnStartAerialRefuelingHandler");

	AMiniGamePhase_OnStartAerialRefuelingHandler_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnSkipTakeoffHandler
// (Final, Native, Private)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnSkipTakeoffHandler(float FadeOutDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnSkipTakeoffHandler");

	AMiniGamePhase_OnSkipTakeoffHandler_Params params;
	params.FadeOutDuration = FadeOutDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGamePhase.OnSkipMiniGamePhaseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnSkipMiniGamePhaseDelegate__DelegateSignature(float FadeOutDuration)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGamePhase.OnSkipMiniGamePhaseDelegate__DelegateSignature");

	AMiniGamePhase_OnSkipMiniGamePhaseDelegate__DelegateSignature_Params params;
	params.FadeOutDuration = FadeOutDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnSkipLandingHandler
// (Final, Native, Private)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnSkipLandingHandler(float FadeOutDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnSkipLandingHandler");

	AMiniGamePhase_OnSkipLandingHandler_Params params;
	params.FadeOutDuration = FadeOutDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnSkipAerialRefuelingHandler
// (Final, Native, Private)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnSkipAerialRefuelingHandler(float FadeOutDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnSkipAerialRefuelingHandler");

	AMiniGamePhase_OnSkipAerialRefuelingHandler_Params params;
	params.FadeOutDuration = FadeOutDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGamePhase.OnPreStartMiniGamePhaseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnPreStartMiniGamePhaseDelegate__DelegateSignature(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGamePhase.OnPreStartMiniGamePhaseDelegate__DelegateSignature");

	AMiniGamePhase_OnPreStartMiniGamePhaseDelegate__DelegateSignature_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnMiniGameTick
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnMiniGameTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnMiniGameTick");

	AMiniGamePhase_OnMiniGameTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnMiniGameStart
// (Native, Event, Public, BlueprintEvent)

void AMiniGamePhase::OnMiniGameStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnMiniGameStart");

	AMiniGamePhase_OnMiniGameStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnMiniGameSkip
// (Native, Event, Public, BlueprintEvent)

void AMiniGamePhase::OnMiniGameSkip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnMiniGameSkip");

	AMiniGamePhase_OnMiniGameSkip_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnMiniGameComplete
// (Native, Event, Public, BlueprintEvent)

void AMiniGamePhase::OnMiniGameComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnMiniGameComplete");

	AMiniGamePhase_OnMiniGameComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnFinishTakeoffHandler
// (Final, Native, Private)

void AMiniGamePhase::OnFinishTakeoffHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnFinishTakeoffHandler");

	AMiniGamePhase_OnFinishTakeoffHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnFinishLandingHandler
// (Final, Native, Private)

void AMiniGamePhase::OnFinishLandingHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnFinishLandingHandler");

	AMiniGamePhase_OnFinishLandingHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnFinishdSupplyMenuHandler
// (Final, Native, Private)

void AMiniGamePhase::OnFinishdSupplyMenuHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnFinishdSupplyMenuHandler");

	AMiniGamePhase_OnFinishdSupplyMenuHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnFinishAerialRefuelingHandler
// (Final, Native, Private)

void AMiniGamePhase::OnFinishAerialRefuelingHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnFinishAerialRefuelingHandler");

	AMiniGamePhase_OnFinishAerialRefuelingHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnFailedMiniGameHandler
// (Final, Native, Private)
// Parameters:
// EMissionStateMiniGameFailReason Reason                         (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnFailedMiniGameHandler(EMissionStateMiniGameFailReason Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnFailedMiniGameHandler");

	AMiniGamePhase_OnFailedMiniGameHandler_Params params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnCooldownStartTimeOutHandler
// (Final, Native, Private)

void AMiniGamePhase::OnCooldownStartTimeOutHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnCooldownStartTimeOutHandler");

	AMiniGamePhase_OnCooldownStartTimeOutHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnCooldownStartSuccessfulHandler
// (Final, Native, Private)

void AMiniGamePhase::OnCooldownStartSuccessfulHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnCooldownStartSuccessfulHandler");

	AMiniGamePhase_OnCooldownStartSuccessfulHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnCooldownStartOutOfZoneHandler
// (Final, Native, Private)

void AMiniGamePhase::OnCooldownStartOutOfZoneHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnCooldownStartOutOfZoneHandler");

	AMiniGamePhase_OnCooldownStartOutOfZoneHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnCooldownStartDeadHandler
// (Final, Native, Private)

void AMiniGamePhase::OnCooldownStartDeadHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnCooldownStartDeadHandler");

	AMiniGamePhase_OnCooldownStartDeadHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnCooldownFinishedSuccessfulHandler
// (Final, Native, Private)

void AMiniGamePhase::OnCooldownFinishedSuccessfulHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnCooldownFinishedSuccessfulHandler");

	AMiniGamePhase_OnCooldownFinishedSuccessfulHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnCooldownFinishedFailedHandler
// (Final, Native, Private)

void AMiniGamePhase::OnCooldownFinishedFailedHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnCooldownFinishedFailedHandler");

	AMiniGamePhase_OnCooldownFinishedFailedHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnCloseSupplyMenu
// (Native, Event, Public, BlueprintEvent)

void AMiniGamePhase::OnCloseSupplyMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnCloseSupplyMenu");

	AMiniGamePhase_OnCloseSupplyMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnCheckInterruptStateHandler
// (Final, Native, Private)

void AMiniGamePhase::OnCheckInterruptStateHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnCheckInterruptStateHandler");

	AMiniGamePhase_OnCheckInterruptStateHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnActorEndOverlapTakeoffRunwayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnActorEndOverlapTakeoffRunwayHandler(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnActorEndOverlapTakeoffRunwayHandler");

	AMiniGamePhase_OnActorEndOverlapTakeoffRunwayHandler_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnActorEndOverlapLandingRunwayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnActorEndOverlapLandingRunwayHandler(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnActorEndOverlapLandingRunwayHandler");

	AMiniGamePhase_OnActorEndOverlapLandingRunwayHandler_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnActorBeginOverlapTakeoffRunwayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnActorBeginOverlapTakeoffRunwayHandler(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnActorBeginOverlapTakeoffRunwayHandler");

	AMiniGamePhase_OnActorBeginOverlapTakeoffRunwayHandler_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGamePhase.OnActorBeginOverlapLandingRunwayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void AMiniGamePhase::OnActorBeginOverlapLandingRunwayHandler(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGamePhase.OnActorBeginOverlapLandingRunwayHandler");

	AMiniGamePhase_OnActorBeginOverlapLandingRunwayHandler_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameLandingState.OnSuccessLandingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameLandingState::OnSuccessLandingDelegate__DelegateSignature(float ElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameLandingState.OnSuccessLandingDelegate__DelegateSignature");

	UMiniGameLandingState_OnSuccessLandingDelegate__DelegateSignature_Params params;
	params.ElapsedTime = ElapsedTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameLandingState.OnStartLandingPlayableDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameLandingState::OnStartLandingPlayableDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameLandingState.OnStartLandingPlayableDelegate__DelegateSignature");

	UMiniGameLandingState_OnStartLandingPlayableDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameLandingState.OnStartLandingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameLandingState::OnStartLandingDelegate__DelegateSignature(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameLandingState.OnStartLandingDelegate__DelegateSignature");

	UMiniGameLandingState_OnStartLandingDelegate__DelegateSignature_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameLandingState.OnSkipDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameLandingState::OnSkipDelegate__DelegateSignature(float FadeOutDuration)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameLandingState.OnSkipDelegate__DelegateSignature");

	UMiniGameLandingState_OnSkipDelegate__DelegateSignature_Params params;
	params.FadeOutDuration = FadeOutDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameLandingState.OnPlayerEndLandingHandler
// (Final, Native, Private)

void UMiniGameLandingState::OnPlayerEndLandingHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameLandingState.OnPlayerEndLandingHandler");

	UMiniGameLandingState_OnPlayerEndLandingHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameLandingState.OnFinishLandingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameLandingState::OnFinishLandingDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameLandingState.OnFinishLandingDelegate__DelegateSignature");

	UMiniGameLandingState_OnFinishLandingDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameLandingState.OnFailLandingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EMissionStateMiniGameFailReason Reason                         (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameLandingState::OnFailLandingDelegate__DelegateSignature(EMissionStateMiniGameFailReason Reason)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameLandingState.OnFailLandingDelegate__DelegateSignature");

	UMiniGameLandingState_OnFailLandingDelegate__DelegateSignature_Params params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameLandingState.OnFadeOutHandler
// (Final, Native, Private)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameLandingState::OnFadeOutHandler(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameLandingState.OnFadeOutHandler");

	UMiniGameLandingState_OnFadeOutHandler_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameRefuelInterpolator.OnPlayerAdjustMovedTransformHandler
// (Final, Native, Private, HasOutParms, HasDefaults)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInOutChangedTransform         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InOutNextLocation              (Parm, OutParm, IsPlainOldData)
// struct FRotator                InOutNextRotation              (Parm, OutParm, IsPlainOldData)
// struct FRotator                InOutNextMomentSpeed           (Parm, OutParm, IsPlainOldData)

void UMiniGameRefuelInterpolator::OnPlayerAdjustMovedTransformHandler(float DeltaTime, bool* bInOutChangedTransform, struct FVector* InOutNextLocation, struct FRotator* InOutNextRotation, struct FRotator* InOutNextMomentSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameRefuelInterpolator.OnPlayerAdjustMovedTransformHandler");

	UMiniGameRefuelInterpolator_OnPlayerAdjustMovedTransformHandler_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bInOutChangedTransform != nullptr)
		*bInOutChangedTransform = params.bInOutChangedTransform;
	if (InOutNextLocation != nullptr)
		*InOutNextLocation = params.InOutNextLocation;
	if (InOutNextRotation != nullptr)
		*InOutNextRotation = params.InOutNextRotation;
	if (InOutNextMomentSpeed != nullptr)
		*InOutNextMomentSpeed = params.InOutNextMomentSpeed;
}


// Function Nimbus.MiniGameMiniMapManager.OnReferencedActorEndPlayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameMiniMapManager::OnReferencedActorEndPlayHandler(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameMiniMapManager.OnReferencedActorEndPlayHandler");

	UMiniGameMiniMapManager_OnReferencedActorEndPlayHandler_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameVolumeSet.OnActorEndOverlapHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameVolumeSet::OnActorEndOverlapHandler(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameVolumeSet.OnActorEndOverlapHandler");

	UMiniGameVolumeSet_OnActorEndOverlapHandler_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameVolumeSet.OnActorBeginOverlapHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameVolumeSet::OnActorBeginOverlapHandler(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameVolumeSet.OnActorBeginOverlapHandler");

	UMiniGameVolumeSet_OnActorBeginOverlapHandler_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameVolumeSet.ActorOverlapDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameVolumeSet::ActorOverlapDelegate__DelegateSignature(class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameVolumeSet.ActorOverlapDelegate__DelegateSignature");

	UMiniGameVolumeSet_ActorOverlapDelegate__DelegateSignature_Params params;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapLayerWidget.UpdateMiniMapRadarVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMiniMapType                   NewMiniMapType                 (Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapLayerWidget::UpdateMiniMapRadarVisibility(EMiniMapType NewMiniMapType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapLayerWidget.UpdateMiniMapRadarVisibility");

	UMiniMapLayerWidget_UpdateMiniMapRadarVisibility_Params params;
	params.NewMiniMapType = NewMiniMapType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapLayerWidget.OnUpdateMiniMapRadarVisibility
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EMiniMapType                   NewMiniMapType                 (Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapLayerWidget::OnUpdateMiniMapRadarVisibility(EMiniMapType NewMiniMapType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapLayerWidget.OnUpdateMiniMapRadarVisibility");

	UMiniMapLayerWidget_OnUpdateMiniMapRadarVisibility_Params params;
	params.NewMiniMapType = NewMiniMapType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapLayerWidget.OnHUDAlertEnd
// (Native, Public)

void UMiniMapLayerWidget::OnHUDAlertEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapLayerWidget.OnHUDAlertEnd");

	UMiniMapLayerWidget_OnHUDAlertEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapLayerWidget.OnHUDAlertBegin
// (Native, Public)

void UMiniMapLayerWidget::OnHUDAlertBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapLayerWidget.OnHUDAlertBegin");

	UMiniMapLayerWidget_OnHUDAlertBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapLayerWidget.OnCurrentHUDAlertColorUpdated
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapLayerWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapLayerWidget.OnCurrentHUDAlertColorUpdated");

	UMiniMapLayerWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.SetRetainerBoxEffectsSaturation
// (Event, Public, BlueprintEvent)
// Parameters:
// float                          InSaturationValue              (Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapWidget::SetRetainerBoxEffectsSaturation(float InSaturationValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.SetRetainerBoxEffectsSaturation");

	UMiniMapWidget_SetRetainerBoxEffectsSaturation_Params params;
	params.InSaturationValue = InSaturationValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.SetRetainerBoxApplyGammaCorrection
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bApplyGammaCorrection          (Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapWidget::SetRetainerBoxApplyGammaCorrection(bool bApplyGammaCorrection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.SetRetainerBoxApplyGammaCorrection");

	UMiniMapWidget_SetRetainerBoxApplyGammaCorrection_Params params;
	params.bApplyGammaCorrection = bApplyGammaCorrection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.SetRenderIconScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Scale                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapWidget::SetRenderIconScale(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.SetRenderIconScale");

	UMiniMapWidget_SetRenderIconScale_Params params;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.SetPlayerIconScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Scale                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapWidget::SetPlayerIconScale(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.SetPlayerIconScale");

	UMiniMapWidget_SetPlayerIconScale_Params params;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.RefreshMiniMap
// (Native, Public, BlueprintCallable)

void UMiniMapWidget::RefreshMiniMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.RefreshMiniMap");

	UMiniMapWidget_RefreshMiniMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.OnHUDDisabled
// (Native, Public)

void UMiniMapWidget::OnHUDDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.OnHUDDisabled");

	UMiniMapWidget_OnHUDDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.OnHUDAlertEnd
// (Native, Public)

void UMiniMapWidget::OnHUDAlertEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.OnHUDAlertEnd");

	UMiniMapWidget_OnHUDAlertEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.OnHUDAlertBegin
// (Native, Public)

void UMiniMapWidget::OnHUDAlertBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.OnHUDAlertBegin");

	UMiniMapWidget_OnHUDAlertBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.OnCurrentHUDAlertColorUpdated
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.OnCurrentHUDAlertColorUpdated");

	UMiniMapWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.OnCombatZoneUpdated
// (Native, Protected)

void UMiniMapWidget::OnCombatZoneUpdated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.OnCombatZoneUpdated");

	UMiniMapWidget_OnCombatZoneUpdated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapWidget.GetMiniMapSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector2D UMiniMapWidget::GetMiniMapSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapWidget.GetMiniMapSize");

	UMiniMapWidget_GetMiniMapSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MiniMapRadarWidget.RefreshMiniMap
// (Native, Public, BlueprintCallable)

void UMiniMapRadarWidget::RefreshMiniMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapRadarWidget.RefreshMiniMap");

	UMiniMapRadarWidget_RefreshMiniMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapRadarWidget.OnHUDEnabled
// (Native, Protected)

void UMiniMapRadarWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapRadarWidget.OnHUDEnabled");

	UMiniMapRadarWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapRadarWidget.OnHUDAlertEnd
// (Native, Protected)

void UMiniMapRadarWidget::OnHUDAlertEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapRadarWidget.OnHUDAlertEnd");

	UMiniMapRadarWidget_OnHUDAlertEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapRadarWidget.OnHUDAlertBegin
// (Native, Protected)

void UMiniMapRadarWidget::OnHUDAlertBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapRadarWidget.OnHUDAlertBegin");

	UMiniMapRadarWidget_OnHUDAlertBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapRadarWidget.OnCurrentHUDAlertColorUpdated
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UMiniMapRadarWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapRadarWidget.OnCurrentHUDAlertColorUpdated");

	UMiniMapRadarWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapRadarWidget.ChangeRadarLineColor
// (Native, Event, Protected, BlueprintEvent)

void UMiniMapRadarWidget::ChangeRadarLineColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapRadarWidget.ChangeRadarLineColor");

	UMiniMapRadarWidget_ChangeRadarLineColor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameAerialRefuelingState.OnVisibilityChangedRefuelingAircraftHandler
// (Final, Native, Private)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameAerialRefuelingState::OnVisibilityChangedRefuelingAircraftHandler(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameAerialRefuelingState.OnVisibilityChangedRefuelingAircraftHandler");

	UMiniGameAerialRefuelingState_OnVisibilityChangedRefuelingAircraftHandler_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameAerialRefuelingState.OnSuccessAerialRefuelingHandler
// (Final, Native, Private)

void UMiniGameAerialRefuelingState::OnSuccessAerialRefuelingHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameAerialRefuelingState.OnSuccessAerialRefuelingHandler");

	UMiniGameAerialRefuelingState_OnSuccessAerialRefuelingHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnSuccessAerialRefuelingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameAerialRefuelingState::OnSuccessAerialRefuelingDelegate__DelegateSignature(float ElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnSuccessAerialRefuelingDelegate__DelegateSignature");

	UMiniGameAerialRefuelingState_OnSuccessAerialRefuelingDelegate__DelegateSignature_Params params;
	params.ElapsedTime = ElapsedTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnStartProbeStartDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameAerialRefuelingState::OnStartProbeStartDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnStartProbeStartDelegate__DelegateSignature");

	UMiniGameAerialRefuelingState_OnStartProbeStartDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnStartProbeEndDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameAerialRefuelingState::OnStartProbeEndDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnStartProbeEndDelegate__DelegateSignature");

	UMiniGameAerialRefuelingState_OnStartProbeEndDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnStartAerialRefuelingPlayableDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameAerialRefuelingState::OnStartAerialRefuelingPlayableDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnStartAerialRefuelingPlayableDelegate__DelegateSignature");

	UMiniGameAerialRefuelingState_OnStartAerialRefuelingPlayableDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnStartAerialRefuelingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameAerialRefuelingState::OnStartAerialRefuelingDelegate__DelegateSignature(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnStartAerialRefuelingDelegate__DelegateSignature");

	UMiniGameAerialRefuelingState_OnStartAerialRefuelingDelegate__DelegateSignature_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnSkipDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameAerialRefuelingState::OnSkipDelegate__DelegateSignature(float FadeOutDuration)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnSkipDelegate__DelegateSignature");

	UMiniGameAerialRefuelingState_OnSkipDelegate__DelegateSignature_Params params;
	params.FadeOutDuration = FadeOutDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnFinishAerialRefuelingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameAerialRefuelingState::OnFinishAerialRefuelingDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnFinishAerialRefuelingDelegate__DelegateSignature");

	UMiniGameAerialRefuelingState_OnFinishAerialRefuelingDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnFailAerialRefuelingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EMissionStateMiniGameFailReason Reason                         (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameAerialRefuelingState::OnFailAerialRefuelingDelegate__DelegateSignature(EMissionStateMiniGameFailReason Reason)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameAerialRefuelingState.OnFailAerialRefuelingDelegate__DelegateSignature");

	UMiniGameAerialRefuelingState_OnFailAerialRefuelingDelegate__DelegateSignature_Params params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameAerialRefuelingState.OnFadeOutHandler
// (Final, Native, Private)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameAerialRefuelingState::OnFadeOutHandler(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameAerialRefuelingState.OnFadeOutHandler");

	UMiniGameAerialRefuelingState_OnFadeOutHandler_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapScrollableWidget.RefreshMiniMap
// (Native, Public, BlueprintCallable)

void UMiniMapScrollableWidget::RefreshMiniMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapScrollableWidget.RefreshMiniMap");

	UMiniMapScrollableWidget_RefreshMiniMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapScrollableWidget.OnHUDAlertEnd
// (Native, Public)

void UMiniMapScrollableWidget::OnHUDAlertEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapScrollableWidget.OnHUDAlertEnd");

	UMiniMapScrollableWidget_OnHUDAlertEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniMapScrollableWidget.OnHUDAlertBegin
// (Native, Public)

void UMiniMapScrollableWidget::OnHUDAlertBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniMapScrollableWidget.OnHUDAlertBegin");

	UMiniMapScrollableWidget_OnHUDAlertBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.SkipMiniGame
// (Final, Native, Public, BlueprintCallable)

void AMission::SkipMiniGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.SkipMiniGame");

	AMission_SkipMiniGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.ShowMissionQuota
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void AMission::ShowMissionQuota(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.ShowMissionQuota");

	AMission_ShowMissionQuota_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.ShowMissionAccomplished_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EMissionSuccessNotificationType Type                           (Parm, ZeroConstructor, IsPlainOldData)

void AMission::STATIC_ShowMissionAccomplished_S(EMissionSuccessNotificationType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.ShowMissionAccomplished_S");

	AMission_ShowMissionAccomplished_S_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.SetTrueSkyTime_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Hour                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Minute                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          ShadowBase                     (Parm, ZeroConstructor, IsPlainOldData)

void AMission::STATIC_SetTrueSkyTime_S(int Hour, int Minute, float ShadowBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.SetTrueSkyTime_S");

	AMission_SetTrueSkyTime_S_Params params;
	params.Hour = Hour;
	params.Minute = Minute;
	params.ShadowBase = ShadowBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.SetRemainingHpPercentage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Percentage                     (Parm, ZeroConstructor, IsPlainOldData)

void AMission::SetRemainingHpPercentage(float Percentage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.SetRemainingHpPercentage");

	AMission_SetRemainingHpPercentage_Params params;
	params.Percentage = Percentage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.SetObjectiveMissionScore_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Score                          (Parm, ZeroConstructor, IsPlainOldData)

void AMission::STATIC_SetObjectiveMissionScore_S(int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.SetObjectiveMissionScore_S");

	AMission_SetObjectiveMissionScore_S_Params params;
	params.Score = Score;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.SetMissionObjectivesOnPause_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)

void AMission::STATIC_SetMissionObjectivesOnPause_S(int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.SetMissionObjectivesOnPause_S");

	AMission_SetMissionObjectivesOnPause_S_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnSystemMissionHandler
// (Final, Native, Private)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnSystemMissionHandler(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnSystemMissionHandler");

	AMission_OnSystemMissionHandler_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnSystemLevelScriptActorHandler
// (Final, Native, Private)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnSystemLevelScriptActorHandler(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnSystemLevelScriptActorHandler");

	AMission_OnSystemLevelScriptActorHandler_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnSystemEndPhysicsHandler
// (Final, Native, Private)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnSystemEndPhysicsHandler(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnSystemEndPhysicsHandler");

	AMission_OnSystemEndPhysicsHandler_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnSuccessSupplyPhaseHandler
// (Final, Native, Private, HasOutParms, HasDefaults)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RestartLocation                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                RestartRotation                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void AMission::OnSuccessSupplyPhaseHandler(class AMissionPhase* MissionPhase, const struct FVector& RestartLocation, const struct FRotator& RestartRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnSuccessSupplyPhaseHandler");

	AMission_OnSuccessSupplyPhaseHandler_Params params;
	params.MissionPhase = MissionPhase;
	params.RestartLocation = RestartLocation;
	params.RestartRotation = RestartRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnSuccessCurrentPhaseHandler
// (Final, Native, Private)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnSuccessCurrentPhaseHandler(class AMissionPhase* MissionPhase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnSuccessCurrentPhaseHandler");

	AMission_OnSuccessCurrentPhaseHandler_Params params;
	params.MissionPhase = MissionPhase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnStoppedReplayHandler
// (Final, Native, Private)

void AMission::OnStoppedReplayHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnStoppedReplayHandler");

	AMission_OnStoppedReplayHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnStartSupplyPhaseHandler
// (Final, Native, Private)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnStartSupplyPhaseHandler(class AMissionPhase* MissionPhase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnStartSupplyPhaseHandler");

	AMission_OnStartSupplyPhaseHandler_Params params;
	params.MissionPhase = MissionPhase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnStartNextPhaseHandler
// (Final, Native, Private)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsRestart                     (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnStartNextPhaseHandler(class AMissionPhase* MissionPhase, bool bIsRestart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnStartNextPhaseHandler");

	AMission_OnStartNextPhaseHandler_Params params;
	params.MissionPhase = MissionPhase;
	params.bIsRestart = bIsRestart;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnPreStopBusEvent
// (Final, Native, Private)
// Parameters:
// ENimbusSoundType               BusType                        (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnPreStopBusEvent(ENimbusSoundType BusType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnPreStopBusEvent");

	AMission_OnPreStopBusEvent_Params params;
	params.BusType = BusType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnPreStartReplayHandler
// (Final, Native, Private)
// Parameters:
// bool                           bIsRestart                     (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnPreStartReplayHandler(bool bIsRestart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnPreStartReplayHandler");

	AMission_OnPreStartReplayHandler_Params params;
	params.bIsRestart = bIsRestart;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Mission.OnPreStartMiniGamePhaseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnPreStartMiniGamePhaseDelegate__DelegateSignature(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Mission.OnPreStartMiniGamePhaseDelegate__DelegateSignature");

	AMission_OnPreStartMiniGamePhaseDelegate__DelegateSignature_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnPostStartReplayHandler
// (Final, Native, Private)
// Parameters:
// bool                           bIsRestart                     (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnPostStartReplayHandler(bool bIsRestart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnPostStartReplayHandler");

	AMission_OnPostStartReplayHandler_Params params;
	params.bIsRestart = bIsRestart;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnIgcStartSkipFadeOutHandler
// (Final, Native, Private)
// Parameters:
// bool                           bStopBGM                       (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           OverrideStopBGMEvent           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnIgcStartSkipFadeOutHandler(bool bStopBGM, class UAkAudioEvent* OverrideStopBGMEvent, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnIgcStartSkipFadeOutHandler");

	AMission_OnIgcStartSkipFadeOutHandler_Params params;
	params.bStopBGM = bStopBGM;
	params.OverrideStopBGMEvent = OverrideStopBGMEvent;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnIgcCameraChangedHandler
// (Final, Native, Private)
// Parameters:
// class ACameraActor*            NewCameraActor                 (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnIgcCameraChangedHandler(class ACameraActor* NewCameraActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnIgcCameraChangedHandler");

	AMission_OnIgcCameraChangedHandler_Params params;
	params.NewCameraActor = NewCameraActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Mission.OnIgcCameraChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ACameraActor*            NewCameraActor                 (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnIgcCameraChanged__DelegateSignature(class ACameraActor* NewCameraActor)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Mission.OnIgcCameraChanged__DelegateSignature");

	AMission_OnIgcCameraChanged__DelegateSignature_Params params;
	params.NewCameraActor = NewCameraActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnGameEndPhysicsHandler
// (Final, Native, Private)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnGameEndPhysicsHandler(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnGameEndPhysicsHandler");

	AMission_OnGameEndPhysicsHandler_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnFailCurrentPhaseHandler
// (Final, Native, Private)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)
// EMissionStatePhaseFailReason   Reason                         (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnFailCurrentPhaseHandler(class AMissionPhase* MissionPhase, EMissionStatePhaseFailReason Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnFailCurrentPhaseHandler");

	AMission_OnFailCurrentPhaseHandler_Params params;
	params.MissionPhase = MissionPhase;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnEndIGCHandler
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FMissionIGCRequestInfo  RequestInfo                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AMissionPhase*           MiniGameMapPhase               (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnEndIGCHandler(const struct FMissionIGCRequestInfo& RequestInfo, class AMissionPhase* MiniGameMapPhase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnEndIGCHandler");

	AMission_OnEndIGCHandler_Params params;
	params.RequestInfo = RequestInfo;
	params.MiniGameMapPhase = MiniGameMapPhase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnCooldownStartTimeOutHandler
// (Final, Native, Private)

void AMission::OnCooldownStartTimeOutHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnCooldownStartTimeOutHandler");

	AMission_OnCooldownStartTimeOutHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnCooldownStartSuccessfulHandler
// (Final, Native, Private)

void AMission::OnCooldownStartSuccessfulHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnCooldownStartSuccessfulHandler");

	AMission_OnCooldownStartSuccessfulHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnCooldownStartOutOfZoneHandler
// (Final, Native, Private)

void AMission::OnCooldownStartOutOfZoneHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnCooldownStartOutOfZoneHandler");

	AMission_OnCooldownStartOutOfZoneHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnCooldownStartFailObjectiveHandler
// (Final, Native, Private)

void AMission::OnCooldownStartFailObjectiveHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnCooldownStartFailObjectiveHandler");

	AMission_OnCooldownStartFailObjectiveHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnCooldownStartDeadHandler
// (Final, Native, Private)

void AMission::OnCooldownStartDeadHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnCooldownStartDeadHandler");

	AMission_OnCooldownStartDeadHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnCooldownFinishedHandler
// (Final, Native, Private)

void AMission::OnCooldownFinishedHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnCooldownFinishedHandler");

	AMission_OnCooldownFinishedHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnCheckInterruptStateHandler
// (Final, Native, Private)

void AMission::OnCheckInterruptStateHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnCheckInterruptStateHandler");

	AMission_OnCheckInterruptStateHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnChangedReplayChapterHandler
// (Final, Native, Private)

void AMission::OnChangedReplayChapterHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnChangedReplayChapterHandler");

	AMission_OnChangedReplayChapterHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnBeginIGCHandler
// (Final, Native, Private, HasOutParms)
// Parameters:
// struct FMissionIGCRequestInfo  RequestInfo                    (ConstParm, Parm, OutParm, ReferenceParm)
// class AMissionPhase*           MiniGameMapPhase               (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnBeginIGCHandler(const struct FMissionIGCRequestInfo& RequestInfo, class AMissionPhase* MiniGameMapPhase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnBeginIGCHandler");

	AMission_OnBeginIGCHandler_Params params;
	params.RequestInfo = RequestInfo;
	params.MiniGameMapPhase = MiniGameMapPhase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.OnActorSpawnedHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  SpawnedActor                   (Parm, ZeroConstructor, IsPlainOldData)

void AMission::OnActorSpawnedHandler(class AActor* SpawnedActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.OnActorSpawnedHandler");

	AMission_OnActorSpawnedHandler_Params params;
	params.SpawnedActor = SpawnedActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.IsPlayingBGM
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMission::IsPlayingBGM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.IsPlayingBGM");

	AMission_IsPlayingBGM_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.IsMissionStarted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMission::IsMissionStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.IsMissionStarted");

	AMission_IsMissionStarted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.IsMissionFailed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMission::IsMissionFailed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.IsMissionFailed");

	AMission_IsMissionFailed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.IsMissionCompleted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMission::IsMissionCompleted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.IsMissionCompleted");

	AMission_IsMissionCompleted_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.IsInIGC
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMission::IsInIGC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.IsInIGC");

	AMission_IsInIGC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// DelegateFunction Nimbus.Mission.IGCPreviewDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int                            IGCNumber                      (Parm, ZeroConstructor, IsPlainOldData)

void AMission::IGCPreviewDelegate__DelegateSignature(int IGCNumber)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Mission.IGCPreviewDelegate__DelegateSignature");

	AMission_IGCPreviewDelegate__DelegateSignature_Params params;
	params.IGCNumber = IGCNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.GetObjectiveMissionScore_S
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AMission::STATIC_GetObjectiveMissionScore_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetObjectiveMissionScore_S");

	AMission_GetObjectiveMissionScore_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.GetMissionScore_S
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AMission::STATIC_GetMissionScore_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetMissionScore_S");

	AMission_GetMissionScore_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.GetMissionPhaseTimeLeftInSeconds_S
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AMission::STATIC_GetMissionPhaseTimeLeftInSeconds_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetMissionPhaseTimeLeftInSeconds_S");

	AMission_GetMissionPhaseTimeLeftInSeconds_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.GetMissionPhaseElapsedTimeInSeconds_S
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AMission::STATIC_GetMissionPhaseElapsedTimeInSeconds_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetMissionPhaseElapsedTimeInSeconds_S");

	AMission_GetMissionPhaseElapsedTimeInSeconds_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.GetMissionElapsedTimeInSeconds_S
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AMission::STATIC_GetMissionElapsedTimeInSeconds_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetMissionElapsedTimeInSeconds_S");

	AMission_GetMissionElapsedTimeInSeconds_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.GetKillStatCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AMission::GetKillStatCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetKillStatCount");

	AMission_GetKillStatCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.GetKillStat
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 OutName                        (Parm, OutParm, ZeroConstructor)
// int                            OutScore                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutTime                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void AMission::GetKillStat(int Index, struct FString* OutName, int* OutScore, float* OutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetKillStat");

	AMission_GetKillStat_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutName != nullptr)
		*OutName = params.OutName;
	if (OutScore != nullptr)
		*OutScore = params.OutScore;
	if (OutTime != nullptr)
		*OutTime = params.OutTime;
}


// Function Nimbus.Mission.GetCurrentMission
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bIncludeOnline                 (Parm, ZeroConstructor, IsPlainOldData)
// class AMission*                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AMission* AMission::STATIC_GetCurrentMission(bool bIncludeOnline)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetCurrentMission");

	AMission_GetCurrentMission_Params params;
	params.bIncludeOnline = bIncludeOnline;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.GetConditionChecker
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMissionConditionChecker* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AMissionConditionChecker* AMission::GetConditionChecker()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetConditionChecker");

	AMission_GetConditionChecker_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.GetAIManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AMissionAIManager*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AMissionAIManager* AMission::GetAIManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.GetAIManager");

	AMission_GetAIManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Mission.ForcePauseMissionTimer_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bPause                         (Parm, ZeroConstructor, IsPlainOldData)

void AMission::STATIC_ForcePauseMissionTimer_S(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.ForcePauseMissionTimer_S");

	AMission_ForcePauseMissionTimer_S_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.CompleteCoolDownOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewCooldownDuration            (Parm, ZeroConstructor, IsPlainOldData)
// float                          NewCooldownFadingDuration      (Parm, ZeroConstructor, IsPlainOldData)

void AMission::CompleteCoolDownOverride(float NewCooldownDuration, float NewCooldownFadingDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.CompleteCoolDownOverride");

	AMission_CompleteCoolDownOverride_Params params;
	params.NewCooldownDuration = NewCooldownDuration;
	params.NewCooldownFadingDuration = NewCooldownFadingDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Mission.Complete
// (Final, Native, Public, BlueprintCallable)

void AMission::Complete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Mission.Complete");

	AMission_Complete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Mission.CombatZoneUpdatedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AMission::CombatZoneUpdatedDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Mission.CombatZoneUpdatedDelegate__DelegateSignature");

	AMission_CombatZoneUpdatedDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionCommonActor.GetMissionCommonActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMissionCommonActor*     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AMissionCommonActor* AMissionCommonActor::STATIC_GetMissionCommonActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionCommonActor.GetMissionCommonActor");

	AMissionCommonActor_GetMissionCommonActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionAIManager.OnMissionPhaseRestarted
// (Final, Native, Public)
// Parameters:
// struct FString                 Dummy                          (Parm, ZeroConstructor)

void AMissionAIManager::OnMissionPhaseRestarted(const struct FString& Dummy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionAIManager.OnMissionPhaseRestarted");

	AMissionAIManager_OnMissionPhaseRestarted_Params params;
	params.Dummy = Dummy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionConditionChecker.OnMissionPhaseRestarted
// (Final, Native, Public)
// Parameters:
// struct FString                 Dummy                          (Parm, ZeroConstructor)

void AMissionConditionChecker::OnMissionPhaseRestarted(const struct FString& Dummy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.OnMissionPhaseRestarted");

	AMissionConditionChecker_OnMissionPhaseRestarted_Params params;
	params.Dummy = Dummy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionConditionChecker.OnConditionUpdate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AMissionConditionChecker::OnConditionUpdate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionConditionChecker.OnConditionUpdate__DelegateSignature");

	AMissionConditionChecker_OnConditionUpdate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionConditionChecker.Get_TargetModifierStar
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AMissionConditionChecker::STATIC_Get_TargetModifierStar(class AGameObject* GameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Get_TargetModifierStar");

	AMissionConditionChecker_Get_TargetModifierStar_Params params;
	params.GameObject = GameObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Get_StealthContainerOpacityPercentage
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AMissionConditionChecker::STATIC_Get_StealthContainerOpacityPercentage(class AGameObject* GameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Get_StealthContainerOpacityPercentage");

	AMissionConditionChecker_Get_StealthContainerOpacityPercentage_Params params;
	params.GameObject = GameObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Get_LandingCourseAssistant
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          TouchdownRate                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          TopSlopeRate                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          BottomSlopeRate                (Parm, ZeroConstructor, IsPlainOldData)
// float                          SideLineRate                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          TopExpandAngle                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          BottomExpandAngle              (Parm, ZeroConstructor, IsPlainOldData)
// float                          SideExpandAngle                (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitGauge                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitRoll                      (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_MiniGameCourseAssistant ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMissionCondition_MiniGameCourseAssistant AMissionConditionChecker::STATIC_Get_LandingCourseAssistant(float TouchdownRate, float TopSlopeRate, float BottomSlopeRate, float SideLineRate, float TopExpandAngle, float BottomExpandAngle, float SideExpandAngle, float LimitGauge, float LimitRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Get_LandingCourseAssistant");

	AMissionConditionChecker_Get_LandingCourseAssistant_Params params;
	params.TouchdownRate = TouchdownRate;
	params.TopSlopeRate = TopSlopeRate;
	params.BottomSlopeRate = BottomSlopeRate;
	params.SideLineRate = SideLineRate;
	params.TopExpandAngle = TopExpandAngle;
	params.BottomExpandAngle = BottomExpandAngle;
	params.SideExpandAngle = SideExpandAngle;
	params.LimitGauge = LimitGauge;
	params.LimitRoll = LimitRoll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Get_AzimuthOfDegreesToObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             Target                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsRelativePosition            (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_AzimuthOfDegrees ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMissionCondition_AzimuthOfDegrees AMissionConditionChecker::STATIC_Get_AzimuthOfDegreesToObject(class AGameObject* GameObject, class AGameObject* Target, bool bIsRelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Get_AzimuthOfDegreesToObject");

	AMissionConditionChecker_Get_AzimuthOfDegreesToObject_Params params;
	params.GameObject = GameObject;
	params.Target = Target;
	params.bIsRelativePosition = bIsRelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Get_AzimuthOfClockToObject
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             Target                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsRelativePosition            (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_AzimuthOfClock ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMissionCondition_AzimuthOfClock AMissionConditionChecker::STATIC_Get_AzimuthOfClockToObject(class AGameObject* GameObject, class AGameObject* Target, bool bIsRelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Get_AzimuthOfClockToObject");

	AMissionConditionChecker_Get_AzimuthOfClockToObject_Params params;
	params.GameObject = GameObject;
	params.Target = Target;
	params.bIsRelativePosition = bIsRelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Get_AerialRefuellingCourseAssistant
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ThresholdSideDistance          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ThresholdTopDistance           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ThresholdBottomDistance        (Parm, ZeroConstructor, IsPlainOldData)
// float                          SideExpandAngle                (Parm, ZeroConstructor, IsPlainOldData)
// float                          TopExpandAngle                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          BottomExpandAngle              (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitGauge                     (Parm, ZeroConstructor, IsPlainOldData)
// float                          LimitRoll                      (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_MiniGameCourseAssistant ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMissionCondition_MiniGameCourseAssistant AMissionConditionChecker::STATIC_Get_AerialRefuellingCourseAssistant(float ThresholdSideDistance, float ThresholdTopDistance, float ThresholdBottomDistance, float SideExpandAngle, float TopExpandAngle, float BottomExpandAngle, float LimitGauge, float LimitRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Get_AerialRefuellingCourseAssistant");

	AMissionConditionChecker_Get_AerialRefuellingCourseAssistant_Params params;
	params.ThresholdSideDistance = ThresholdSideDistance;
	params.ThresholdTopDistance = ThresholdTopDistance;
	params.ThresholdBottomDistance = ThresholdBottomDistance;
	params.SideExpandAngle = SideExpandAngle;
	params.TopExpandAngle = TopExpandAngle;
	params.BottomExpandAngle = BottomExpandAngle;
	params.LimitGauge = LimitGauge;
	params.LimitRoll = LimitRoll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_WeaponType
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_WeaponType   WeaponType                     (Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             OutWeapon                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_WeaponType(class AWeaponBase* Weapon, EMissionCondition_WeaponType WeaponType, class AWeaponBase** OutWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_WeaponType");

	AMissionConditionChecker_Check_WeaponType_Params params;
	params.Weapon = Weapon;
	params.WeaponType = WeaponType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutWeapon != nullptr)
		*OutWeapon = params.OutWeapon;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_WeaponLockedOnTarget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AWeaponBase*             HitWeapon                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             DamagedObject                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_WeaponLockedOnTarget(class AWeaponBase* HitWeapon, class AGameObject* DamagedObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_WeaponLockedOnTarget");

	AMissionConditionChecker_Check_WeaponLockedOnTarget_Params params;
	params.HitWeapon = HitWeapon;
	params.DamagedObject = DamagedObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_WeaponInCloud
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_WeaponInCloud(class AWeaponBase* Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_WeaponInCloud");

	AMissionConditionChecker_Check_WeaponInCloud_Params params;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_WeaponFired
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionCondition_ObjectSpecificType OwnerType                      (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_ObjectSpecificType TargetType                     (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_WeaponType   WeaponType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_WeaponFired(EMissionCondition_ObjectSpecificType OwnerType, EMissionCondition_ObjectSpecificType TargetType, EMissionCondition_WeaponType WeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_WeaponFired");

	AMissionConditionChecker_Check_WeaponFired_Params params;
	params.OwnerType = OwnerType;
	params.TargetType = TargetType;
	params.WeaponType = WeaponType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_WeaponCountRateLessThanOrEqualTo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            WeaponCount                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxCount                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_WeaponCountRateLessThanOrEqualTo(int WeaponCount, int MaxCount, float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_WeaponCountRateLessThanOrEqualTo");

	AMissionConditionChecker_Check_WeaponCountRateLessThanOrEqualTo_Params params;
	params.WeaponCount = WeaponCount;
	params.MaxCount = MaxCount;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_TeamDeathMatchSituation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_TeamSituation Situation                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_TeamDeathMatchSituation(class AGameObject* GameObject, EMissionCondition_TeamSituation Situation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_TeamDeathMatchSituation");

	AMissionConditionChecker_Check_TeamDeathMatchSituation_Params params;
	params.GameObject = GameObject;
	params.Situation = Situation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_TeamDeathMatchScoreProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Percent                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_TeamDeathMatchScoreProgress(float Percent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_TeamDeathMatchScoreProgress");

	AMissionConditionChecker_Check_TeamDeathMatchScoreProgress_Params params;
	params.Percent = Percent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_TargetPlaneRank
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            Rank                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_TargetPlaneRank(class AGameObject* GameObject, int Rank)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_TargetPlaneRank");

	AMissionConditionChecker_Check_TargetPlaneRank_Params params;
	params.GameObject = GameObject;
	params.Rank = Rank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_TargetLockon
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionCondition_ObjectSpecificType TargetType                     (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_ObjectSpecificType InstigatorType                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_TargetLockon(EMissionCondition_ObjectSpecificType TargetType, EMissionCondition_ObjectSpecificType InstigatorType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_TargetLockon");

	AMissionConditionChecker_Check_TargetLockon_Params params;
	params.TargetType = TargetType;
	params.InstigatorType = InstigatorType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_PhaseNo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            PhaseNo                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_PhaseNo(int PhaseNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_PhaseNo");

	AMissionConditionChecker_Check_PhaseNo_Params params;
	params.PhaseNo = PhaseNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_PhaseElapsedTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_PhaseElapsedTime(float ElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_PhaseElapsedTime");

	AMissionConditionChecker_Check_PhaseElapsedTime_Params params;
	params.ElapsedTime = ElapsedTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_OutOfCombatZone
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAdaptAIFlightBufferDist       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_OutOfCombatZone(class AActor* Actor, bool bAdaptAIFlightBufferDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_OutOfCombatZone");

	AMissionConditionChecker_Check_OutOfCombatZone_Params params;
	params.Actor = Actor;
	params.bAdaptAIFlightBufferDist = bAdaptAIFlightBufferDist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_ObjectType
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_ObjectSpecificType SpecificType                   (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             OutGameObject                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_ObjectType(class AGameObject* GameObject, EMissionCondition_ObjectSpecificType SpecificType, class AGameObject** OutGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_ObjectType");

	AMissionConditionChecker_Check_ObjectType_Params params;
	params.GameObject = GameObject;
	params.SpecificType = SpecificType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutGameObject != nullptr)
		*OutGameObject = params.OutGameObject;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_ObjectDestroyed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionCondition_ObjectSpecificType TargetType                     (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_ObjectSpecificType InstigatorType                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_ObjectDestroyed(EMissionCondition_ObjectSpecificType TargetType, EMissionCondition_ObjectSpecificType InstigatorType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_ObjectDestroyed");

	AMissionConditionChecker_Check_ObjectDestroyed_Params params;
	params.TargetType = TargetType;
	params.InstigatorType = InstigatorType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_ObjectDamaged
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionCondition_ObjectSpecificType TargetType                     (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_ObjectSpecificType InstigatorType                 (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_DamageType   DamageType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_ObjectDamaged(EMissionCondition_ObjectSpecificType TargetType, EMissionCondition_ObjectSpecificType InstigatorType, EMissionCondition_DamageType DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_ObjectDamaged");

	AMissionConditionChecker_Check_ObjectDamaged_Params params;
	params.TargetType = TargetType;
	params.InstigatorType = InstigatorType;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_MissionFailure
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionCondition_FailureType  FailureType                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_MissionFailure(EMissionCondition_FailureType FailureType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_MissionFailure");

	AMissionConditionChecker_Check_MissionFailure_Params params;
	params.FailureType = FailureType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_MissileLostTarget
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionCondition_ObjectSpecificType TargetType                     (Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_ObjectSpecificType OwnerType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_MissileLostTarget(EMissionCondition_ObjectSpecificType TargetType, EMissionCondition_ObjectSpecificType OwnerType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_MissileLostTarget");

	AMissionConditionChecker_Check_MissileLostTarget_Params params;
	params.TargetType = TargetType;
	params.OwnerType = OwnerType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_MiniGameType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionCondition_MiniGameType Type                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_MiniGameType(EMissionCondition_MiniGameType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_MiniGameType");

	AMissionConditionChecker_Check_MiniGameType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_MiniGameDistance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMissionCondition_MiniGameDistanceType Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          ThresholdDistanceMeter         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_MiniGameDistance(EMissionCondition_MiniGameDistanceType Type, float ThresholdDistanceMeter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_MiniGameDistance");

	AMissionConditionChecker_Check_MiniGameDistance_Params params;
	params.Type = Type;
	params.ThresholdDistanceMeter = ThresholdDistanceMeter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_LessMissionTimeLeft
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          CheckTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_LessMissionTimeLeft(float CheckTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_LessMissionTimeLeft");

	AMissionConditionChecker_Check_LessMissionTimeLeft_Params params;
	params.CheckTime = CheckTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_ElapsedTimeSinceEnteredCloud
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             OutGameObject                  (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_ElapsedTimeSinceEnteredCloud(class AGameObject* GameObject, float ElapsedTime, class AGameObject** OutGameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_ElapsedTimeSinceEnteredCloud");

	AMissionConditionChecker_Check_ElapsedTimeSinceEnteredCloud_Params params;
	params.GameObject = GameObject;
	params.ElapsedTime = ElapsedTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutGameObject != nullptr)
		*OutGameObject = params.OutGameObject;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_ElapsedMissionTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          CheckTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_ElapsedMissionTime(float CheckTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_ElapsedMissionTime");

	AMissionConditionChecker_Check_ElapsedMissionTime_Params params;
	params.CheckTime = CheckTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_DistanceFromPlayer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                  Actor                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_DistanceFromPlayer(class AActor* Actor, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_DistanceFromPlayer");

	AMissionConditionChecker_Check_DistanceFromPlayer_Params params;
	params.Actor = Actor;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_BattleRoyalSituation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_BattleRoyalSituation Situation                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_BattleRoyalSituation(class AGameObject* GameObject, EMissionCondition_BattleRoyalSituation Situation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_BattleRoyalSituation");

	AMissionConditionChecker_Check_BattleRoyalSituation_Params params;
	params.GameObject = GameObject;
	params.Situation = Situation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionConditionChecker.Check_BattleRoyalRank
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            Rank                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionConditionChecker::STATIC_Check_BattleRoyalRank(class AGameObject* GameObject, int Rank)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionConditionChecker.Check_BattleRoyalRank");

	AMissionConditionChecker_Check_BattleRoyalRank_Params params;
	params.GameObject = GameObject;
	params.Rank = Rank;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// DelegateFunction Nimbus.MissionEventListener.MissionEventListenerTick__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void AMissionEventListener::MissionEventListenerTick__DelegateSignature(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionEventListener.MissionEventListenerTick__DelegateSignature");

	AMissionEventListener_MissionEventListenerTick__DelegateSignature_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListener.EnableBPEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void AMissionEventListener::EnableBPEvent(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListener.EnableBPEvent");

	AMissionEventListener_EnableBPEvent_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerWeaponCountChanged
// (Native, Public)
// Parameters:
// class AGameObject*             Caucer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            RemainingCount                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            PrevCount                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            MaxCount                       (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerWeaponCountChanged(class AGameObject* Caucer, class AWeaponBase* Weapon, int WeaponNumber, int RemainingCount, int PrevCount, int MaxCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerWeaponCountChanged");

	UMissionEventListenerInterface_HandlerWeaponCountChanged_Params params;
	params.Caucer = Caucer;
	params.Weapon = Weapon;
	params.WeaponNumber = WeaponNumber;
	params.RemainingCount = RemainingCount;
	params.PrevCount = PrevCount;
	params.MaxCount = MaxCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerUnitDestroyed
// (Native, Public)
// Parameters:
// class AUnit*                   Unit                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerUnitDestroyed(class AUnit* Unit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerUnitDestroyed");

	UMissionEventListenerInterface_HandlerUnitDestroyed_Params params;
	params.Unit = Unit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerUnitActivated
// (Native, Public)
// Parameters:
// class AUnit*                   Unit                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerUnitActivated(class AUnit* Unit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerUnitActivated");

	UMissionEventListenerInterface_HandlerUnitActivated_Params params;
	params.Unit = Unit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerTimeElapseSinceEnteredCloud
// (Native, Public)
// Parameters:
// class AGameObject*             Caucer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          PrevElapsedTime                (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerTimeElapseSinceEnteredCloud(class AGameObject* Caucer, float ElapsedTime, float PrevElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerTimeElapseSinceEnteredCloud");

	UMissionEventListenerInterface_HandlerTimeElapseSinceEnteredCloud_Params params;
	params.Caucer = Caucer;
	params.ElapsedTime = ElapsedTime;
	params.PrevElapsedTime = PrevElapsedTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerTGTPEventPhase
// (Native, Public)
// Parameters:
// ETGTP_PhaseType                InPhaseType                    (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerTGTPEventPhase(ETGTP_PhaseType InPhaseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerTGTPEventPhase");

	UMissionEventListenerInterface_HandlerTGTPEventPhase_Params params;
	params.InPhaseType = InPhaseType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventRailgunState
// (Native, Public)
// Parameters:
// class AAIGroundVehicle*        Submarine                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ESubmarineRailgunEvent         Event                          (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerSubmarineEventRailgunState(class AAIGroundVehicle* Submarine, ESubmarineRailgunEvent Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventRailgunState");

	UMissionEventListenerInterface_HandlerSubmarineEventRailgunState_Params params;
	params.Submarine = Submarine;
	params.Event = Event;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventMovedUnderWater
// (Native, Public)
// Parameters:
// class AAIGroundVehicle*        Submarine                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerSubmarineEventMovedUnderWater(class AAIGroundVehicle* Submarine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventMovedUnderWater");

	UMissionEventListenerInterface_HandlerSubmarineEventMovedUnderWater_Params params;
	params.Submarine = Submarine;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventMovedOnWater
// (Native, Public)
// Parameters:
// class AAIGroundVehicle*        Submarine                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerSubmarineEventMovedOnWater(class AAIGroundVehicle* Submarine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventMovedOnWater");

	UMissionEventListenerInterface_HandlerSubmarineEventMovedOnWater_Params params;
	params.Submarine = Submarine;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventCompletedNoseLift
// (Native, Public)
// Parameters:
// class AAIGroundVehicle*        Submarine                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerSubmarineEventCompletedNoseLift(class AAIGroundVehicle* Submarine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventCompletedNoseLift");

	UMissionEventListenerInterface_HandlerSubmarineEventCompletedNoseLift_Params params;
	params.Submarine = Submarine;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventCompletedNoseDown
// (Native, Public)
// Parameters:
// class AAIGroundVehicle*        Submarine                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerSubmarineEventCompletedNoseDown(class AAIGroundVehicle* Submarine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerSubmarineEventCompletedNoseDown");

	UMissionEventListenerInterface_HandlerSubmarineEventCompletedNoseDown_Params params;
	params.Submarine = Submarine;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerSonobuoyEventOccurred
// (Native, Public)
// Parameters:
// class ASystemObjectSonobuoy*   Sonobuoy                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ESonobuoyEvent                 Event                          (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerSonobuoyEventOccurred(class ASystemObjectSonobuoy* Sonobuoy, ESonobuoyEvent Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerSonobuoyEventOccurred");

	UMissionEventListenerInterface_HandlerSonobuoyEventOccurred_Params params;
	params.Sonobuoy = Sonobuoy;
	params.Event = Event;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerRadioMessageEnd
// (Native, Public)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)
// struct FString                 VoiceID                        (Parm, ZeroConstructor)
// bool                           bGroupEnd                      (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerRadioMessageEnd(const struct FString& RadioGroupID, const struct FString& VoiceID, bool bGroupEnd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerRadioMessageEnd");

	UMissionEventListenerInterface_HandlerRadioMessageEnd_Params params;
	params.RadioGroupID = RadioGroupID;
	params.VoiceID = VoiceID;
	params.bGroupEnd = bGroupEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerRadioMessageBegin
// (Native, Public)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)
// struct FString                 VoiceID                        (Parm, ZeroConstructor)

void UMissionEventListenerInterface::HandlerRadioMessageBegin(const struct FString& RadioGroupID, const struct FString& VoiceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerRadioMessageBegin");

	UMissionEventListenerInterface_HandlerRadioMessageBegin_Params params;
	params.RadioGroupID = RadioGroupID;
	params.VoiceID = VoiceID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerRadioGroupBegin
// (Native, Public)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)

void UMissionEventListenerInterface::HandlerRadioGroupBegin(const struct FString& RadioGroupID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerRadioGroupBegin");

	UMissionEventListenerInterface_HandlerRadioGroupBegin_Params params;
	params.RadioGroupID = RadioGroupID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerPlayerDead
// (Native, Public)
// Parameters:
// EMissionCondition_PlayerDeadReason DeadReason                     (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerPlayerDead(EMissionCondition_PlayerDeadReason DeadReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerPlayerDead");

	UMissionEventListenerInterface_HandlerPlayerDead_Params params;
	params.DeadReason = DeadReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectToObjectEventOccurred
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             Target                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_ObjectToObjectEvent Event                          (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectToObjectEventOccurred(class AGameObject* Causer, class AGameObject* Target, EMissionCondition_ObjectToObjectEvent Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectToObjectEventOccurred");

	UMissionEventListenerInterface_HandlerObjectToObjectEventOccurred_Params params;
	params.Causer = Causer;
	params.Target = Target;
	params.Event = Event;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectTakeDamage
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             DamagedTarget                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             WeaponEntity                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             WeaponTypeCDO                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          Damage                         (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectTakeDamage(class AGameObject* Causer, class AGameObject* DamagedTarget, class AWeaponBase* WeaponEntity, class AWeaponBase* WeaponTypeCDO, float Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectTakeDamage");

	UMissionEventListenerInterface_HandlerObjectTakeDamage_Params params;
	params.Causer = Causer;
	params.DamagedTarget = DamagedTarget;
	params.WeaponEntity = WeaponEntity;
	params.WeaponTypeCDO = WeaponTypeCDO;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectLostLockon
// (Native, Public)
// Parameters:
// class AGameObject*             Caucer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             LcokonTarget                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_LostLockonCause Cause                          (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectLostLockon(class AGameObject* Caucer, class AGameObject* LcokonTarget, EMissionCondition_LostLockonCause Cause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectLostLockon");

	UMissionEventListenerInterface_HandlerObjectLostLockon_Params params;
	params.Caucer = Caucer;
	params.LcokonTarget = LcokonTarget;
	params.Cause = Cause;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectLockon
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             LockonTarget                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectLockon(class AGameObject* Causer, class AGameObject* LockonTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectLockon");

	UMissionEventListenerInterface_HandlerObjectLockon_Params params;
	params.Causer = Causer;
	params.LockonTarget = LockonTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectKilledByPlayer
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ESubFaction                    SubFaction                     (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectKilledByPlayer(class AGameObject* Causer, ESubFaction SubFaction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectKilledByPlayer");

	UMissionEventListenerInterface_HandlerObjectKilledByPlayer_Params params;
	params.Causer = Causer;
	params.SubFaction = SubFaction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectInterceptWeapon
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             InterceptedShooter             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             InterceptedWeapon              (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectInterceptWeapon(class AGameObject* Causer, class AWeaponBase* Weapon, class AGameObject* InterceptedShooter, class AWeaponBase* InterceptedWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectInterceptWeapon");

	UMissionEventListenerInterface_HandlerObjectInterceptWeapon_Params params;
	params.Causer = Causer;
	params.Weapon = Weapon;
	params.InterceptedShooter = InterceptedShooter;
	params.InterceptedWeapon = InterceptedWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectGetBehind
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             ChaseTarget                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectGetBehind(class AGameObject* Causer, class AGameObject* ChaseTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectGetBehind");

	UMissionEventListenerInterface_HandlerObjectGetBehind_Params params;
	params.Causer = Causer;
	params.ChaseTarget = ChaseTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectFoundTarget
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             TrackingTarget                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectFoundTarget(class AGameObject* Causer, class AGameObject* TrackingTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectFoundTarget");

	UMissionEventListenerInterface_HandlerObjectFoundTarget_Params params;
	params.Causer = Causer;
	params.TrackingTarget = TrackingTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectFireWeapon
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             WeaponTarget                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectFireWeapon(class AGameObject* Causer, class AGameObject* WeaponTarget, class AWeaponBase* Weapon, int WeaponNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectFireWeapon");

	UMissionEventListenerInterface_HandlerObjectFireWeapon_Params params;
	params.Causer = Causer;
	params.WeaponTarget = WeaponTarget;
	params.Weapon = Weapon;
	params.WeaponNumber = WeaponNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectFireFlare
// (Native, Public)
// Parameters:
// class AGameObject*             Caucer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            RemainingCount                 (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectFireFlare(class AGameObject* Caucer, int RemainingCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectFireFlare");

	UMissionEventListenerInterface_HandlerObjectFireFlare_Params params;
	params.Caucer = Caucer;
	params.RemainingCount = RemainingCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectEventOccurred
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_ObjectEvent  Event                          (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectEventOccurred(class AGameObject* Causer, EMissionCondition_ObjectEvent Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectEventOccurred");

	UMissionEventListenerInterface_HandlerObjectEventOccurred_Params params;
	params.Causer = Causer;
	params.Event = Event;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerObjectDestroyed
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             DestroyedTarget                (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             TargetLockonTarget             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             HitWeapon                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             HitWeaponTypeCDO               (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerObjectDestroyed(class AGameObject* Causer, class AGameObject* DestroyedTarget, class AGameObject* TargetLockonTarget, class AWeaponBase* HitWeapon, class AWeaponBase* HitWeaponTypeCDO)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerObjectDestroyed");

	UMissionEventListenerInterface_HandlerObjectDestroyed_Params params;
	params.Causer = Causer;
	params.DestroyedTarget = DestroyedTarget;
	params.TargetLockonTarget = TargetLockonTarget;
	params.HitWeapon = HitWeapon;
	params.HitWeaponTypeCDO = HitWeaponTypeCDO;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerMissionTimeElapse
// (Native, Public)
// Parameters:
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          PrevElapsedTime                (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeLeft                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          PrevTimeLeft                   (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerMissionTimeElapse(float ElapsedTime, float PrevElapsedTime, float TimeLeft, float PrevTimeLeft)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerMissionTimeElapse");

	UMissionEventListenerInterface_HandlerMissionTimeElapse_Params params;
	params.ElapsedTime = ElapsedTime;
	params.PrevElapsedTime = PrevElapsedTime;
	params.TimeLeft = TimeLeft;
	params.PrevTimeLeft = PrevTimeLeft;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerMissionPhaseStart
// (Native, Public)
// Parameters:
// int                            PhaseNo                        (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerMissionPhaseStart(int PhaseNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerMissionPhaseStart");

	UMissionEventListenerInterface_HandlerMissionPhaseStart_Params params;
	params.PhaseNo = PhaseNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerMissionFailed
// (Native, Public)
// Parameters:
// EMissionCondition_FailureType  FailureType                    (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerMissionFailed(EMissionCondition_FailureType FailureType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerMissionFailed");

	UMissionEventListenerInterface_HandlerMissionFailed_Params params;
	params.FailureType = FailureType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerMissionAccomplished
// (Native, Public)

void UMissionEventListenerInterface::HandlerMissionAccomplished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerMissionAccomplished");

	UMissionEventListenerInterface_HandlerMissionAccomplished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerMissileLostTarget
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             MissileTarget                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerMissileLostTarget(class AGameObject* Causer, class AGameObject* MissileTarget, class AWeaponBase* Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerMissileLostTarget");

	UMissionEventListenerInterface_HandlerMissileLostTarget_Params params;
	params.Causer = Causer;
	params.MissileTarget = MissileTarget;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerMiniGamePlayingTick
// (Native, Public)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerMiniGamePlayingTick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerMiniGamePlayingTick");

	UMissionEventListenerInterface_HandlerMiniGamePlayingTick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerMiniGameEventOccurred
// (Native, Public)
// Parameters:
// EMissionCondition_MiniGameEvent Event                          (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerMiniGameEventOccurred(EMissionCondition_MiniGameEvent Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerMiniGameEventOccurred");

	UMissionEventListenerInterface_HandlerMiniGameEventOccurred_Params params;
	params.Event = Event;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerMADEventPhase
// (Native, Public)
// Parameters:
// EMAD_SearchType                InPhaseType                    (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerMADEventPhase(EMAD_SearchType InPhaseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerMADEventPhase");

	UMissionEventListenerInterface_HandlerMADEventPhase_Params params;
	params.InPhaseType = InPhaseType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerLostTargetJammerEnd
// (Native, Public)

void UMissionEventListenerInterface::HandlerLostTargetJammerEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerLostTargetJammerEnd");

	UMissionEventListenerInterface_HandlerLostTargetJammerEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerDisplayTargetLocator
// (Native, Public)
// Parameters:
// class AGameObject*             Target                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerDisplayTargetLocator(class AGameObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerDisplayTargetLocator");

	UMissionEventListenerInterface_HandlerDisplayTargetLocator_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerDisplaySystemMessage
// (Native, Public)
// Parameters:
// EMissionCondition_SystemMessageType MessageType                    (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerDisplaySystemMessage(EMissionCondition_SystemMessageType MessageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerDisplaySystemMessage");

	UMissionEventListenerInterface_HandlerDisplaySystemMessage_Params params;
	params.MessageType = MessageType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerCloudStateChanged
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_CloudEvent   CloudEvent                     (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerCloudStateChanged(class AGameObject* Causer, EMissionCondition_CloudEvent CloudEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerCloudStateChanged");

	UMissionEventListenerInterface_HandlerCloudStateChanged_Params params;
	params.Causer = Causer;
	params.CloudEvent = CloudEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionEventListenerInterface.HandlerChangedMultiplayerState
// (Native, Public)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMissionCondition_MultiplayerEvent Event                          (Parm, ZeroConstructor, IsPlainOldData)

void UMissionEventListenerInterface::HandlerChangedMultiplayerState(class AGameObject* Causer, EMissionCondition_MultiplayerEvent Event)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionEventListenerInterface.HandlerChangedMultiplayerState");

	UMissionEventListenerInterface_HandlerChangedMultiplayerState_Params params;
	params.Causer = Causer;
	params.Event = Event;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionFadeSoundManager.OnPreUnpauseBusHandler
// (Final, Native, Private)
// Parameters:
// ENimbusSoundType               BusType                        (Parm, ZeroConstructor, IsPlainOldData)

void UMissionFadeSoundManager::OnPreUnpauseBusHandler(ENimbusSoundType BusType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionFadeSoundManager.OnPreUnpauseBusHandler");

	UMissionFadeSoundManager_OnPreUnpauseBusHandler_Params params;
	params.BusType = BusType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionFadeSoundManager.OnPreStopBusHandler
// (Final, Native, Private)
// Parameters:
// ENimbusSoundType               BusType                        (Parm, ZeroConstructor, IsPlainOldData)

void UMissionFadeSoundManager::OnPreStopBusHandler(ENimbusSoundType BusType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionFadeSoundManager.OnPreStopBusHandler");

	UMissionFadeSoundManager_OnPreStopBusHandler_Params params;
	params.BusType = BusType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionFadeSoundManager.OnPrePauseBusHandler
// (Final, Native, Private)
// Parameters:
// ENimbusSoundType               BusType                        (Parm, ZeroConstructor, IsPlainOldData)

void UMissionFadeSoundManager::OnPrePauseBusHandler(ENimbusSoundType BusType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionFadeSoundManager.OnPrePauseBusHandler");

	UMissionFadeSoundManager_OnPrePauseBusHandler_Params params;
	params.BusType = BusType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionFadeSoundManager.OnPostStopBusHandler
// (Final, Native, Private)
// Parameters:
// ENimbusSoundType               BusType                        (Parm, ZeroConstructor, IsPlainOldData)

void UMissionFadeSoundManager::OnPostStopBusHandler(ENimbusSoundType BusType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionFadeSoundManager.OnPostStopBusHandler");

	UMissionFadeSoundManager_OnPostStopBusHandler_Params params;
	params.BusType = BusType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionFadeSoundManager.OnFadeOutHandler
// (Final, Native, Private)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UMissionFadeSoundManager::OnFadeOutHandler(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionFadeSoundManager.OnFadeOutHandler");

	UMissionFadeSoundManager_OnFadeOutHandler_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionFadeSoundManager.OnFadeInHandler
// (Final, Native, Private)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UMissionFadeSoundManager::OnFadeInHandler(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionFadeSoundManager.OnFadeInHandler");

	UMissionFadeSoundManager_OnFadeInHandler_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionFadeSoundManager.OnFadedOutHandler
// (Final, Native, Private)

void UMissionFadeSoundManager::OnFadedOutHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionFadeSoundManager.OnFadedOutHandler");

	UMissionFadeSoundManager_OnFadedOutHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionFadeSoundManager.OnFadedInHandler
// (Final, Native, Private)

void UMissionFadeSoundManager::OnFadedInHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionFadeSoundManager.OnFadedInHandler");

	UMissionFadeSoundManager_OnFadedInHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionIGCPlayer.OnStartSkipFadeOut__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bStopBGM                       (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           OverrideStopBGMEvent           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UMissionIGCPlayer::OnStartSkipFadeOut__DelegateSignature(bool bStopBGM, class UAkAudioEvent* OverrideStopBGMEvent, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionIGCPlayer.OnStartSkipFadeOut__DelegateSignature");

	UMissionIGCPlayer_OnStartSkipFadeOut__DelegateSignature_Params params;
	params.bStopBGM = bStopBGM;
	params.OverrideStopBGMEvent = OverrideStopBGMEvent;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionIGCPlayer.OnIgcCameraChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ACameraActor*            NewCameraActor                 (Parm, ZeroConstructor, IsPlainOldData)

void UMissionIGCPlayer::OnIgcCameraChanged__DelegateSignature(class ACameraActor* NewCameraActor)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionIGCPlayer.OnIgcCameraChanged__DelegateSignature");

	UMissionIGCPlayer_OnIgcCameraChanged__DelegateSignature_Params params;
	params.NewCameraActor = NewCameraActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionIGCPlayer.OnFadeOutHandler
// (Final, Native, Private)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UMissionIGCPlayer::OnFadeOutHandler(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionIGCPlayer.OnFadeOutHandler");

	UMissionIGCPlayer_OnFadeOutHandler_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionObjectiveBase.Reset
// (Native, Event, Public, BlueprintEvent)

void UMissionObjectiveBase::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionObjectiveBase.Reset");

	UMissionObjectiveBase_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionObjectiveBase.GetPlayerPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerPlane*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerPlane* UMissionObjectiveBase::GetPlayerPlane()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionObjectiveBase.GetPlayerPlane");

	UMissionObjectiveBase_GetPlayerPlane_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionObjectiveBase.CheckObjectiveStatus
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)
// EObjectiveStatus               ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EObjectiveStatus UMissionObjectiveBase::CheckObjectiveStatus(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionObjectiveBase.CheckObjectiveStatus");

	UMissionObjectiveBase_CheckObjectiveStatus_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// DelegateFunction Nimbus.MiniGameTakeoffState.OnSuccessTakeoffDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          ElapsedTime                    (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameTakeoffState::OnSuccessTakeoffDelegate__DelegateSignature(float ElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameTakeoffState.OnSuccessTakeoffDelegate__DelegateSignature");

	UMiniGameTakeoffState_OnSuccessTakeoffDelegate__DelegateSignature_Params params;
	params.ElapsedTime = ElapsedTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameTakeoffState.OnStartTakeoffPlayableDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameTakeoffState::OnStartTakeoffPlayableDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameTakeoffState.OnStartTakeoffPlayableDelegate__DelegateSignature");

	UMiniGameTakeoffState_OnStartTakeoffPlayableDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameTakeoffState.OnStartTakeoffDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameTakeoffState::OnStartTakeoffDelegate__DelegateSignature(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameTakeoffState.OnStartTakeoffDelegate__DelegateSignature");

	UMiniGameTakeoffState_OnStartTakeoffDelegate__DelegateSignature_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameTakeoffState.OnSkipDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameTakeoffState::OnSkipDelegate__DelegateSignature(float FadeOutDuration)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameTakeoffState.OnSkipDelegate__DelegateSignature");

	UMiniGameTakeoffState_OnSkipDelegate__DelegateSignature_Params params;
	params.FadeOutDuration = FadeOutDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameTakeoffState.OnPlayerEndTakeoffHandler
// (Final, Native, Private)

void UMiniGameTakeoffState::OnPlayerEndTakeoffHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameTakeoffState.OnPlayerEndTakeoffHandler");

	UMiniGameTakeoffState_OnPlayerEndTakeoffHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameTakeoffState.OnPlayerBeginCatapultTakeoffHandler
// (Final, Native, Private)

void UMiniGameTakeoffState::OnPlayerBeginCatapultTakeoffHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameTakeoffState.OnPlayerBeginCatapultTakeoffHandler");

	UMiniGameTakeoffState_OnPlayerBeginCatapultTakeoffHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameTakeoffState.OnFinishTakeoffDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UMiniGameTakeoffState::OnFinishTakeoffDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameTakeoffState.OnFinishTakeoffDelegate__DelegateSignature");

	UMiniGameTakeoffState_OnFinishTakeoffDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MiniGameTakeoffState.OnFailTakeoffDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EMissionStateMiniGameFailReason Reason                         (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameTakeoffState::OnFailTakeoffDelegate__DelegateSignature(EMissionStateMiniGameFailReason Reason)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MiniGameTakeoffState.OnFailTakeoffDelegate__DelegateSignature");

	UMiniGameTakeoffState_OnFailTakeoffDelegate__DelegateSignature_Params params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MiniGameTakeoffState.OnFadeOutHandler
// (Final, Native, Private)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UMiniGameTakeoffState::OnFadeOutHandler(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MiniGameTakeoffState.OnFadeOutHandler");

	UMiniGameTakeoffState_OnFadeOutHandler_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionPhase.StartMiniGame
// (Final, Native, Public, BlueprintCallable)

void AMissionPhase::StartMiniGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.StartMiniGame");

	AMissionPhase_StartMiniGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionPhase.ShouldShowNavyMiniGameLevels
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AMissionPhase::ShouldShowNavyMiniGameLevels()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.ShouldShowNavyMiniGameLevels");

	AMissionPhase_ShouldShowNavyMiniGameLevels_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// DelegateFunction Nimbus.MissionPhase.OnTimeIsUp__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void AMissionPhase::OnTimeIsUp__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnTimeIsUp__DelegateSignature");

	AMissionPhase_OnTimeIsUp__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionPhase.OnSkipMiniGamePhaseHandler
// (Final, Native, Private)
// Parameters:
// float                          FadeOutDuration                (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnSkipMiniGamePhaseHandler(float FadeOutDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.OnSkipMiniGamePhaseHandler");

	AMissionPhase_OnSkipMiniGamePhaseHandler_Params params;
	params.FadeOutDuration = FadeOutDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionPhase.OnReferencedActorEndPlayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnReferencedActorEndPlayHandler(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.OnReferencedActorEndPlayHandler");

	AMissionPhase_OnReferencedActorEndPlayHandler_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionPhase.OnPreStartMiniGamePhaseHandler
// (Final, Native, Private)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnPreStartMiniGamePhaseHandler(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.OnPreStartMiniGamePhaseHandler");

	AMissionPhase_OnPreStartMiniGamePhaseHandler_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhase.OnChangeWayPointState__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bReached                       (Parm, ZeroConstructor, IsPlainOldData)
// class ASystemObjectWayPointMarker* WayPointMarker                 (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnChangeWayPointState__DelegateSignature(bool bReached, class ASystemObjectWayPointMarker* WayPointMarker)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnChangeWayPointState__DelegateSignature");

	AMissionPhase_OnChangeWayPointState__DelegateSignature_Params params;
	params.bReached = bReached;
	params.WayPointMarker = WayPointMarker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhase.OnChangeSearchLightState__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bInside                        (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnChangeSearchLightState__DelegateSignature(bool bInside)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnChangeSearchLightState__DelegateSignature");

	AMissionPhase_OnChangeSearchLightState__DelegateSignature_Params params;
	params.bInside = bInside;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhase.OnChangeRestrictedAltitudeState__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bOver                          (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnChangeRestrictedAltitudeState__DelegateSignature(bool bOver)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnChangeRestrictedAltitudeState__DelegateSignature");

	AMissionPhase_OnChangeRestrictedAltitudeState__DelegateSignature_Params params;
	params.bOver = bOver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhase.OnChangeRadarAreaState__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bInside                        (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnChangeRadarAreaState__DelegateSignature(bool bInside)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnChangeRadarAreaState__DelegateSignature");

	AMissionPhase_OnChangeRadarAreaState__DelegateSignature_Params params;
	params.bInside = bInside;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhase.OnChangePulloutLineState__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bBeyond                        (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnChangePulloutLineState__DelegateSignature(bool bBeyond)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnChangePulloutLineState__DelegateSignature");

	AMissionPhase_OnChangePulloutLineState__DelegateSignature_Params params;
	params.bBeyond = bBeyond;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhase.OnChangeJammingAreaState__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bInside                        (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnChangeJammingAreaState__DelegateSignature(bool bInside)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnChangeJammingAreaState__DelegateSignature");

	AMissionPhase_OnChangeJammingAreaState__DelegateSignature_Params params;
	params.bInside = bInside;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhase.OnChangeImpactAreaState__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                           bInside                        (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnChangeImpactAreaState__DelegateSignature(bool bInside)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnChangeImpactAreaState__DelegateSignature");

	AMissionPhase_OnChangeImpactAreaState__DelegateSignature_Params params;
	params.bInside = bInside;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhase.OnAddMissionScore__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// int                            CurrentMissionScore            (Parm, ZeroConstructor, IsPlainOldData)
// int                            ObjectiveMissionScore          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAchieved                      (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::OnAddMissionScore__DelegateSignature(int CurrentMissionScore, int ObjectiveMissionScore, bool bAchieved)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhase.OnAddMissionScore__DelegateSignature");

	AMissionPhase_OnAddMissionScore__DelegateSignature_Params params;
	params.CurrentMissionScore = CurrentMissionScore;
	params.ObjectiveMissionScore = ObjectiveMissionScore;
	params.bAchieved = bAchieved;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionPhase.GetStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPhaseStatus                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EPhaseStatus AMissionPhase::GetStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.GetStatus");

	AMissionPhase_GetStatus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionPhase.GetMissionPhaseTimeLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AMissionPhase::GetMissionPhaseTimeLeft()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.GetMissionPhaseTimeLeft");

	AMissionPhase_GetMissionPhaseTimeLeft_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionPhase.GetElapsedMissionPhaseTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AMissionPhase::GetElapsedMissionPhaseTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.GetElapsedMissionPhaseTime");

	AMissionPhase_GetElapsedMissionPhaseTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MissionPhase.ForceUpdateStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPhaseStatus                   NewStatus                      (Parm, ZeroConstructor, IsPlainOldData)

void AMissionPhase::ForceUpdateStatus(EPhaseStatus NewStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.ForceUpdateStatus");

	AMissionPhase_ForceUpdateStatus_Params params;
	params.NewStatus = NewStatus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionPhase.CompleteMiniGame
// (Final, Native, Public, BlueprintCallable)

void AMissionPhase::CompleteMiniGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhase.CompleteMiniGame");

	AMissionPhase_CompleteMiniGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhaseState.OnSuccessPhaseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)

void UMissionPhaseState::OnSuccessPhaseDelegate__DelegateSignature(class AMissionPhase* MissionPhase)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhaseState.OnSuccessPhaseDelegate__DelegateSignature");

	UMissionPhaseState_OnSuccessPhaseDelegate__DelegateSignature_Params params;
	params.MissionPhase = MissionPhase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhaseState.OnStartPhaseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bRestart                       (Parm, ZeroConstructor, IsPlainOldData)

void UMissionPhaseState::OnStartPhaseDelegate__DelegateSignature(class AMissionPhase* MissionPhase, bool bRestart)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhaseState.OnStartPhaseDelegate__DelegateSignature");

	UMissionPhaseState_OnStartPhaseDelegate__DelegateSignature_Params params;
	params.MissionPhase = MissionPhase;
	params.bRestart = bRestart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionPhaseState.OnReferencedActorEndPlayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void UMissionPhaseState::OnReferencedActorEndPlayHandler(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionPhaseState.OnReferencedActorEndPlayHandler");

	UMissionPhaseState_OnReferencedActorEndPlayHandler_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionPhaseState.OnFailPhaseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)
// EMissionStatePhaseFailReason   Reason                         (Parm, ZeroConstructor, IsPlainOldData)

void UMissionPhaseState::OnFailPhaseDelegate__DelegateSignature(class AMissionPhase* MissionPhase, EMissionStatePhaseFailReason Reason)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionPhaseState.OnFailPhaseDelegate__DelegateSignature");

	UMissionPhaseState_OnFailPhaseDelegate__DelegateSignature_Params params;
	params.MissionPhase = MissionPhase;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionSetupFrameManager.OnPostGarbageCollectHandler
// (Final, Native, Private)

void UMissionSetupFrameManager::OnPostGarbageCollectHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionSetupFrameManager.OnPostGarbageCollectHandler");

	UMissionSetupFrameManager_OnPostGarbageCollectHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.UIManagerActor.RemoveAllMenus
// (Final, Native, Protected, BlueprintCallable)

void AUIManagerActor::RemoveAllMenus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIManagerActor.RemoveAllMenus");

	AUIManagerActor_RemoveAllMenus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.UIManagerActor.OpenMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMenuIDs                       MenuID                         (Parm, ZeroConstructor, IsPlainOldData)

void AUIManagerActor::OpenMenu(EMenuIDs MenuID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIManagerActor.OpenMenu");

	AUIManagerActor_OpenMenu_Params params;
	params.MenuID = MenuID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.UIManagerActor.OnSetCurrentUIManagerActor
// (Final, Native, Public)

void AUIManagerActor::OnSetCurrentUIManagerActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIManagerActor.OnSetCurrentUIManagerActor");

	AUIManagerActor_OnSetCurrentUIManagerActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.UIManagerActor.OnEvaluateGlowPulsing
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AUIManagerActor::OnEvaluateGlowPulsing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIManagerActor.OnEvaluateGlowPulsing");

	AUIManagerActor_OnEvaluateGlowPulsing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.UIManagerActor.GetCurrentUIManagerActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AUIManagerActor*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AUIManagerActor* AUIManagerActor::STATIC_GetCurrentUIManagerActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIManagerActor.GetCurrentUIManagerActor");

	AUIManagerActor_GetCurrentUIManagerActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.UIManagerActor.CloseMenuAndResumePlay
// (Final, Native, Public, BlueprintCallable)

void AUIManagerActor::CloseMenuAndResumePlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIManagerActor.CloseMenuAndResumePlay");

	AUIManagerActor_CloseMenuAndResumePlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionUIManagerActor.StartDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EDebugModeState                InDebugState                   (Parm, ZeroConstructor, IsPlainOldData)

void AMissionUIManagerActor::STATIC_StartDebug(EDebugModeState InDebugState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionUIManagerActor.StartDebug");

	AMissionUIManagerActor_StartDebug_Params params;
	params.InDebugState = InDebugState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionUIManagerActor.SetupDebugUI
// (Event, Public, BlueprintEvent)
// Parameters:
// EDebugModeState                InDebugState                   (Parm, ZeroConstructor, IsPlainOldData)

void AMissionUIManagerActor::SetupDebugUI(EDebugModeState InDebugState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionUIManagerActor.SetupDebugUI");

	AMissionUIManagerActor_SetupDebugUI_Params params;
	params.InDebugState = InDebugState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionUIManagerActor.OnReplay
// (Final, Native, Public)

void AMissionUIManagerActor::OnReplay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionUIManagerActor.OnReplay");

	AMissionUIManagerActor_OnReplay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionUIManagerActor.OnMissionSuccess
// (Final, Native, Public, BlueprintCallable)

void AMissionUIManagerActor::OnMissionSuccess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionUIManagerActor.OnMissionSuccess");

	AMissionUIManagerActor_OnMissionSuccess_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionUIManagerActor.OnMissionResupply
// (Final, Native, Public, BlueprintCallable)

void AMissionUIManagerActor::OnMissionResupply()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionUIManagerActor.OnMissionResupply");

	AMissionUIManagerActor_OnMissionResupply_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionUIManagerActor.OnMissionFail
// (Final, Native, Public, BlueprintCallable)

void AMissionUIManagerActor::OnMissionFail()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionUIManagerActor.OnMissionFail");

	AMissionUIManagerActor_OnMissionFail_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MonoEyeColorChangeComponent.OnRestored
// (Final, Native, Public)

void UMonoEyeColorChangeComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MonoEyeColorChangeComponent.OnRestored");

	UMonoEyeColorChangeComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MovieSubtitleWidget.OnAnalyzeAnimationStart
// (Event, Protected, BlueprintEvent)

void UMovieSubtitleWidget::OnAnalyzeAnimationStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MovieSubtitleWidget.OnAnalyzeAnimationStart");

	UMovieSubtitleWidget_OnAnalyzeAnimationStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MovieSubtitleWidget.OnAnalyzeAnimationShow
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void UMovieSubtitleWidget::OnAnalyzeAnimationShow(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MovieSubtitleWidget.OnAnalyzeAnimationShow");

	UMovieSubtitleWidget_OnAnalyzeAnimationShow_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MovieSubtitleWidget.OnAnalyzeAnimationEnd
// (Event, Protected, BlueprintEvent)

void UMovieSubtitleWidget::OnAnalyzeAnimationEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MovieSubtitleWidget.OnAnalyzeAnimationEnd");

	UMovieSubtitleWidget_OnAnalyzeAnimationEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiCreateSessionWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiCreateSessionWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiCreateSessionWidget.OnDialogItemAccepted");

	UMultiCreateSessionWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionSupplyPhaseState.OnSuccessPhaseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms, HasDefaults)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RestartLocation                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                RestartRotation                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void UMissionSupplyPhaseState::OnSuccessPhaseDelegate__DelegateSignature(class AMissionPhase* MissionPhase, const struct FVector& RestartLocation, const struct FRotator& RestartRotation)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionSupplyPhaseState.OnSuccessPhaseDelegate__DelegateSignature");

	UMissionSupplyPhaseState_OnSuccessPhaseDelegate__DelegateSignature_Params params;
	params.MissionPhase = MissionPhase;
	params.RestartLocation = RestartLocation;
	params.RestartRotation = RestartRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.MissionSupplyPhaseState.OnStartPhaseDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AMissionPhase*           MissionPhase                   (Parm, ZeroConstructor, IsPlainOldData)

void UMissionSupplyPhaseState::OnStartPhaseDelegate__DelegateSignature(class AMissionPhase* MissionPhase)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.MissionSupplyPhaseState.OnStartPhaseDelegate__DelegateSignature");

	UMissionSupplyPhaseState_OnStartPhaseDelegate__DelegateSignature_Params params;
	params.MissionPhase = MissionPhase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MissionSupplyPhaseState.OnReferencedActorEndPlayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void UMissionSupplyPhaseState::OnReferencedActorEndPlayHandler(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MissionSupplyPhaseState.OnReferencedActorEndPlayHandler");

	UMissionSupplyPhaseState_OnReferencedActorEndPlayHandler_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiInvitationTransitionWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiInvitationTransitionWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiInvitationTransitionWidget.OnDialogItemAccepted");

	UMultiInvitationTransitionWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiLobbyWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiLobbyWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiLobbyWidget.OnDialogItemAccepted");

	UMultiLobbyWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiMenuMainWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiMenuMainWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiMenuMainWidget.OnDialogItemAccepted");

	UMultiMenuMainWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiIGCTargetPoint.MultiIGCTest
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// EMultiplayerIGCType            IGCType                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            IGCIndex                       (Parm, ZeroConstructor, IsPlainOldData)

void AMultiIGCTargetPoint::MultiIGCTest(EMultiplayerIGCType IGCType, int IGCIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiIGCTargetPoint.MultiIGCTest");

	AMultiIGCTargetPoint_MultiIGCTest_Params params;
	params.IGCType = IGCType;
	params.IGCIndex = IGCIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiplayerScoreCalculator.CalculateShootScore
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                          DamagePercentage               (Parm, ZeroConstructor, IsPlainOldData)
// int                            EnemyBasePoint                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          CostDifferenceModifier         (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlacementModifier              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMultiplayerScoreCalculator::CalculateShootScore(float DamagePercentage, int EnemyBasePoint, float CostDifferenceModifier, float PlacementModifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiplayerScoreCalculator.CalculateShootScore");

	UMultiplayerScoreCalculator_CalculateShootScore_Params params;
	params.DamagePercentage = DamagePercentage;
	params.EnemyBasePoint = EnemyBasePoint;
	params.CostDifferenceModifier = CostDifferenceModifier;
	params.PlacementModifier = PlacementModifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MultiplayerScoreCalculator.CalculateRankingXP
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                          PlayingTimePercentage          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Score                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlayerNumberModifier           (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMultiplayerScoreCalculator::CalculateRankingXP(float PlayingTimePercentage, int Score, float PlayerNumberModifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiplayerScoreCalculator.CalculateRankingXP");

	UMultiplayerScoreCalculator_CalculateRankingXP_Params params;
	params.PlayingTimePercentage = PlayingTimePercentage;
	params.Score = Score;
	params.PlayerNumberModifier = PlayerNumberModifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MultiplayerScoreCalculator.CalculateMRP
// (Native, Event, Protected, HasOutParms, BlueprintEvent, Const)
// Parameters:
// int                            BaseMatchResultReward          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ScoreReward                    (Parm, ZeroConstructor, IsPlainOldData)
// int                            PerformanceReward              (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlayerNumberModifier           (Parm, ZeroConstructor, IsPlainOldData)
// float                          CrashPenaltyModifier           (Parm, ZeroConstructor, IsPlainOldData)
// float                          OutMRPCoefficient              (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          OutScoreCoefficient            (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          PartsBonus                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMultiplayerScoreCalculator::CalculateMRP(int BaseMatchResultReward, int ScoreReward, int PerformanceReward, float PlayerNumberModifier, float CrashPenaltyModifier, float PartsBonus, float* OutMRPCoefficient, float* OutScoreCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiplayerScoreCalculator.CalculateMRP");

	UMultiplayerScoreCalculator_CalculateMRP_Params params;
	params.BaseMatchResultReward = BaseMatchResultReward;
	params.ScoreReward = ScoreReward;
	params.PerformanceReward = PerformanceReward;
	params.PlayerNumberModifier = PlayerNumberModifier;
	params.CrashPenaltyModifier = CrashPenaltyModifier;
	params.PartsBonus = PartsBonus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMRPCoefficient != nullptr)
		*OutMRPCoefficient = params.OutMRPCoefficient;
	if (OutScoreCoefficient != nullptr)
		*OutScoreCoefficient = params.OutScoreCoefficient;

	return params.ReturnValue;
}


// Function Nimbus.MultiplayerScoreCalculator.CalculateKillScore
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// int                            EnemyBasePoint                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          CostDifferenceModifier         (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlacementModifier              (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMultiplayerScoreCalculator::CalculateKillScore(int EnemyBasePoint, float CostDifferenceModifier, float PlacementModifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiplayerScoreCalculator.CalculateKillScore");

	UMultiplayerScoreCalculator_CalculateKillScore_Params params;
	params.EnemyBasePoint = EnemyBasePoint;
	params.CostDifferenceModifier = CostDifferenceModifier;
	params.PlacementModifier = PlacementModifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MultiplayerScoreCalculator.CalculateCrashScore
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// int                            CrashedPlaneBasePoint          (Parm, ZeroConstructor, IsPlainOldData)
// float                          PlacementModifier              (Parm, ZeroConstructor, IsPlainOldData)
// int                            CrashCount                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMultiplayerScoreCalculator::CalculateCrashScore(int CrashedPlaneBasePoint, float PlacementModifier, int CrashCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiplayerScoreCalculator.CalculateCrashScore");

	UMultiplayerScoreCalculator_CalculateCrashScore_Params params;
	params.CrashedPlaneBasePoint = CrashedPlaneBasePoint;
	params.PlacementModifier = PlacementModifier;
	params.CrashCount = CrashCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MultiplayerScoreCalculator.CalculateAssistScore
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                          DamagePercentage               (Parm, ZeroConstructor, IsPlainOldData)
// int                            EnemyBasePoint                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UMultiplayerScoreCalculator::CalculateAssistScore(float DamagePercentage, int EnemyBasePoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiplayerScoreCalculator.CalculateAssistScore");

	UMultiplayerScoreCalculator_CalculateAssistScore_Params params;
	params.DamagePercentage = DamagePercentage;
	params.EnemyBasePoint = EnemyBasePoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.MultiResultBaseWidget.ChangeScreen
// (Final, Native, Private)

void UMultiResultBaseWidget::ChangeScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiResultBaseWidget.ChangeScreen");

	UMultiResultBaseWidget_ChangeScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiQuickMatchWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiQuickMatchWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiQuickMatchWidget.OnDialogItemAccepted");

	UMultiQuickMatchWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiResultWinLoseWidget.ProceedToNextAnimationPhase
// (Final, Native, Private)

void UMultiResultWinLoseWidget::ProceedToNextAnimationPhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiResultWinLoseWidget.ProceedToNextAnimationPhase");

	UMultiResultWinLoseWidget_ProceedToNextAnimationPhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiReviveWidget.OnReparCompleteAnimationFinished
// (Final, Native, Private)

void UMultiReviveWidget::OnReparCompleteAnimationFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiReviveWidget.OnReparCompleteAnimationFinished");

	UMultiReviveWidget_OnReparCompleteAnimationFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiSessionCommonWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiSessionCommonWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiSessionCommonWidget.OnDialogItemAccepted");

	UMultiSessionCommonWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiSessionConfirmWidget.OnSelectAcceptButton
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                           bAccepted                      (Parm, ZeroConstructor, IsPlainOldData)

void UMultiSessionConfirmWidget::OnSelectAcceptButton(bool bAccepted)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiSessionConfirmWidget.OnSelectAcceptButton");

	UMultiSessionConfirmWidget_OnSelectAcceptButton_Params params;
	params.bAccepted = bAccepted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiSessionConfirmWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiSessionConfirmWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiSessionConfirmWidget.OnDialogItemAccepted");

	UMultiSessionConfirmWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiSessionResultWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiSessionResultWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiSessionResultWidget.OnDialogItemAccepted");

	UMultiSessionResultWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiSessionWidget.OnDialogItemAccepted
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FDialogData             DialogData                     (ConstParm, Parm, OutParm, ReferenceParm)

void UMultiSessionWidget::OnDialogItemAccepted(const struct FDialogData& DialogData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiSessionWidget.OnDialogItemAccepted");

	UMultiSessionWidget_OnDialogItemAccepted_Params params;
	params.DialogData = DialogData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiSimpleVoiceChatWidget.OnHUDEnabled
// (Native, Protected)

void UMultiSimpleVoiceChatWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiSimpleVoiceChatWidget.OnHUDEnabled");

	UMultiSimpleVoiceChatWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiSimpleVoiceChatWidget.OnHUDDisabled
// (Native, Protected)

void UMultiSimpleVoiceChatWidget::OnHUDDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiSimpleVoiceChatWidget.OnHUDDisabled");

	UMultiSimpleVoiceChatWidget_OnHUDDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusAssetLoader.OnPostWorldCleanupHandler
// (Final, Native, Protected)
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSessionEnded                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCleanupResources              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusAssetLoader::OnPostWorldCleanupHandler(class UWorld* World, bool bSessionEnded, bool bCleanupResources)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusAssetLoader.OnPostWorldCleanupHandler");

	UNimbusAssetLoader_OnPostWorldCleanupHandler_Params params;
	params.World = World;
	params.bSessionEnded = bSessionEnded;
	params.bCleanupResources = bCleanupResources;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusAssetLoader.OnPostGarbageCollectHandler
// (Final, Native, Protected)

void UNimbusAssetLoader::OnPostGarbageCollectHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusAssetLoader.OnPostGarbageCollectHandler");

	UNimbusAssetLoader_OnPostGarbageCollectHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.WaitSpecialActionEnd
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)
// class AAIPlane*                AIPlane                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_WaitSpecialActionEnd(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class AAIPlane* AIPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.WaitSpecialActionEnd");

	UNimbusBlueprintLibrary_WaitSpecialActionEnd_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LatentInfo = LatentInfo;
	params.AIPlane = AIPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.WaitImpactCameraCompletion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)

void UNimbusBlueprintLibrary::STATIC_WaitImpactCameraCompletion(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.WaitImpactCameraCompletion");

	UNimbusBlueprintLibrary_WaitImpactCameraCompletion_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LatentInfo = LatentInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.UUToMeter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_UUToMeter(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.UUToMeter");

	UNimbusBlueprintLibrary_UUToMeter_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.UUpsToMps
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_UUpsToMps(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.UUpsToMps");

	UNimbusBlueprintLibrary_UUpsToMps_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.UUpsToKmph
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_UUpsToKmph(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.UUpsToKmph");

	UNimbusBlueprintLibrary_UUpsToKmph_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.UpdateMaterialAnimation
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*  SkeletalMeshComp               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// TArray<int>                    MaterialIndexArray             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FName>           ParamNames                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<float>                  ParamValues                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UNimbusBlueprintLibrary::STATIC_UpdateMaterialAnimation(class USkeletalMeshComponent* SkeletalMeshComp, TArray<int> MaterialIndexArray, TArray<struct FName> ParamNames, TArray<float> ParamValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.UpdateMaterialAnimation");

	UNimbusBlueprintLibrary_UpdateMaterialAnimation_Params params;
	params.SkeletalMeshComp = SkeletalMeshComp;
	params.MaterialIndexArray = MaterialIndexArray;
	params.ParamNames = ParamNames;
	params.ParamValues = ParamValues;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.UpdateBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           BGMUpdateEvent                 (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_UpdateBGM(class UAkAudioEvent* BGMUpdateEvent, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.UpdateBGM");

	UNimbusBlueprintLibrary_UpdateBGM_Params params;
	params.BGMUpdateEvent = BGMUpdateEvent;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.ToggleVisibilityForEngineer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Target                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_ToggleVisibilityForEngineer(class USceneComponent* Target, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.ToggleVisibilityForEngineer");

	UNimbusBlueprintLibrary_ToggleVisibilityForEngineer_Params params;
	params.Target = Target;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.TestStopNimbusMatinee
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMatineeActor*           MatineeActor                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_TestStopNimbusMatinee(class AMatineeActor* MatineeActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.TestStopNimbusMatinee");

	UNimbusBlueprintLibrary_TestStopNimbusMatinee_Params params;
	params.MatineeActor = MatineeActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.TestPlayNimbusMatinee
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMatineeActor*           MatineeActor                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_TestPlayNimbusMatinee(class AMatineeActor* MatineeActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.TestPlayNimbusMatinee");

	UNimbusBlueprintLibrary_TestPlayNimbusMatinee_Params params;
	params.MatineeActor = MatineeActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.TerminateNimbusMatinee
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMatineeActor*           MatineeActor                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_TerminateNimbusMatinee(class AMatineeActor* MatineeActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.TerminateNimbusMatinee");

	UNimbusBlueprintLibrary_TerminateNimbusMatinee_Params params;
	params.MatineeActor = MatineeActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.SwitchRadar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EMiniMapType                   MiniMapType                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_SwitchRadar(EMiniMapType MiniMapType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.SwitchRadar");

	UNimbusBlueprintLibrary_SwitchRadar_Params params;
	params.MiniMapType = MiniMapType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StopRailgunAiming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class URailgunControliComponent* InRailgunControliComponent     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StopRailgunAiming(class UObject* WorldContextObject, class URailgunControliComponent* InRailgunControliComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StopRailgunAiming");

	UNimbusBlueprintLibrary_StopRailgunAiming_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InRailgunControliComponent = InRailgunControliComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StopNimbusCameraShakeAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StopNimbusCameraShakeAll(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StopNimbusCameraShakeAll");

	UNimbusBlueprintLibrary_StopNimbusCameraShakeAll_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StopNimbusCameraShake
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ENimbusCameraShakeType         InType                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StopNimbusCameraShake(class UObject* WorldContextObject, ENimbusCameraShakeType InType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StopNimbusCameraShake");

	UNimbusBlueprintLibrary_StopNimbusCameraShake_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InType = InType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StopImpactCamera
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StopImpactCamera(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StopImpactCamera");

	UNimbusBlueprintLibrary_StopImpactCamera_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StopBGMImmediately
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StopBGMImmediately(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StopBGMImmediately");

	UNimbusBlueprintLibrary_StopBGMImmediately_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StopBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           OverrideBGMStopEvent           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StopBGM(class UObject* WorldContextObject, class UAkAudioEvent* OverrideBGMStopEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StopBGM");

	UNimbusBlueprintLibrary_StopBGM_Params params;
	params.WorldContextObject = WorldContextObject;
	params.OverrideBGMStopEvent = OverrideBGMStopEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StereoStartFadingBackground
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFadeIn                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StereoStartFadingBackground(class UObject* WorldContextObject, bool bFadeIn, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StereoStartFadingBackground");

	UNimbusBlueprintLibrary_StereoStartFadingBackground_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bFadeIn = bFadeIn;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StereoRemoveWidgetFromViewport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*             InWidget                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StereoRemoveWidgetFromViewport(class UUserWidget* InWidget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StereoRemoveWidgetFromViewport");

	UNimbusBlueprintLibrary_StereoRemoveWidgetFromViewport_Params params;
	params.InWidget = InWidget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StereoAddWidgetToViewport
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*             InWidget                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            ZOrder                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInEnableBg                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StereoAddWidgetToViewport(class UUserWidget* InWidget, int ZOrder, bool bInEnableBg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StereoAddWidgetToViewport");

	UNimbusBlueprintLibrary_StereoAddWidgetToViewport_Params params;
	params.InWidget = InWidget;
	params.ZOrder = ZOrder;
	params.bInEnableBg = bInEnableBg;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StartRemainingDistance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ApproachTarget                 (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AGameObject*>     ApproachGameObjects            (Parm, ZeroConstructor)
// float                          GoalRadiusMeter                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StartRemainingDistance(class UObject* WorldContextObject, class AActor* ApproachTarget, TArray<class AGameObject*> ApproachGameObjects, float GoalRadiusMeter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StartRemainingDistance");

	UNimbusBlueprintLibrary_StartRemainingDistance_Params params;
	params.WorldContextObject = WorldContextObject;
	params.ApproachTarget = ApproachTarget;
	params.ApproachGameObjects = ApproachGameObjects;
	params.GoalRadiusMeter = GoalRadiusMeter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StartRailgunAiming
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FLatentActionInfo       LatentInfo                     (Parm)
// class URailgunControliComponent* InRailgunControliComponent     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AGameObject*             InTarget                       (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  RailgunTargetClass             (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UNimbusBlueprintLibrary::STATIC_StartRailgunAiming(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class URailgunControliComponent* InRailgunControliComponent, class AGameObject* InTarget, class UClass* RailgunTargetClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StartRailgunAiming");

	UNimbusBlueprintLibrary_StartRailgunAiming_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LatentInfo = LatentInfo;
	params.InRailgunControliComponent = InRailgunControliComponent;
	params.InTarget = InTarget;
	params.RailgunTargetClass = RailgunTargetClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.StartMissionPhase
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 Arg                            (Parm, ZeroConstructor)
// EMissionPhaseProceedStatus     OutputBranch                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StartMissionPhase(const struct FString& Arg, EMissionPhaseProceedStatus* OutputBranch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StartMissionPhase");

	UNimbusBlueprintLibrary_StartMissionPhase_Params params;
	params.Arg = Arg;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutputBranch != nullptr)
		*OutputBranch = params.OutputBranch;
}


// Function Nimbus.NimbusBlueprintLibrary.StartMagneticAnomalyDetectorByClassBP
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  MADComponentClassBP            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StartMagneticAnomalyDetectorByClassBP(class UObject* WorldContextObject, class UClass* MADComponentClassBP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StartMagneticAnomalyDetectorByClassBP");

	UNimbusBlueprintLibrary_StartMagneticAnomalyDetectorByClassBP_Params params;
	params.WorldContextObject = WorldContextObject;
	params.MADComponentClassBP = MADComponentClassBP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StartMagneticAnomalyDetector
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDebugDisplay                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          SearchDistance                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          SearchDownwardAngle            (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxSearchRadius                (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             SearchDistanceRange            (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             ObservationRange               (Parm, ZeroConstructor, IsPlainOldData)
// EMADObservationOption          ObservationOption              (Parm, ZeroConstructor, IsPlainOldData)
// EMADObservationWaveDirectionOption ObservationWaveDirectionOption (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxVibrationScale              (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             WaveNumRange                   (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             WaveOffsetRange                (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             WaveMinRatioRange              (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             WaveMaxRatioRange              (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             WaveMaxIntervalRange           (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             WaveMaxTimeRange               (Parm, ZeroConstructor, IsPlainOldData)
// EMADObservationWaveReferenceOption WaveScaleReference             (Parm, ZeroConstructor, IsPlainOldData)
// EMADObservationWaveReferenceOption WaveNumReference               (Parm, ZeroConstructor, IsPlainOldData)
// EMADObservationWaveReferenceOption WaveOffsetReference            (Parm, ZeroConstructor, IsPlainOldData)
// EMADObservationWaveReferenceOption WaveMinReference               (Parm, ZeroConstructor, IsPlainOldData)
// EMADObservationWaveReferenceOption WaveMaxReference               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSearchUnderMode               (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StartMagneticAnomalyDetector(class UObject* WorldContextObject, bool bDebugDisplay, float SearchDistance, float SearchDownwardAngle, float MaxSearchRadius, class UCurveFloat* SearchDistanceRange, class UCurveFloat* ObservationRange, EMADObservationOption ObservationOption, EMADObservationWaveDirectionOption ObservationWaveDirectionOption, float MaxVibrationScale, class UCurveFloat* WaveNumRange, class UCurveFloat* WaveOffsetRange, class UCurveFloat* WaveMinRatioRange, class UCurveFloat* WaveMaxRatioRange, class UCurveFloat* WaveMaxIntervalRange, class UCurveFloat* WaveMaxTimeRange, EMADObservationWaveReferenceOption WaveScaleReference, EMADObservationWaveReferenceOption WaveNumReference, EMADObservationWaveReferenceOption WaveOffsetReference, EMADObservationWaveReferenceOption WaveMinReference, EMADObservationWaveReferenceOption WaveMaxReference, bool bSearchUnderMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StartMagneticAnomalyDetector");

	UNimbusBlueprintLibrary_StartMagneticAnomalyDetector_Params params;
	params.WorldContextObject = WorldContextObject;
	params.bDebugDisplay = bDebugDisplay;
	params.SearchDistance = SearchDistance;
	params.SearchDownwardAngle = SearchDownwardAngle;
	params.MaxSearchRadius = MaxSearchRadius;
	params.SearchDistanceRange = SearchDistanceRange;
	params.ObservationRange = ObservationRange;
	params.ObservationOption = ObservationOption;
	params.ObservationWaveDirectionOption = ObservationWaveDirectionOption;
	params.MaxVibrationScale = MaxVibrationScale;
	params.WaveNumRange = WaveNumRange;
	params.WaveOffsetRange = WaveOffsetRange;
	params.WaveMinRatioRange = WaveMinRatioRange;
	params.WaveMaxRatioRange = WaveMaxRatioRange;
	params.WaveMaxIntervalRange = WaveMaxIntervalRange;
	params.WaveMaxTimeRange = WaveMaxTimeRange;
	params.WaveScaleReference = WaveScaleReference;
	params.WaveNumReference = WaveNumReference;
	params.WaveOffsetReference = WaveOffsetReference;
	params.WaveMinReference = WaveMinReference;
	params.WaveMaxReference = WaveMaxReference;
	params.bSearchUnderMode = bSearchUnderMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.StartDisplayTimer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          TotalTime                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEmergency                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TriggerEventWhenEnd            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_StartDisplayTimer(float TotalTime, bool bIsEmergency, const struct FName& TriggerEventWhenEnd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.StartDisplayTimer");

	UNimbusBlueprintLibrary_StartDisplayTimer_Params params;
	params.TotalTime = TotalTime;
	params.bIsEmergency = bIsEmergency;
	params.TriggerEventWhenEnd = TriggerEventWhenEnd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.SpawnExplosionWeapon
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AGameObject*             OwnerGameObject                (Parm, ZeroConstructor, IsPlainOldData)
// class UClass*                  WeaponClass                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SpawnLocation                  (Parm, IsPlainOldData)
// class AWeaponBase*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWeaponBase* UNimbusBlueprintLibrary::STATIC_SpawnExplosionWeapon(class AGameObject* OwnerGameObject, class UClass* WeaponClass, const struct FVector& SpawnLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.SpawnExplosionWeapon");

	UNimbusBlueprintLibrary_SpawnExplosionWeapon_Params params;
	params.OwnerGameObject = OwnerGameObject;
	params.WeaponClass = WeaponClass;
	params.SpawnLocation = SpawnLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.SetVisibilityForEngineer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*         Target                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bNewVisibility                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bPropagateToChildren           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_SetVisibilityForEngineer(class USceneComponent* Target, bool bNewVisibility, bool bPropagateToChildren)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.SetVisibilityForEngineer");

	UNimbusBlueprintLibrary_SetVisibilityForEngineer_Params params;
	params.Target = Target;
	params.bNewVisibility = bNewVisibility;
	params.bPropagateToChildren = bPropagateToChildren;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.SetNearClipDistance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          NewDistance                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_SetNearClipDistance(float NewDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.SetNearClipDistance");

	UNimbusBlueprintLibrary_SetNearClipDistance_Params params;
	params.NewDistance = NewDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.SetComponentTickEnabledForEngineer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*         Target                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_SetComponentTickEnabledForEngineer(class UActorComponent* Target, bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.SetComponentTickEnabledForEngineer");

	UNimbusBlueprintLibrary_SetComponentTickEnabledForEngineer_Params params;
	params.Target = Target;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.SetActorHiddenInGameForEngineerToArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class AActor*>          Target                         (Parm, ZeroConstructor)
// bool                           bNewHidden                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_SetActorHiddenInGameForEngineerToArray(TArray<class AActor*> Target, bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.SetActorHiddenInGameForEngineerToArray");

	UNimbusBlueprintLibrary_SetActorHiddenInGameForEngineerToArray_Params params;
	params.Target = Target;
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.SetActorHiddenInGameForEngineer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNewHidden                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_SetActorHiddenInGameForEngineer(class AActor* Target, bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.SetActorHiddenInGameForEngineer");

	UNimbusBlueprintLibrary_SetActorHiddenInGameForEngineer_Params params;
	params.Target = Target;
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.SaveAndUseIGCCamera
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMatineeActor*           MatineeActor                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_SaveAndUseIGCCamera(class AMatineeActor* MatineeActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.SaveAndUseIGCCamera");

	UNimbusBlueprintLibrary_SaveAndUseIGCCamera_Params params;
	params.MatineeActor = MatineeActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.ResetTutorialMessage
// (Final, Native, Static, Public, BlueprintCallable)

void UNimbusBlueprintLibrary::STATIC_ResetTutorialMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.ResetTutorialMessage");

	UNimbusBlueprintLibrary_ResetTutorialMessage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.ResetParticlesCall
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent* ParticleSystem                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bEmptyInstances                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_ResetParticlesCall(class UParticleSystemComponent* ParticleSystem, bool bEmptyInstances)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.ResetParticlesCall");

	UNimbusBlueprintLibrary_ResetParticlesCall_Params params;
	params.ParticleSystem = ParticleSystem;
	params.bEmptyInstances = bEmptyInstances;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.ResetNearClipDistance
// (Final, Native, Static, Public, BlueprintCallable)

void UNimbusBlueprintLibrary::STATIC_ResetNearClipDistance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.ResetNearClipDistance");

	UNimbusBlueprintLibrary_ResetNearClipDistance_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.ReplaceTextureReference
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTexture*                OriginalTexture                (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture*                NewTexture                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_ReplaceTextureReference(class UTexture* OriginalTexture, class UTexture* NewTexture)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.ReplaceTextureReference");

	UNimbusBlueprintLibrary_ReplaceTextureReference_Params params;
	params.OriginalTexture = OriginalTexture;
	params.NewTexture = NewTexture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.Project
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                 Pos                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FMatrix                 ViewProjMtx                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               ViewSize                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector2D UNimbusBlueprintLibrary::STATIC_Project(const struct FVector& Pos, const struct FMatrix& ViewProjMtx, const struct FVector2D& ViewSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.Project");

	UNimbusBlueprintLibrary_Project_Params params;
	params.Pos = Pos;
	params.ViewProjMtx = ViewProjMtx;
	params.ViewSize = ViewSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.PostEvent2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           akevent                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_PostEvent2D(class UAkAudioEvent* akevent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PostEvent2D");

	UNimbusBlueprintLibrary_PostEvent2D_Params params;
	params.akevent = akevent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.PlayRadioText
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       InPlayerController             (Parm, ZeroConstructor, IsPlainOldData)
// class UTexture2D*              InComWindowImage               (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 InSpeakerName                  (Parm, ZeroConstructor)
// struct FString                 InMessage                      (Parm, ZeroConstructor)
// bool                           bHasWarning                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FSlateColor             InSpeakerColor                 (Parm)
// struct FSlateColor             InMessageColor                 (Parm)

void UNimbusBlueprintLibrary::STATIC_PlayRadioText(class APlayerController* InPlayerController, class UTexture2D* InComWindowImage, const struct FString& InSpeakerName, const struct FString& InMessage, bool bHasWarning, const struct FSlateColor& InSpeakerColor, const struct FSlateColor& InMessageColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PlayRadioText");

	UNimbusBlueprintLibrary_PlayRadioText_Params params;
	params.InPlayerController = InPlayerController;
	params.InComWindowImage = InComWindowImage;
	params.InSpeakerName = InSpeakerName;
	params.InMessage = InMessage;
	params.bHasWarning = bHasWarning;
	params.InSpeakerColor = InSpeakerColor;
	params.InMessageColor = InMessageColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.PlayNimbusMatinee
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMatineeActor*           MatineeActor                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_PlayNimbusMatinee(class AMatineeActor* MatineeActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PlayNimbusMatinee");

	UNimbusBlueprintLibrary_PlayNimbusMatinee_Params params;
	params.MatineeActor = MatineeActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.PlayNimbusCameraShake_DistanceLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ENimbusCameraShakeType         InType                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 InLocation                     (Parm, IsPlainOldData)
// class UCurveFloat*             OverrideDistanceScaleCurve     (Parm, ZeroConstructor, IsPlainOldData)
// class UCurveFloat*             OverrideFovScaleCurve          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_PlayNimbusCameraShake_DistanceLocation(class UObject* WorldContextObject, ENimbusCameraShakeType InType, const struct FVector& InLocation, class UCurveFloat* OverrideDistanceScaleCurve, class UCurveFloat* OverrideFovScaleCurve)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PlayNimbusCameraShake_DistanceLocation");

	UNimbusBlueprintLibrary_PlayNimbusCameraShake_DistanceLocation_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InType = InType;
	params.InLocation = InLocation;
	params.OverrideDistanceScaleCurve = OverrideDistanceScaleCurve;
	params.OverrideFovScaleCurve = OverrideFovScaleCurve;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.PlayNimbusCameraShake
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// ENimbusCameraShakeType         InType                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDistanceMeter                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_PlayNimbusCameraShake(class UObject* WorldContextObject, ENimbusCameraShakeType InType, float InDistanceMeter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PlayNimbusCameraShake");

	UNimbusBlueprintLibrary_PlayNimbusCameraShake_Params params;
	params.WorldContextObject = WorldContextObject;
	params.InType = InType;
	params.InDistanceMeter = InDistanceMeter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.PlayImpactCamera
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  FocusObject1                   (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  FocusObject2                   (Parm, ZeroConstructor, IsPlainOldData)
// EImpactCameraPlayCategory      InPlayCategory                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CameraName                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInAutoEnd                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnemyDestruction              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_PlayImpactCamera(class AActor* FocusObject1, class AActor* FocusObject2, EImpactCameraPlayCategory InPlayCategory, const struct FName& CameraName, bool bInAutoEnd, bool bEnemyDestruction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PlayImpactCamera");

	UNimbusBlueprintLibrary_PlayImpactCamera_Params params;
	params.FocusObject1 = FocusObject1;
	params.FocusObject2 = FocusObject2;
	params.InPlayCategory = InPlayCategory;
	params.CameraName = CameraName;
	params.bInAutoEnd = bInAutoEnd;
	params.bEnemyDestruction = bEnemyDestruction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.PlayBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           BGMPlayEvent                   (Parm, ZeroConstructor, IsPlainOldData)
// class UAkAudioEvent*           BGMStopEvent                   (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_PlayBGM(class UAkAudioEvent* BGMPlayEvent, class UAkAudioEvent* BGMStopEvent, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PlayBGM");

	UNimbusBlueprintLibrary_PlayBGM_Params params;
	params.BGMPlayEvent = BGMPlayEvent;
	params.BGMStopEvent = BGMStopEvent;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.PingPositionOnRadar
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class APlayerController*       InPlayerController             (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 PingPosition                   (Parm, IsPlainOldData)
// ENimbusPingType                InPingType                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_PingPositionOnRadar(class APlayerController* InPlayerController, const struct FVector& PingPosition, ENimbusPingType InPingType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PingPositionOnRadar");

	UNimbusBlueprintLibrary_PingPositionOnRadar_Params params;
	params.InPlayerController = InPlayerController;
	params.PingPosition = PingPosition;
	params.InPingType = InPingType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.PingObjectsOnRadar
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class APlayerController*       InPlayerController             (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AGameObject*>     ObjectsToPing                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// ENimbusPingType                InPingType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShowContainerName              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_PingObjectsOnRadar(class APlayerController* InPlayerController, TArray<class AGameObject*> ObjectsToPing, ENimbusPingType InPingType, bool ShowContainerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PingObjectsOnRadar");

	UNimbusBlueprintLibrary_PingObjectsOnRadar_Params params;
	params.InPlayerController = InPlayerController;
	params.ObjectsToPing = ObjectsToPing;
	params.InPingType = InPingType;
	params.ShowContainerName = ShowContainerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.PingObjectOnRadar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*       InPlayerController             (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             ObjectToPing                   (Parm, ZeroConstructor, IsPlainOldData)
// ENimbusPingType                InPingType                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ShowContainerName              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_PingObjectOnRadar(class APlayerController* InPlayerController, class AGameObject* ObjectToPing, ENimbusPingType InPingType, bool ShowContainerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.PingObjectOnRadar");

	UNimbusBlueprintLibrary_PingObjectOnRadar_Params params;
	params.InPlayerController = InPlayerController;
	params.ObjectToPing = ObjectToPing;
	params.InPingType = InPingType;
	params.ShowContainerName = ShowContainerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.OverridePostProcessSettingForIGCCockpitView
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACameraActor*            InCameraActor                  (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_OverridePostProcessSettingForIGCCockpitView(class ACameraActor* InCameraActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.OverridePostProcessSettingForIGCCockpitView");

	UNimbusBlueprintLibrary_OverridePostProcessSettingForIGCCockpitView_Params params;
	params.InCameraActor = InCameraActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.OverridePostProcessMaterialBlendWeightForIGC
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACameraActor*            InCameraActor                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          BlendWeight                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_OverridePostProcessMaterialBlendWeightForIGC(class ACameraActor* InCameraActor, float BlendWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.OverridePostProcessMaterialBlendWeightForIGC");

	UNimbusBlueprintLibrary_OverridePostProcessMaterialBlendWeightForIGC_Params params;
	params.InCameraActor = InCameraActor;
	params.BlendWeight = BlendWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.NimbusUnLoadLevelInstance
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// class ULevelStreamingKismet*   UnloadLevel                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOutSuccess                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_NimbusUnLoadLevelInstance(class UObject* WorldContextObject, class ULevelStreamingKismet* UnloadLevel, bool* bOutSuccess)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.NimbusUnLoadLevelInstance");

	UNimbusBlueprintLibrary_NimbusUnLoadLevelInstance_Params params;
	params.WorldContextObject = WorldContextObject;
	params.UnloadLevel = UnloadLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bOutSuccess != nullptr)
		*bOutSuccess = params.bOutSuccess;
}


// Function Nimbus.NimbusBlueprintLibrary.NimbusSetDrawTypeLocalToView
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class USceneComponent*         SceneComponent                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bUseLTV                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceUpdateTransform          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bOutLTVFlag                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_NimbusSetDrawTypeLocalToView(class USceneComponent* SceneComponent, bool bUseLTV, bool bForceUpdateTransform, bool* bOutLTVFlag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.NimbusSetDrawTypeLocalToView");

	UNimbusBlueprintLibrary_NimbusSetDrawTypeLocalToView_Params params;
	params.SceneComponent = SceneComponent;
	params.bUseLTV = bUseLTV;
	params.bForceUpdateTransform = bForceUpdateTransform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bOutLTVFlag != nullptr)
		*bOutLTVFlag = params.bOutLTVFlag;
}


// Function Nimbus.NimbusBlueprintLibrary.NimbusOpenLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   LevelName                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_NimbusOpenLevel(class UObject* WorldContextObject, const struct FName& LevelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.NimbusOpenLevel");

	UNimbusBlueprintLibrary_NimbusOpenLevel_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.NimbusLoadLevelInstance
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 LevelName                      (Parm, ZeroConstructor)
// struct FVector                 Location                       (ConstParm, Parm, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, IsPlainOldData)
// bool                           bOutSuccess                    (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// class ULevelStreamingKismet*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ULevelStreamingKismet* UNimbusBlueprintLibrary::STATIC_NimbusLoadLevelInstance(class UObject* WorldContextObject, const struct FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.NimbusLoadLevelInstance");

	UNimbusBlueprintLibrary_NimbusLoadLevelInstance_Params params;
	params.WorldContextObject = WorldContextObject;
	params.LevelName = LevelName;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bOutSuccess != nullptr)
		*bOutSuccess = params.bOutSuccess;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.NimbusDrawLine
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPaintContext           Context                        (Parm, OutParm, ReferenceParm)
// struct FVector2D               PositionA                      (Parm, IsPlainOldData)
// struct FVector2D               PositionB                      (Parm, IsPlainOldData)
// int                            Layer                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Tint                           (Parm, IsPlainOldData)
// bool                           bAntiAlias                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_NimbusDrawLine(const struct FVector2D& PositionA, const struct FVector2D& PositionB, int Layer, const struct FLinearColor& Tint, bool bAntiAlias, struct FPaintContext* Context)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.NimbusDrawLine");

	UNimbusBlueprintLibrary_NimbusDrawLine_Params params;
	params.PositionA = PositionA;
	params.PositionB = PositionB;
	params.Layer = Layer;
	params.Tint = Tint;
	params.bAntiAlias = bAntiAlias;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Context != nullptr)
		*Context = params.Context;
}


// Function Nimbus.NimbusBlueprintLibrary.NimbusDrawBox
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPaintContext           Context                        (Parm, OutParm, ReferenceParm)
// struct FVector2D               Position                       (Parm, IsPlainOldData)
// struct FVector2D               Size                           (Parm, IsPlainOldData)
// class USlateBrushAsset*        Brush                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Layer                          (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Tint                           (Parm, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_NimbusDrawBox(const struct FVector2D& Position, const struct FVector2D& Size, class USlateBrushAsset* Brush, int Layer, const struct FLinearColor& Tint, struct FPaintContext* Context)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.NimbusDrawBox");

	UNimbusBlueprintLibrary_NimbusDrawBox_Params params;
	params.Position = Position;
	params.Size = Size;
	params.Brush = Brush;
	params.Layer = Layer;
	params.Tint = Tint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Context != nullptr)
		*Context = params.Context;
}


// Function Nimbus.NimbusBlueprintLibrary.MpsToUUps
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_MpsToUUps(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.MpsToUUps");

	UNimbusBlueprintLibrary_MpsToUUps_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.MpsToKmph
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_MpsToKmph(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.MpsToKmph");

	UNimbusBlueprintLibrary_MpsToKmph_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.MeterToUU
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_MeterToUU(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.MeterToUU");

	UNimbusBlueprintLibrary_MeterToUU_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.KmphToUUps
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_KmphToUUps(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.KmphToUUps");

	UNimbusBlueprintLibrary_KmphToUUps_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.KmphToMps
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_KmphToMps(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.KmphToMps");

	UNimbusBlueprintLibrary_KmphToMps_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsWithEditorOnlyData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsWithEditorOnlyData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsWithEditorOnlyData");

	UNimbusBlueprintLibrary_IsWithEditorOnlyData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsThisObjectInClouds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             GameObject                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsThisObjectInClouds(class AGameObject* GameObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsThisObjectInClouds");

	UNimbusBlueprintLibrary_IsThisObjectInClouds_Params params;
	params.GameObject = GameObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsReplaying
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsReplaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsReplaying");

	UNimbusBlueprintLibrary_IsReplaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsPlaykillCameraWithImpactCamera
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsPlaykillCameraWithImpactCamera(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsPlaykillCameraWithImpactCamera");

	UNimbusBlueprintLibrary_IsPlaykillCameraWithImpactCamera_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsPlacedInIGCLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsPlacedInIGCLevel(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsPlacedInIGCLevel");

	UNimbusBlueprintLibrary_IsPlacedInIGCLevel_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsLastInputDeviceGamepad
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsLastInputDeviceGamepad()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsLastInputDeviceGamepad");

	UNimbusBlueprintLibrary_IsLastInputDeviceGamepad_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsInHangar
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsInHangar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsInHangar");

	UNimbusBlueprintLibrary_IsInHangar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsGamepadConnected
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsGamepadConnected()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsGamepadConnected");

	UNimbusBlueprintLibrary_IsGamepadConnected_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsDebugMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bAllowTestBuild                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsDebugMode(bool bAllowTestBuild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsDebugMode");

	UNimbusBlueprintLibrary_IsDebugMode_Params params;
	params.bAllowTestBuild = bAllowTestBuild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.IsDebug
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_IsDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.IsDebug");

	UNimbusBlueprintLibrary_IsDebug_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.HideAllActorsForSceneCapture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D* CaptureComp                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  ExceptActor                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_HideAllActorsForSceneCapture(class USceneCaptureComponent2D* CaptureComp, class AActor* ExceptActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.HideAllActorsForSceneCapture");

	UNimbusBlueprintLibrary_HideAllActorsForSceneCapture_Params params;
	params.CaptureComp = CaptureComp;
	params.ExceptActor = ExceptActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.GetRevision
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UNimbusBlueprintLibrary::STATIC_GetRevision()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetRevision");

	UNimbusBlueprintLibrary_GetRevision_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetRemainingDistanceComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UApproachDistObservationComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UApproachDistObservationComponent* UNimbusBlueprintLibrary::STATIC_GetRemainingDistanceComponent(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetRemainingDistanceComponent");

	UNimbusBlueprintLibrary_GetRemainingDistanceComponent_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetPlayerPlane
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PlayerIndex                    (Parm, ZeroConstructor, IsPlainOldData)
// class APlayerPlane*            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class APlayerPlane* UNimbusBlueprintLibrary::STATIC_GetPlayerPlane(class UObject* WorldContextObject, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetPlayerPlane");

	UNimbusBlueprintLibrary_GetPlayerPlane_Params params;
	params.WorldContextObject = WorldContextObject;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetPlayerKillObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* UNimbusBlueprintLibrary::STATIC_GetPlayerKillObject(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetPlayerKillObject");

	UNimbusBlueprintLibrary_GetPlayerKillObject_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetNearestPointDistance
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 LineSegmentA                   (Parm, IsPlainOldData)
// struct FVector                 LineSegmentB                   (Parm, IsPlainOldData)
// struct FVector                 CheckLocation                  (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_GetNearestPointDistance(const struct FVector& LineSegmentA, const struct FVector& LineSegmentB, const struct FVector& CheckLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetNearestPointDistance");

	UNimbusBlueprintLibrary_GetNearestPointDistance_Params params;
	params.LineSegmentA = LineSegmentA;
	params.LineSegmentB = LineSegmentB;
	params.CheckLocation = CheckLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetNearestPoint
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 LineSegmentA                   (Parm, IsPlainOldData)
// struct FVector                 LineSegmentB                   (Parm, IsPlainOldData)
// struct FVector                 CheckLocation                  (Parm, IsPlainOldData)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector UNimbusBlueprintLibrary::STATIC_GetNearestPoint(const struct FVector& LineSegmentA, const struct FVector& LineSegmentB, const struct FVector& CheckLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetNearestPoint");

	UNimbusBlueprintLibrary_GetNearestPoint_Params params;
	params.LineSegmentA = LineSegmentA;
	params.LineSegmentB = LineSegmentB;
	params.CheckLocation = CheckLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetMissionClearFlag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_GetMissionClearFlag(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetMissionClearFlag");

	UNimbusBlueprintLibrary_GetMissionClearFlag_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetMADComponent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UMagneticAnomalyDetectorComponent* ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMagneticAnomalyDetectorComponent* UNimbusBlueprintLibrary::STATIC_GetMADComponent(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetMADComponent");

	UNimbusBlueprintLibrary_GetMADComponent_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetGamePlatform
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// EPlatforms                     ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EPlatforms UNimbusBlueprintLibrary::STATIC_GetGamePlatform(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetGamePlatform");

	UNimbusBlueprintLibrary_GetGamePlatform_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetGameDifficulty
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// EGameDifficulty                ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EGameDifficulty UNimbusBlueprintLibrary::STATIC_GetGameDifficulty(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetGameDifficulty");

	UNimbusBlueprintLibrary_GetGameDifficulty_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetDistanceUnit
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// EOptionsDistanceUnits          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EOptionsDistanceUnits UNimbusBlueprintLibrary::STATIC_GetDistanceUnit(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetDistanceUnit");

	UNimbusBlueprintLibrary_GetDistanceUnit_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetCampaignClearFlag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibrary::STATIC_GetCampaignClearFlag(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetCampaignClearFlag");

	UNimbusBlueprintLibrary_GetCampaignClearFlag_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetBuildDate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UNimbusBlueprintLibrary::STATIC_GetBuildDate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetBuildDate");

	UNimbusBlueprintLibrary_GetBuildDate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetAnimationSequenceLength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*       Sequence                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_GetAnimationSequenceLength(class UAnimSequenceBase* Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetAnimationSequenceLength");

	UNimbusBlueprintLibrary_GetAnimationSequenceLength_Params params;
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetActiveTrueSkySequenceActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UNimbusBlueprintLibrary::STATIC_GetActiveTrueSkySequenceActor(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetActiveTrueSkySequenceActor");

	UNimbusBlueprintLibrary_GetActiveTrueSkySequenceActor_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetActiveNimbusCameraManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class ANimbusPlayerCameraManager* ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ANimbusPlayerCameraManager* UNimbusBlueprintLibrary::STATIC_GetActiveNimbusCameraManager(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetActiveNimbusCameraManager");

	UNimbusBlueprintLibrary_GetActiveNimbusCameraManager_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GetAcceptCancelConfigKeys
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FKey>            OutAcceptKeys                  (Parm, OutParm, ZeroConstructor)
// TArray<struct FKey>            OutCancelKeys                  (Parm, OutParm, ZeroConstructor)

void UNimbusBlueprintLibrary::STATIC_GetAcceptCancelConfigKeys(TArray<struct FKey>* OutAcceptKeys, TArray<struct FKey>* OutCancelKeys)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GetAcceptCancelConfigKeys");

	UNimbusBlueprintLibrary_GetAcceptCancelConfigKeys_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAcceptKeys != nullptr)
		*OutAcceptKeys = params.OutAcceptKeys;
	if (OutCancelKeys != nullptr)
		*OutCancelKeys = params.OutCancelKeys;
}


// Function Nimbus.NimbusBlueprintLibrary.GenerateIntComparator
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Property                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// EComparatorType                Type                           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Value                          (Parm, ZeroConstructor, IsPlainOldData)
// class UIntComparator*          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UIntComparator* UNimbusBlueprintLibrary::STATIC_GenerateIntComparator(int Property, EComparatorType Type, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GenerateIntComparator");

	UNimbusBlueprintLibrary_GenerateIntComparator_Params params;
	params.Property = Property;
	params.Type = Type;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GenerateCompositeComparator
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// ELogicalType                   Type                           (Parm, ZeroConstructor, IsPlainOldData)
// class UVariableComparator*     Child1                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class UVariableComparator*     Child2                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class UCompositeComparator*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCompositeComparator* UNimbusBlueprintLibrary::STATIC_GenerateCompositeComparator(ELogicalType Type, class UVariableComparator* Child1, class UVariableComparator* Child2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GenerateCompositeComparator");

	UNimbusBlueprintLibrary_GenerateCompositeComparator_Params params;
	params.Type = Type;
	params.Child1 = Child1;
	params.Child2 = Child2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.GenerateBoolComparator
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           Property                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// bool                           IsEqual                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Value                          (Parm, ZeroConstructor, IsPlainOldData)
// class UBoolComparator*         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UBoolComparator* UNimbusBlueprintLibrary::STATIC_GenerateBoolComparator(bool Property, bool IsEqual, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.GenerateBoolComparator");

	UNimbusBlueprintLibrary_GenerateBoolComparator_Params params;
	params.Property = Property;
	params.IsEqual = IsEqual;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.EndRemainingDistance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_EndRemainingDistance(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.EndRemainingDistance");

	UNimbusBlueprintLibrary_EndRemainingDistance_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.EndMagneticAnomalyDetector
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_EndMagneticAnomalyDetector(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.EndMagneticAnomalyDetector");

	UNimbusBlueprintLibrary_EndMagneticAnomalyDetector_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.EnableHMDBlackOverlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bIsEnabled                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_EnableHMDBlackOverlay(bool bIsEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.EnableHMDBlackOverlay");

	UNimbusBlueprintLibrary_EnableHMDBlackOverlay_Params params;
	params.bIsEnabled = bIsEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.DrawPredictedWeaponTrajectoryOnRadar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             FiringObject                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_DrawPredictedWeaponTrajectoryOnRadar(class UObject* WorldContextObject, class AGameObject* FiringObject, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.DrawPredictedWeaponTrajectoryOnRadar");

	UNimbusBlueprintLibrary_DrawPredictedWeaponTrajectoryOnRadar_Params params;
	params.WorldContextObject = WorldContextObject;
	params.FiringObject = FiringObject;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.DisplayTutorialMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 TextId                         (Parm, ZeroConstructor)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_DisplayTutorialMessage(const struct FString& TextId, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.DisplayTutorialMessage");

	UNimbusBlueprintLibrary_DisplayTutorialMessage_Params params;
	params.TextId = TextId;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.DisplayMissionUpdated
// (Final, Native, Static, Public, BlueprintCallable)

void UNimbusBlueprintLibrary::STATIC_DisplayMissionUpdated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.DisplayMissionUpdated");

	UNimbusBlueprintLibrary_DisplayMissionUpdated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.DisplayMissionStart
// (Final, Native, Static, Public, BlueprintCallable)

void UNimbusBlueprintLibrary::STATIC_DisplayMissionStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.DisplayMissionStart");

	UNimbusBlueprintLibrary_DisplayMissionStart_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.Deproject
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D               ScreenPos                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FMatrix                 InvViewProjMtx                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               ViewSize                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 OutRayOrigin                   (Parm, OutParm, IsPlainOldData)
// struct FVector                 OutRayDir                      (Parm, OutParm, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_Deproject(const struct FVector2D& ScreenPos, const struct FMatrix& InvViewProjMtx, const struct FVector2D& ViewSize, struct FVector* OutRayOrigin, struct FVector* OutRayDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.Deproject");

	UNimbusBlueprintLibrary_Deproject_Params params;
	params.ScreenPos = ScreenPos;
	params.InvViewProjMtx = InvViewProjMtx;
	params.ViewSize = ViewSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRayOrigin != nullptr)
		*OutRayOrigin = params.OutRayOrigin;
	if (OutRayDir != nullptr)
		*OutRayDir = params.OutRayDir;
}


// Function Nimbus.NimbusBlueprintLibrary.ConvertEngineThrustToEngineSoundRTPC
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          EngineThrust                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibrary::STATIC_ConvertEngineThrustToEngineSoundRTPC(float EngineThrust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.ConvertEngineThrustToEngineSoundRTPC");

	UNimbusBlueprintLibrary_ConvertEngineThrustToEngineSoundRTPC_Params params;
	params.EngineThrust = EngineThrust;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.ClearAllTimersAndLatentActionForObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_ClearAllTimersAndLatentActionForObject(class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.ClearAllTimersAndLatentActionForObject");

	UNimbusBlueprintLibrary_ClearAllTimersAndLatentActionForObject_Params params;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.CancelDisplayTimer
// (Final, Native, Static, Public, BlueprintCallable)

void UNimbusBlueprintLibrary::STATIC_CancelDisplayTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.CancelDisplayTimer");

	UNimbusBlueprintLibrary_CancelDisplayTimer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.BindMissionPhaseEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  MissionPhaseActor              (Parm, ZeroConstructor, IsPlainOldData)
// struct FScriptDelegate         StartEvent                     (Parm, ZeroConstructor)
// struct FScriptDelegate         RetryEvent                     (Parm, ZeroConstructor)

void UNimbusBlueprintLibrary::STATIC_BindMissionPhaseEvents(class AActor* MissionPhaseActor, const struct FScriptDelegate& StartEvent, const struct FScriptDelegate& RetryEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.BindMissionPhaseEvents");

	UNimbusBlueprintLibrary_BindMissionPhaseEvents_Params params;
	params.MissionPhaseActor = MissionPhaseActor;
	params.StartEvent = StartEvent;
	params.RetryEvent = RetryEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.BattleNavigationUnitList
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AUnit*>           UnitsToPing                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bForciblySWitchToBattleMap     (Parm, ZeroConstructor, IsPlainOldData)
// int                            BattleNavigationID             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_BattleNavigationUnitList(TArray<class AUnit*> UnitsToPing, bool bForciblySWitchToBattleMap, int BattleNavigationID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.BattleNavigationUnitList");

	UNimbusBlueprintLibrary_BattleNavigationUnitList_Params params;
	params.UnitsToPing = UnitsToPing;
	params.bForciblySWitchToBattleMap = bForciblySWitchToBattleMap;
	params.BattleNavigationID = BattleNavigationID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.BattleNavigationUnit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AUnit*                   UnitToPing                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForciblySWitchToBattleMap     (Parm, ZeroConstructor, IsPlainOldData)
// int                            BattleNavigationID             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_BattleNavigationUnit(class AUnit* UnitToPing, bool bForciblySWitchToBattleMap, int BattleNavigationID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.BattleNavigationUnit");

	UNimbusBlueprintLibrary_BattleNavigationUnit_Params params;
	params.UnitToPing = UnitToPing;
	params.bForciblySWitchToBattleMap = bForciblySWitchToBattleMap;
	params.BattleNavigationID = BattleNavigationID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.BattleNavigationList
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AAIGameObject*>   AIObjectsToPing                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           bForciblySWitchToBattleMap     (Parm, ZeroConstructor, IsPlainOldData)
// int                            BattleNavigationID             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_BattleNavigationList(TArray<class AAIGameObject*> AIObjectsToPing, bool bForciblySWitchToBattleMap, int BattleNavigationID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.BattleNavigationList");

	UNimbusBlueprintLibrary_BattleNavigationList_Params params;
	params.AIObjectsToPing = AIObjectsToPing;
	params.bForciblySWitchToBattleMap = bForciblySWitchToBattleMap;
	params.BattleNavigationID = BattleNavigationID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.BattleNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AAIGameObject*           AIObjectToPing                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForciblySWitchToBattleMap     (Parm, ZeroConstructor, IsPlainOldData)
// int                            BattleNavigationID             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_BattleNavigation(class AAIGameObject* AIObjectToPing, bool bForciblySWitchToBattleMap, int BattleNavigationID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.BattleNavigation");

	UNimbusBlueprintLibrary_BattleNavigation_Params params;
	params.AIObjectToPing = AIObjectToPing;
	params.bForciblySWitchToBattleMap = bForciblySWitchToBattleMap;
	params.BattleNavigationID = BattleNavigationID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.AddMissionWarningMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 Message                        (Parm, ZeroConstructor)

void UNimbusBlueprintLibrary::STATIC_AddMissionWarningMessage(const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.AddMissionWarningMessage");

	UNimbusBlueprintLibrary_AddMissionWarningMessage_Params params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibrary.AddComparatorIntoComposite
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// class UCompositeComparator*    Composite                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class UVariableComparator*     Child                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData)
// class UCompositeComparator*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UCompositeComparator* UNimbusBlueprintLibrary::STATIC_AddComparatorIntoComposite(class UCompositeComparator* Composite, class UVariableComparator* Child)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.AddComparatorIntoComposite");

	UNimbusBlueprintLibrary_AddComparatorIntoComposite_Params params;
	params.Composite = Composite;
	params.Child = Child;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibrary.ActivateConditionActionEntry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            EventID                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibrary::STATIC_ActivateConditionActionEntry(class UObject* WorldContextObject, int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibrary.ActivateConditionActionEntry");

	UNimbusBlueprintLibrary_ActivateConditionActionEntry_Params params;
	params.WorldContextObject = WorldContextObject;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SubTitleAutoBind
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USubtitleWidget*         SubtitleWidget                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class ARadioManager*           RadioManager                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bBind                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SubTitleAutoBind(class USubtitleWidget* SubtitleWidget, class ARadioManager* RadioManager, bool bBind)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SubTitleAutoBind");

	UNimbusBlueprintLibraryVR_SubTitleAutoBind_Params params;
	params.SubtitleWidget = SubtitleWidget;
	params.RadioManager = RadioManager;
	params.bBind = bBind;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.StopPlayingID
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            in_playingID                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_StopPlayingID(int in_playingID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.StopPlayingID");

	UNimbusBlueprintLibraryVR_StopPlayingID_Params params;
	params.in_playingID = in_playingID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.StopPlayerPlaneVibrations
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_StopPlayerPlaneVibrations(class APlayerPlane* PlayerPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.StopPlayerPlaneVibrations");

	UNimbusBlueprintLibraryVR_StopPlayerPlaneVibrations_Params params;
	params.PlayerPlane = PlayerPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.StopPlayerPlaneSounds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_StopPlayerPlaneSounds(class APlayerPlane* PlayerPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.StopPlayerPlaneSounds");

	UNimbusBlueprintLibraryVR_StopPlayerPlaneSounds_Params params;
	params.PlayerPlane = PlayerPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.StopAllLoopingSound
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ANimbusHUD*              NimbusHUD                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_StopAllLoopingSound(class ANimbusHUD* NimbusHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.StopAllLoopingSound");

	UNimbusBlueprintLibraryVR_StopAllLoopingSound_Params params;
	params.NimbusHUD = NimbusHUD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.StartFading
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UNimbusGameInstance*     GameInstance                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsFadingIn                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InDuration                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_StartFading(class UNimbusGameInstance* GameInstance, bool bIsFadingIn, float InDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.StartFading");

	UNimbusBlueprintLibraryVR_StartFading_Params params;
	params.GameInstance = GameInstance;
	params.bIsFadingIn = bIsFadingIn;
	params.InDuration = InDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.ShowCanopyEffect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShouldShow                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          DropletIntensityScalar         (Parm, ZeroConstructor, IsPlainOldData)
// float                          RainIntensityScalar            (Parm, ZeroConstructor, IsPlainOldData)
// float                          IceBlendScalar                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          IceIntensityScalar             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_ShowCanopyEffect(class APlayerPlane* PlayerPlane, bool bShouldShow, float DropletIntensityScalar, float RainIntensityScalar, float IceBlendScalar, float IceIntensityScalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.ShowCanopyEffect");

	UNimbusBlueprintLibraryVR_ShowCanopyEffect_Params params;
	params.PlayerPlane = PlayerPlane;
	params.bShouldShow = bShouldShow;
	params.DropletIntensityScalar = DropletIntensityScalar;
	params.RainIntensityScalar = RainIntensityScalar;
	params.IceBlendScalar = IceBlendScalar;
	params.IceIntensityScalar = IceIntensityScalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetWorldBlackFade
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           IsClear                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetWorldBlackFade(bool IsClear)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetWorldBlackFade");

	UNimbusBlueprintLibraryVR_SetWorldBlackFade_Params params;
	params.IsClear = IsClear;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetVRFlatCaptureMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bCaptureEnable                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibraryVR::STATIC_SetVRFlatCaptureMode(bool bCaptureEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetVRFlatCaptureMode");

	UNimbusBlueprintLibraryVR_SetVRFlatCaptureMode_Params params;
	params.bCaptureEnable = bCaptureEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetRainSpeedScalarParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetRainSpeedScalarParameterValue(class APlayerPlane* PlayerPlane, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetRainSpeedScalarParameterValue");

	UNimbusBlueprintLibraryVR_SetRainSpeedScalarParameterValue_Params params;
	params.PlayerPlane = PlayerPlane;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetRainScalarParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetRainScalarParameterValue(class APlayerPlane* PlayerPlane, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetRainScalarParameterValue");

	UNimbusBlueprintLibraryVR_SetRainScalarParameterValue_Params params;
	params.PlayerPlane = PlayerPlane;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetNimbusVFXComponentParam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetNimbusVFXComponentParam(int Index, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetNimbusVFXComponentParam");

	UNimbusBlueprintLibraryVR_SetNimbusVFXComponentParam_Params params;
	params.Index = Index;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetNimbusStereoLayers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetNimbusStereoLayers(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetNimbusStereoLayers");

	UNimbusBlueprintLibraryVR_SetNimbusStereoLayers_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetNimbusStereoLayerCurve
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          curve0to1                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetNimbusStereoLayerCurve(float Distance, float curve0to1)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetNimbusStereoLayerCurve");

	UNimbusBlueprintLibraryVR_SetNimbusStereoLayerCurve_Params params;
	params.Distance = Distance;
	params.curve0to1 = curve0to1;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetNimbusDefaultGravityZ
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          gravityZ                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// float                          prevGravityZ                   (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetNimbusDefaultGravityZ(float gravityZ, float* prevGravityZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetNimbusDefaultGravityZ");

	UNimbusBlueprintLibraryVR_SetNimbusDefaultGravityZ_Params params;
	params.gravityZ = gravityZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (prevGravityZ != nullptr)
		*prevGravityZ = params.prevGravityZ;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetEnableHUDTestMode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           Flag                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetEnableHUDTestMode(bool Flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetEnableHUDTestMode");

	UNimbusBlueprintLibraryVR_SetEnableHUDTestMode_Params params;
	params.Flag = Flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetDropletScalarParameterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetDropletScalarParameterValue(class APlayerPlane* PlayerPlane, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetDropletScalarParameterValue");

	UNimbusBlueprintLibraryVR_SetDropletScalarParameterValue_Params params;
	params.PlayerPlane = PlayerPlane;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetCurrentGraphicsSetteingsForDevelop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EGraphicsSettings              Preset                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetCurrentGraphicsSetteingsForDevelop(EGraphicsSettings Preset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetCurrentGraphicsSetteingsForDevelop");

	UNimbusBlueprintLibraryVR_SetCurrentGraphicsSetteingsForDevelop_Params params;
	params.Preset = Preset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.SetAutoDeactive
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             GameObject                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_SetAutoDeactive(class AGameObject* GameObject, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.SetAutoDeactive");

	UNimbusBlueprintLibraryVR_SetAutoDeactive_Params params;
	params.GameObject = GameObject;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.PostEventVR
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 EventName                      (Parm, ZeroConstructor)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusBlueprintLibraryVR::STATIC_PostEventVR(const struct FString& EventName, class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.PostEventVR");

	UNimbusBlueprintLibraryVR_PostEventVR_Params params;
	params.EventName = EventName;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.PostEventAtLocationVR
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UNimbusGameInstance*     pGameInstance                  (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 EventName                      (Parm, ZeroConstructor)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FRotator                Orientation                    (Parm, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusBlueprintLibraryVR::STATIC_PostEventAtLocationVR(class UNimbusGameInstance* pGameInstance, const struct FString& EventName, const struct FVector& Location, const struct FRotator& Orientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.PostEventAtLocationVR");

	UNimbusBlueprintLibraryVR_PostEventAtLocationVR_Params params;
	params.pGameInstance = pGameInstance;
	params.EventName = EventName;
	params.Location = Location;
	params.Orientation = Orientation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.NimbusDelayGarbageCollection
// (Final, Native, Static, Public, BlueprintCallable)

void UNimbusBlueprintLibraryVR::STATIC_NimbusDelayGarbageCollection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.NimbusDelayGarbageCollection");

	UNimbusBlueprintLibraryVR_NimbusDelayGarbageCollection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.IsVRDLCOwned
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibraryVR::STATIC_IsVRDLCOwned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.IsVRDLCOwned");

	UNimbusBlueprintLibraryVR_IsVRDLCOwned_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.IsSuperMode
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bSuper                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_IsSuperMode(bool* bSuper)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.IsSuperMode");

	UNimbusBlueprintLibraryVR_IsSuperMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bSuper != nullptr)
		*bSuper = params.bSuper;
}


// Function Nimbus.NimbusBlueprintLibraryVR.IsNimbusDialogOpen
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibraryVR::STATIC_IsNimbusDialogOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.IsNimbusDialogOpen");

	UNimbusBlueprintLibraryVR_IsNimbusDialogOpen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.IsFreeFlight
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibraryVR::STATIC_IsFreeFlight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.IsFreeFlight");

	UNimbusBlueprintLibraryVR_IsFreeFlight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.IsEnableNimbusOverlay
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibraryVR::STATIC_IsEnableNimbusOverlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.IsEnableNimbusOverlay");

	UNimbusBlueprintLibraryVR_IsEnableNimbusOverlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.IsEnableLocalToViewForCockpit
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibraryVR::STATIC_IsEnableLocalToViewForCockpit(class APlayerPlane* PlayerPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.IsEnableLocalToViewForCockpit");

	UNimbusBlueprintLibraryVR_IsEnableLocalToViewForCockpit_Params params;
	params.PlayerPlane = PlayerPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetVRFlatCaptureMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibraryVR::STATIC_GetVRFlatCaptureMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetVRFlatCaptureMode");

	UNimbusBlueprintLibraryVR_GetVRFlatCaptureMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetPhaseNoAndElapsedTime
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bValid                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            PhaseNo                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          PhaseElapsedTime               (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_GetPhaseNoAndElapsedTime(bool* bValid, int* PhaseNo, float* PhaseElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetPhaseNoAndElapsedTime");

	UNimbusBlueprintLibraryVR_GetPhaseNoAndElapsedTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bValid != nullptr)
		*bValid = params.bValid;
	if (PhaseNo != nullptr)
		*PhaseNo = params.PhaseNo;
	if (PhaseElapsedTime != nullptr)
		*PhaseElapsedTime = params.PhaseElapsedTime;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetNoInputElapsedTime
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// bool                           bValid                         (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UNimbusBlueprintLibraryVR::STATIC_GetNoInputElapsedTime(bool* bValid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetNoInputElapsedTime");

	UNimbusBlueprintLibraryVR_GetNoInputElapsedTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bValid != nullptr)
		*bValid = params.bValid;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetMFDColorType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UNimbusUserWidget*       Widget                         (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class ANimbusHUD*              nimbus_hud                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// EMFDColorType                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMFDColorType UNimbusBlueprintLibraryVR::STATIC_GetMFDColorType(class UNimbusUserWidget* Widget, class ANimbusHUD* nimbus_hud)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetMFDColorType");

	UNimbusBlueprintLibraryVR_GetMFDColorType_Params params;
	params.Widget = Widget;
	params.nimbus_hud = nimbus_hud;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetHitActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AActor* UNimbusBlueprintLibraryVR::STATIC_GetHitActor(class APlayerPlane* PlayerPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetHitActor");

	UNimbusBlueprintLibraryVR_GetHitActor_Params params;
	params.PlayerPlane = PlayerPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetFocusedMenuWidget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMenuBaseWidget*         ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UMenuBaseWidget* UNimbusBlueprintLibraryVR::STATIC_GetFocusedMenuWidget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetFocusedMenuWidget");

	UNimbusBlueprintLibraryVR_GetFocusedMenuWidget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetFocusedMenuID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EMenuIDs                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMenuIDs UNimbusBlueprintLibraryVR::STATIC_GetFocusedMenuID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetFocusedMenuID");

	UNimbusBlueprintLibraryVR_GetFocusedMenuID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetEnvironmentDamageType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)
// EPlayerSystemDamageType        ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EPlayerSystemDamageType UNimbusBlueprintLibraryVR::STATIC_GetEnvironmentDamageType(class APlayerPlane* PlayerPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetEnvironmentDamageType");

	UNimbusBlueprintLibraryVR_GetEnvironmentDamageType_Params params;
	params.PlayerPlane = PlayerPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetDefaultCameraRelativeTransform
// (Final, Native, Static, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTransform              Transform                      (Parm, OutParm, IsPlainOldData)
// class APlayerPlane*            PlayerPlane                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_GetDefaultCameraRelativeTransform(class APlayerPlane* PlayerPlane, struct FTransform* Transform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetDefaultCameraRelativeTransform");

	UNimbusBlueprintLibraryVR_GetDefaultCameraRelativeTransform_Params params;
	params.PlayerPlane = PlayerPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Transform != nullptr)
		*Transform = params.Transform;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetCurrentScene
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           bMission                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bHangar                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           bAirshow                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_GetCurrentScene(bool* bMission, bool* bHangar, bool* bAirshow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetCurrentScene");

	UNimbusBlueprintLibraryVR_GetCurrentScene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bMission != nullptr)
		*bMission = params.bMission;
	if (bHangar != nullptr)
		*bHangar = params.bHangar;
	if (bAirshow != nullptr)
		*bAirshow = params.bAirshow;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetConsoleVariable
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 consoleName                    (Parm, ZeroConstructor)
// bool                           bEnable                        (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// int                            valueInt                       (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// float                          valueFloat                     (Parm, OutParm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_GetConsoleVariable(const struct FString& consoleName, bool* bEnable, int* valueInt, float* valueFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetConsoleVariable");

	UNimbusBlueprintLibraryVR_GetConsoleVariable_Params params;
	params.consoleName = consoleName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bEnable != nullptr)
		*bEnable = params.bEnable;
	if (valueInt != nullptr)
		*valueInt = params.valueInt;
	if (valueFloat != nullptr)
		*valueFloat = params.valueFloat;
}


// Function Nimbus.NimbusBlueprintLibraryVR.GetChildSceneComponents
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// TArray<class USceneComponent*> ComponentList                  (Parm, OutParm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusBlueprintLibraryVR::STATIC_GetChildSceneComponents(class AActor* Actor, TArray<class USceneComponent*>* ComponentList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.GetChildSceneComponents");

	UNimbusBlueprintLibraryVR_GetChildSceneComponents_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ComponentList != nullptr)
		*ComponentList = params.ComponentList;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.EnablePostEventVR
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_EnablePostEventVR(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.EnablePostEventVR");

	UNimbusBlueprintLibraryVR_EnablePostEventVR_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.EnableLocalToViewForCockpit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            PlayerPlane                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInEnabled                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_EnableLocalToViewForCockpit(class APlayerPlane* PlayerPlane, bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.EnableLocalToViewForCockpit");

	UNimbusBlueprintLibraryVR_EnableLocalToViewForCockpit_Params params;
	params.PlayerPlane = PlayerPlane;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.EnableIGCSkipModeVR
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bSkip                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_EnableIGCSkipModeVR(bool bSkip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.EnableIGCSkipModeVR");

	UNimbusBlueprintLibraryVR_EnableIGCSkipModeVR_Params params;
	params.bSkip = bSkip;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.DrawWidgetToTarget
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class UUserWidget*             WidgetToRender                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector2D               DrawSize                       (Parm, IsPlainOldData)
// bool                           UseGamma                       (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<ETextureFilter>    Filter                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_DrawWidgetToTarget(class UTextureRenderTarget2D* Target, class UUserWidget* WidgetToRender, const struct FVector2D& DrawSize, bool UseGamma, TEnumAsByte<ETextureFilter> Filter, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.DrawWidgetToTarget");

	UNimbusBlueprintLibraryVR_DrawWidgetToTarget_Params params;
	params.Target = Target;
	params.WidgetToRender = WidgetToRender;
	params.DrawSize = DrawSize;
	params.UseGamma = UseGamma;
	params.Filter = Filter;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.CreateRenderTarget2DVR
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// int                            Width                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            Height                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            ClearColor                     (Parm, IsPlainOldData)
// class UTextureRenderTarget2D*  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UTextureRenderTarget2D* UNimbusBlueprintLibraryVR::STATIC_CreateRenderTarget2DVR(class UObject* WorldContextObject, int Width, int Height, const struct FLinearColor& ClearColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.CreateRenderTarget2DVR");

	UNimbusBlueprintLibraryVR_CreateRenderTarget2DVR_Params params;
	params.WorldContextObject = WorldContextObject;
	params.Width = Width;
	params.Height = Height;
	params.ClearColor = ClearColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.CreateAndCopyStaticMeshForVR
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Target                         (Parm, ZeroConstructor, IsPlainOldData)
// class UStaticMeshComponent*    Base                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UStaticMeshComponent*    ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UStaticMeshComponent* UNimbusBlueprintLibraryVR::STATIC_CreateAndCopyStaticMeshForVR(class AActor* Target, class UStaticMeshComponent* Base)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.CreateAndCopyStaticMeshForVR");

	UNimbusBlueprintLibraryVR_CreateAndCopyStaticMeshForVR_Params params;
	params.Target = Target;
	params.Base = Base;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusBlueprintLibraryVR.ClearStereoLayerBuffer
// (Final, Native, Static, Public, BlueprintCallable)

void UNimbusBlueprintLibraryVR::STATIC_ClearStereoLayerBuffer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.ClearStereoLayerBuffer");

	UNimbusBlueprintLibraryVR_ClearStereoLayerBuffer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.ClearMiniMapData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMiniMapLayerWidget*     TargetMiniMap                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_ClearMiniMapData(class UMiniMapLayerWidget* TargetMiniMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.ClearMiniMapData");

	UNimbusBlueprintLibraryVR_ClearMiniMapData_Params params;
	params.TargetMiniMap = TargetMiniMap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.ClearHUDMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ANimbusHUD*              NimbusHUD                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusBlueprintLibraryVR::STATIC_ClearHUDMessage(class ANimbusHUD* NimbusHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.ClearHUDMessage");

	UNimbusBlueprintLibraryVR_ClearHUDMessage_Params params;
	params.NimbusHUD = NimbusHUD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusBlueprintLibraryVR.CheckAndApplyVrRenderSetting
// (Final, Native, Static, Public, BlueprintCallable)

void UNimbusBlueprintLibraryVR::STATIC_CheckAndApplyVrRenderSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusBlueprintLibraryVR.CheckAndApplyVrRenderSetting");

	UNimbusBlueprintLibraryVR_CheckAndApplyVrRenderSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCachedWorldContainer.OnPostWorldCleanupHandler
// (Final, Native, Private)
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSessionEnded                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCleanupResources              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCachedWorldContainer::OnPostWorldCleanupHandler(class UWorld* World, bool bSessionEnded, bool bCleanupResources)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCachedWorldContainer.OnPostWorldCleanupHandler");

	UNimbusCachedWorldContainer_OnPostWorldCleanupHandler_Params params;
	params.World = World;
	params.bSessionEnded = bSessionEnded;
	params.bCleanupResources = bCleanupResources;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCachedWorldContainer.OnPostGarbageCollectHandler
// (Final, Native, Private)

void UNimbusCachedWorldContainer::OnPostGarbageCollectHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCachedWorldContainer.OnPostGarbageCollectHandler");

	UNimbusCachedWorldContainer_OnPostGarbageCollectHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ViewSelf
// (Exec, Native, Public)

void UNimbusCheatManager::ViewSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ViewSelf");

	UNimbusCheatManager_ViewSelf_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ViewActor
// (Exec, Native, Public)
// Parameters:
// struct FName                   ActorName                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ViewActor(const struct FName& ActorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ViewActor");

	UNimbusCheatManager_ViewActor_Params params;
	params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UpdateDebugCondition
// (Final, Exec, Native, Public)
// Parameters:
// uint32_t                       ConditionId                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IsValid                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UpdateDebugCondition(uint32_t ConditionId, bool IsValid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UpdateDebugCondition");

	UNimbusCheatManager_UpdateDebugCondition_Params params;
	params.ConditionId = ConditionId;
	params.IsValid = IsValid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UpdateConditionAction
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UpdateConditionAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UpdateConditionAction");

	UNimbusCheatManager_UpdateConditionAction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockVRAircraftTree
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockVRAircraftTree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockVRAircraftTree");

	UNimbusCheatManager_UnlockVRAircraftTree_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockSceneViewer
// (Final, Exec, Native, Public)
// Parameters:
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockSceneViewer(int ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockSceneViewer");

	UNimbusCheatManager_UnlockSceneViewer_Params params;
	params.ID = ID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockPilotData
// (Final, Exec, Native, Public)
// Parameters:
// int                            PilotDataID                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockPilotData(int PilotDataID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockPilotData");

	UNimbusCheatManager_UnlockPilotData_Params params;
	params.PilotDataID = PilotDataID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockParts
// (Final, Exec, Native, Public)
// Parameters:
// int                            PartsID                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockParts(int PartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockParts");

	UNimbusCheatManager_UnlockParts_Params params;
	params.PartsID = PartsID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockOnlineNicknameByID
// (Final, Exec, Native, Public)
// Parameters:
// int                            ID                             (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewID                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockOnlineNicknameByID(int ID, int NewID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockOnlineNicknameByID");

	UNimbusCheatManager_UnlockOnlineNicknameByID_Params params;
	params.ID = ID;
	params.NewID = NewID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockNickname
// (Final, Exec, Native, Public)
// Parameters:
// int                            NicknameID                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockNickname(int NicknameID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockNickname");

	UNimbusCheatManager_UnlockNickname_Params params;
	params.NicknameID = NicknameID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockMultiplayAircraftTree
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockMultiplayAircraftTree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockMultiplayAircraftTree");

	UNimbusCheatManager_UnlockMultiplayAircraftTree_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockMedal
// (Final, Exec, Native, Public)
// Parameters:
// int                            MedalID                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockMedal(int MedalID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockMedal");

	UNimbusCheatManager_UnlockMedal_Params params;
	params.MedalID = MedalID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockFeatures
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockFeatures()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockFeatures");

	UNimbusCheatManager_UnlockFeatures_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockEntry
// (Final, Exec, Native, Public)
// Parameters:
// int                            EntryId                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockEntry(int EntryId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockEntry");

	UNimbusCheatManager_UnlockEntry_Params params;
	params.EntryId = EntryId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockEmblem
// (Final, Exec, Native, Public)
// Parameters:
// int                            EmblemID                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockEmblem(int EmblemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockEmblem");

	UNimbusCheatManager_UnlockEmblem_Params params;
	params.EmblemID = EmblemID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockDLC
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 DLCID                          (Parm, ZeroConstructor)

void UNimbusCheatManager::UnlockDLC(const struct FString& DLCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockDLC");

	UNimbusCheatManager_UnlockDLC_Params params;
	params.DLCID = DLCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllWithMaxData
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllWithMaxData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllWithMaxData");

	UNimbusCheatManager_UnlockAllWithMaxData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllSceneViewer
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllSceneViewer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllSceneViewer");

	UNimbusCheatManager_UnlockAllSceneViewer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllPilotData
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllPilotData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllPilotData");

	UNimbusCheatManager_UnlockAllPilotData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllParts
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllParts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllParts");

	UNimbusCheatManager_UnlockAllParts_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllNicknames
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllNicknames()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllNicknames");

	UNimbusCheatManager_UnlockAllNicknames_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllMedals
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllMedals()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllMedals");

	UNimbusCheatManager_UnlockAllMedals_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllEmblems
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllEmblems()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllEmblems");

	UNimbusCheatManager_UnlockAllEmblems_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllDLCs
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllDLCs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllDLCs");

	UNimbusCheatManager_UnlockAllDLCs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllAircraftSkins
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllAircraftSkins()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllAircraftSkins");

	UNimbusCheatManager_UnlockAllAircraftSkins_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAllAchievements
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAllAchievements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAllAchievements");

	UNimbusCheatManager_UnlockAllAchievements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAll
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAll");

	UNimbusCheatManager_UnlockAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAircraftTree
// (Final, Exec, Native, Public)

void UNimbusCheatManager::UnlockAircraftTree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAircraftTree");

	UNimbusCheatManager_UnlockAircraftTree_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAircraftSkin
// (Final, Exec, Native, Public)
// Parameters:
// int                            SkinID                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockAircraftSkin(int SkinID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAircraftSkin");

	UNimbusCheatManager_UnlockAircraftSkin_Params params;
	params.SkinID = SkinID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAircraft
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 PlaneStringID                  (Parm, ZeroConstructor)
// int                            WeaponNo                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::UnlockAircraft(const struct FString& PlaneStringID, int WeaponNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAircraft");

	UNimbusCheatManager_UnlockAircraft_Params params;
	params.PlaneStringID = PlaneStringID;
	params.WeaponNo = WeaponNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.UnlockAchievement
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 AchievementID                  (Parm, ZeroConstructor)

void UNimbusCheatManager::UnlockAchievement(const struct FString& AchievementID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.UnlockAchievement");

	UNimbusCheatManager_UnlockAchievement_Params params;
	params.AchievementID = AchievementID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleWeaponProcess
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleWeaponProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleWeaponProcess");

	UNimbusCheatManager_ToggleWeaponProcess_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleWeaponMovingLocus
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleWeaponMovingLocus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleWeaponMovingLocus");

	UNimbusCheatManager_ToggleWeaponMovingLocus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleWeaponDebugContainer
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleWeaponDebugContainer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleWeaponDebugContainer");

	UNimbusCheatManager_ToggleWeaponDebugContainer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleWeaponCollision
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleWeaponCollision()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleWeaponCollision");

	UNimbusCheatManager_ToggleWeaponCollision_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleWeaponAxis
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleWeaponAxis()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleWeaponAxis");

	UNimbusCheatManager_ToggleWeaponAxis_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleWeaponAalysis
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleWeaponAalysis()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleWeaponAalysis");

	UNimbusCheatManager_ToggleWeaponAalysis_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleVRTestMissionMenu
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleVRTestMissionMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleVRTestMissionMenu");

	UNimbusCheatManager_ToggleVRTestMissionMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleVREquipGunTrackingParts
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleVREquipGunTrackingParts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleVREquipGunTrackingParts");

	UNimbusCheatManager_ToggleVREquipGunTrackingParts_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleUnlockLogOnScreen
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleUnlockLogOnScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleUnlockLogOnScreen");

	UNimbusCheatManager_ToggleUnlockLogOnScreen_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleUnlockDLC
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleUnlockDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleUnlockDLC");

	UNimbusCheatManager_ToggleUnlockDLC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleUnitDebugContainer
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleUnitDebugContainer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleUnitDebugContainer");

	UNimbusCheatManager_ToggleUnitDebugContainer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleUnitAalysis
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleUnitAalysis()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleUnitAalysis");

	UNimbusCheatManager_ToggleUnitAalysis_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleUI
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleUI");

	UNimbusCheatManager_ToggleUI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleTimeOutTravelMap
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleTimeOutTravelMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleTimeOutTravelMap");

	UNimbusCheatManager_ToggleTimeOutTravelMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleTimeOutTransitionMap
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleTimeOutTransitionMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleTimeOutTransitionMap");

	UNimbusCheatManager_ToggleTimeOutTransitionMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSurroundPursietTargetPoint
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSurroundPursietTargetPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSurroundPursietTargetPoint");

	UNimbusCheatManager_ToggleSurroundPursietTargetPoint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSoundViewerDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSoundViewerDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSoundViewerDebugInfo");

	UNimbusCheatManager_ToggleSoundViewerDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSoundEventRequestInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSoundEventRequestInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSoundEventRequestInfo");

	UNimbusCheatManager_ToggleSoundEventRequestInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSoundEventInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSoundEventInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSoundEventInfo");

	UNimbusCheatManager_ToggleSoundEventInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSonobuoyProgressIcon
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSonobuoyProgressIcon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSonobuoyProgressIcon");

	UNimbusCheatManager_ToggleSonobuoyProgressIcon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSkipScenarioRadio
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSkipScenarioRadio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSkipScenarioRadio");

	UNimbusCheatManager_ToggleSkipScenarioRadio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSkipPlayByPlayRadio
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSkipPlayByPlayRadio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSkipPlayByPlayRadio");

	UNimbusCheatManager_ToggleSkipPlayByPlayRadio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSkipChatterRadio
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSkipChatterRadio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSkipChatterRadio");

	UNimbusCheatManager_ToggleSkipChatterRadio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowUnitRange
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowUnitRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowUnitRange");

	UNimbusCheatManager_ToggleShowUnitRange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowSoundPauseInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowSoundPauseInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowSoundPauseInfo");

	UNimbusCheatManager_ToggleShowSoundPauseInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowSoundManagerInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowSoundManagerInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowSoundManagerInfo");

	UNimbusCheatManager_ToggleShowSoundManagerInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowRibbonCollectionInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowRibbonCollectionInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowRibbonCollectionInfo");

	UNimbusCheatManager_ToggleShowRibbonCollectionInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowReplayInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowReplayInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowReplayInfo");

	UNimbusCheatManager_ToggleShowReplayInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowRaycastTest
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowRaycastTest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowRaycastTest");

	UNimbusCheatManager_ToggleShowRaycastTest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowRadioPortrait
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowRadioPortrait()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowRadioPortrait");

	UNimbusCheatManager_ToggleShowRadioPortrait_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowPlayerLandingAOA
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowPlayerLandingAOA()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowPlayerLandingAOA");

	UNimbusCheatManager_ToggleShowPlayerLandingAOA_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowPlayerEnvCollisionLines
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowPlayerEnvCollisionLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowPlayerEnvCollisionLines");

	UNimbusCheatManager_ToggleShowPlayerEnvCollisionLines_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowPlayByPlayRadioConditionLog
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowPlayByPlayRadioConditionLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowPlayByPlayRadioConditionLog");

	UNimbusCheatManager_ToggleShowPlayByPlayRadioConditionLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowPauseInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowPauseInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowPauseInfo");

	UNimbusCheatManager_ToggleShowPauseInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowMissionObjectInfoUsually
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowMissionObjectInfoUsually()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowMissionObjectInfoUsually");

	UNimbusCheatManager_ToggleShowMissionObjectInfoUsually_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowMissionHitchInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowMissionHitchInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowMissionHitchInfo");

	UNimbusCheatManager_ToggleShowMissionHitchInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowMissionDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowMissionDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowMissionDebugInfo");

	UNimbusCheatManager_ToggleShowMissionDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowMiniGameRadioGuideCourse
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowMiniGameRadioGuideCourse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowMiniGameRadioGuideCourse");

	UNimbusCheatManager_ToggleShowMiniGameRadioGuideCourse_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowMapChangeInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowMapChangeInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowMapChangeInfo");

	UNimbusCheatManager_ToggleShowMapChangeInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowLevelDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowLevelDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowLevelDebugInfo");

	UNimbusCheatManager_ToggleShowLevelDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowAssetLoaderInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowAssetLoaderInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowAssetLoaderInfo");

	UNimbusCheatManager_ToggleShowAssetLoaderInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShowAnalyzedNodes
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShowAnalyzedNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShowAnalyzedNodes");

	UNimbusCheatManager_ToggleShowAnalyzedNodes_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleShortMapChangeTimeOut
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleShortMapChangeTimeOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleShortMapChangeTimeOut");

	UNimbusCheatManager_ToggleShortMapChangeTimeOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleScenarioRadioEnabled
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleScenarioRadioEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleScenarioRadioEnabled");

	UNimbusCheatManager_ToggleScenarioRadioEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSaveReplayFile
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSaveReplayFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSaveReplayFile");

	UNimbusCheatManager_ToggleSaveReplayFile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSaveLoadUIIgnore
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSaveLoadUIIgnore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSaveLoadUIIgnore");

	UNimbusCheatManager_ToggleSaveLoadUIIgnore_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSaveLoadSingleThread
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSaveLoadSingleThread()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSaveLoadSingleThread");

	UNimbusCheatManager_ToggleSaveLoadSingleThread_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleSaveLoadSimulatedMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleSaveLoadSimulatedMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleSaveLoadSimulatedMode");

	UNimbusCheatManager_ToggleSaveLoadSimulatedMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleReplayRecording
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleReplayRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleReplayRecording");

	UNimbusCheatManager_ToggleReplayRecording_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRecordRadioReport
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRecordRadioReport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRecordRadioReport");

	UNimbusCheatManager_ToggleRecordRadioReport_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioSkipEnabled
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRadioSkipEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioSkipEnabled");

	UNimbusCheatManager_ToggleRadioSkipEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioSilentGroup
// (Final, Exec, Native, Public)
// Parameters:
// int                            GroupIndex                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ToggleRadioSilentGroup(int GroupIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioSilentGroup");

	UNimbusCheatManager_ToggleRadioSilentGroup_Params params;
	params.GroupIndex = GroupIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioRequeueingWaitGroupInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRadioRequeueingWaitGroupInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioRequeueingWaitGroupInfo");

	UNimbusCheatManager_ToggleRadioRequeueingWaitGroupInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioPotentializeAllTables
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRadioPotentializeAllTables()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioPotentializeAllTables");

	UNimbusCheatManager_ToggleRadioPotentializeAllTables_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioPlayLimitOneTime
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRadioPlayLimitOneTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioPlayLimitOneTime");

	UNimbusCheatManager_ToggleRadioPlayLimitOneTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioForceOfflineEnabled
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRadioForceOfflineEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioForceOfflineEnabled");

	UNimbusCheatManager_ToggleRadioForceOfflineEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioEnemyTensionEnabled
// (Final, Exec, Native, Public)
// Parameters:
// int                            Tension                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ToggleRadioEnemyTensionEnabled(int Tension)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioEnemyTensionEnabled");

	UNimbusCheatManager_ToggleRadioEnemyTensionEnabled_Params params;
	params.Tension = Tension;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRadioDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioDebugInfo");

	UNimbusCheatManager_ToggleRadioDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioContinuousPlay
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRadioContinuousPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioContinuousPlay");

	UNimbusCheatManager_ToggleRadioContinuousPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioAlwaysPlay
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleRadioAlwaysPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioAlwaysPlay");

	UNimbusCheatManager_ToggleRadioAlwaysPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleRadioAllyTensionEnabled
// (Final, Exec, Native, Public)
// Parameters:
// int                            Tension                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ToggleRadioAllyTensionEnabled(int Tension)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleRadioAllyTensionEnabled");

	UNimbusCheatManager_ToggleRadioAllyTensionEnabled_Params params;
	params.Tension = Tension;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TogglePlayerWeaponUnlimited
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TogglePlayerWeaponUnlimited()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TogglePlayerWeaponUnlimited");

	UNimbusCheatManager_TogglePlayerWeaponUnlimited_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TogglePlayerWeaponQuickReload
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TogglePlayerWeaponQuickReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TogglePlayerWeaponQuickReload");

	UNimbusCheatManager_TogglePlayerWeaponQuickReload_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TogglePlayerUpgradePartsInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TogglePlayerUpgradePartsInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TogglePlayerUpgradePartsInfo");

	UNimbusCheatManager_TogglePlayerUpgradePartsInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TogglePlayerInvincible
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TogglePlayerInvincible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TogglePlayerInvincible");

	UNimbusCheatManager_TogglePlayerInvincible_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TogglePlayerDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TogglePlayerDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TogglePlayerDebugInfo");

	UNimbusCheatManager_TogglePlayerDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TogglePlayerAttackTargetsException
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TogglePlayerAttackTargetsException()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TogglePlayerAttackTargetsException");

	UNimbusCheatManager_TogglePlayerAttackTargetsException_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TogglePlayByPlayRadioEnabled
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TogglePlayByPlayRadioEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TogglePlayByPlayRadioEnabled");

	UNimbusCheatManager_TogglePlayByPlayRadioEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TogglePassSoundDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TogglePassSoundDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TogglePassSoundDebugInfo");

	UNimbusCheatManager_TogglePassSoundDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleParticleSystemDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleParticleSystemDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleParticleSystemDebugInfo");

	UNimbusCheatManager_ToggleParticleSystemDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleOutOfCockpitWarning
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleOutOfCockpitWarning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleOutOfCockpitWarning");

	UNimbusCheatManager_ToggleOutOfCockpitWarning_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleObjectAxis
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleObjectAxis()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleObjectAxis");

	UNimbusCheatManager_ToggleObjectAxis_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleNimbusUserDebugMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleNimbusUserDebugMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleNimbusUserDebugMode");

	UNimbusCheatManager_ToggleNimbusUserDebugMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleMultiplayerDebugMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleMultiplayerDebugMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleMultiplayerDebugMode");

	UNimbusCheatManager_ToggleMultiplayerDebugMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleMissileCloudWavering
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleMissileCloudWavering()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleMissileCloudWavering");

	UNimbusCheatManager_ToggleMissileCloudWavering_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleMiniGameAllDemoCamera
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleMiniGameAllDemoCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleMiniGameAllDemoCamera");

	UNimbusCheatManager_ToggleMiniGameAllDemoCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleLogStreamingTexture
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleLogStreamingTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleLogStreamingTexture");

	UNimbusCheatManager_ToggleLogStreamingTexture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleInvisibleFade
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleInvisibleFade()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleInvisibleFade");

	UNimbusCheatManager_ToggleInvisibleFade_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleGameObjectProcess
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleGameObjectProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleGameObjectProcess");

	UNimbusCheatManager_ToggleGameObjectProcess_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleForceSkipMiniGame
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleForceSkipMiniGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleForceSkipMiniGame");

	UNimbusCheatManager_ToggleForceSkipMiniGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleForceSkipIGC
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleForceSkipIGC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleForceSkipIGC");

	UNimbusCheatManager_ToggleForceSkipIGC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleForcePlayerPlaneInSand
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleForcePlayerPlaneInSand()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleForcePlayerPlaneInSand");

	UNimbusCheatManager_ToggleForcePlayerPlaneInSand_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleForcePlayerPlaneInJamming
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleForcePlayerPlaneInJamming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleForcePlayerPlaneInJamming");

	UNimbusCheatManager_ToggleForcePlayerPlaneInJamming_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleForcePlayerPlaneInCloud
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleForcePlayerPlaneInCloud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleForcePlayerPlaneInCloud");

	UNimbusCheatManager_ToggleForcePlayerPlaneInCloud_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleEquipUpgardParts
// (Final, Exec, Native, Public)
// Parameters:
// int                            PartsID                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ToggleEquipUpgardParts(int PartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleEquipUpgardParts");

	UNimbusCheatManager_ToggleEquipUpgardParts_Params params;
	params.PartsID = PartsID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableVibration
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableVibration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableVibration");

	UNimbusCheatManager_ToggleDisableVibration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableUnlimitedGunDueToDifficulty
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableUnlimitedGunDueToDifficulty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableUnlimitedGunDueToDifficulty");

	UNimbusCheatManager_ToggleDisableUnlimitedGunDueToDifficulty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableReplayPassCameraMultiTargets
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableReplayPassCameraMultiTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableReplayPassCameraMultiTargets");

	UNimbusCheatManager_ToggleDisableReplayPassCameraMultiTargets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableReplayPassCameraMissile
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableReplayPassCameraMissile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableReplayPassCameraMissile");

	UNimbusCheatManager_ToggleDisableReplayPassCameraMissile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableReplayPassCameraHorizon
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableReplayPassCameraHorizon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableReplayPassCameraHorizon");

	UNimbusCheatManager_ToggleDisableReplayPassCameraHorizon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableRadioRequeueingWait
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableRadioRequeueingWait()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableRadioRequeueingWait");

	UNimbusCheatManager_ToggleDisableRadioRequeueingWait_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableRadioQueueLimitLife
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableRadioQueueLimitLife()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableRadioQueueLimitLife");

	UNimbusCheatManager_ToggleDisableRadioQueueLimitLife_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableMiniGameSkip
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableMiniGameSkip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableMiniGameSkip");

	UNimbusCheatManager_ToggleDisableMiniGameSkip_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableEventTrigger
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableEventTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableEventTrigger");

	UNimbusCheatManager_ToggleDisableEventTrigger_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableDrawVapor
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableDrawVapor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableDrawVapor");

	UNimbusCheatManager_ToggleDisableDrawVapor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisableDrawMissileTrail
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisableDrawMissileTrail()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisableDrawMissileTrail");

	UNimbusCheatManager_ToggleDisableDrawMissileTrail_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDisabledPreloadTransitionMap
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDisabledPreloadTransitionMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDisabledPreloadTransitionMap");

	UNimbusCheatManager_ToggleDisabledPreloadTransitionMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDebugShowBreakConstraint
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDebugShowBreakConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDebugShowBreakConstraint");

	UNimbusCheatManager_ToggleDebugShowBreakConstraint_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDebugObjectMapRadioSearchEnemyRange
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDebugObjectMapRadioSearchEnemyRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDebugObjectMapRadioSearchEnemyRange");

	UNimbusCheatManager_ToggleDebugObjectMapRadioSearchEnemyRange_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDebugObjectMap
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDebugObjectMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDebugObjectMap");

	UNimbusCheatManager_ToggleDebugObjectMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDebugMenu
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDebugMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDebugMenu");

	UNimbusCheatManager_ToggleDebugMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDebugLog
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDebugLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDebugLog");

	UNimbusCheatManager_ToggleDebugLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDebugDisableWeaponDisabling
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDebugDisableWeaponDisabling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDebugDisableWeaponDisabling");

	UNimbusCheatManager_ToggleDebugDisableWeaponDisabling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDebugContainer
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDebugContainer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDebugContainer");

	UNimbusCheatManager_ToggleDebugContainer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDebugCanopyState
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDebugCanopyState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDebugCanopyState");

	UNimbusCheatManager_ToggleDebugCanopyState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleDamageStateDebugMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleDamageStateDebugMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleDamageStateDebugMode");

	UNimbusCheatManager_ToggleDamageStateDebugMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleCooldownDebugDisplay
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleCooldownDebugDisplay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleCooldownDebugDisplay");

	UNimbusCheatManager_ToggleCooldownDebugDisplay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleCollectLoadedTexturePhase
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleCollectLoadedTexturePhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleCollectLoadedTexturePhase");

	UNimbusCheatManager_ToggleCollectLoadedTexturePhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleCollectLoadedTextureIGC
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleCollectLoadedTextureIGC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleCollectLoadedTextureIGC");

	UNimbusCheatManager_ToggleCollectLoadedTextureIGC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleCollectLoadedTexture
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleCollectLoadedTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleCollectLoadedTexture");

	UNimbusCheatManager_ToggleCollectLoadedTexture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleChatterRadioEnabled
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleChatterRadioEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleChatterRadioEnabled");

	UNimbusCheatManager_ToggleChatterRadioEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleBuildInformationPeak
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleBuildInformationPeak()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleBuildInformationPeak");

	UNimbusCheatManager_ToggleBuildInformationPeak_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleBuildInformation
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleBuildInformation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleBuildInformation");

	UNimbusCheatManager_ToggleBuildInformation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleBGMEventRequestInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleBGMEventRequestInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleBGMEventRequestInfo");

	UNimbusCheatManager_ToggleBGMEventRequestInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleAutoDumpReplayDataBuffer
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleAutoDumpReplayDataBuffer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleAutoDumpReplayDataBuffer");

	UNimbusCheatManager_ToggleAutoDumpReplayDataBuffer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleApplyMultiplayerParametersToCampaign
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleApplyMultiplayerParametersToCampaign()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleApplyMultiplayerParametersToCampaign");

	UNimbusCheatManager_ToggleApplyMultiplayerParametersToCampaign_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleAllExtraMeshVisibility
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleAllExtraMeshVisibility()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleAllExtraMeshVisibility");

	UNimbusCheatManager_ToggleAllExtraMeshVisibility_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleAircraftLoadingTest
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleAircraftLoadingTest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleAircraftLoadingTest");

	UNimbusCheatManager_ToggleAircraftLoadingTest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleAIPlaneDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleAIPlaneDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleAIPlaneDebugInfo");

	UNimbusCheatManager_ToggleAIPlaneDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleAIDebugInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleAIDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleAIDebugInfo");

	UNimbusCheatManager_ToggleAIDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ToggleAheadLoadIGCPlane
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ToggleAheadLoadIGCPlane()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ToggleAheadLoadIGCPlane");

	UNimbusCheatManager_ToggleAheadLoadIGCPlane_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ThreeTimesFaster
// (Final, Exec, Native, Public)
// Parameters:
// float                          Multiplier                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ThreeTimesFaster(float Multiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ThreeTimesFaster");

	UNimbusCheatManager_ThreeTimesFaster_Params params;
	params.Multiplier = Multiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.TeleportToTarget
// (Final, Exec, Native, Public)

void UNimbusCheatManager::TeleportToTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.TeleportToTarget");

	UNimbusCheatManager_TeleportToTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SuperF5
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SuperF5(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SuperF5");

	UNimbusCheatManager_SuperF5_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.StopImpactCamera
// (Final, Exec, Native, Public)

void UNimbusCheatManager::StopImpactCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.StopImpactCamera");

	UNimbusCheatManager_StopImpactCamera_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.StartConditions
// (Final, Exec, Native, Public)

void UNimbusCheatManager::StartConditions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.StartConditions");

	UNimbusCheatManager_StartConditions_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SoftReset
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SoftReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SoftReset");

	UNimbusCheatManager_SoftReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_UnlockLocalSkin
// (Final, Exec, Native, Public)
// Parameters:
// int                            SkinID                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_UnlockLocalSkin(int SkinID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_UnlockLocalSkin");

	UNimbusCheatManager_SNL_UnlockLocalSkin_Params params;
	params.SkinID = SkinID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_UnlockLocalNickname
// (Final, Exec, Native, Public)
// Parameters:
// int                            NicknameID                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_UnlockLocalNickname(int NicknameID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_UnlockLocalNickname");

	UNimbusCheatManager_SNL_UnlockLocalNickname_Params params;
	params.NicknameID = NicknameID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_UnlockLocalMedal
// (Final, Exec, Native, Public)
// Parameters:
// int                            MedalID                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_UnlockLocalMedal(int MedalID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_UnlockLocalMedal");

	UNimbusCheatManager_SNL_UnlockLocalMedal_Params params;
	params.MedalID = MedalID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_UnlockLocalEmblem
// (Final, Exec, Native, Public)
// Parameters:
// int                            EmblemID                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_UnlockLocalEmblem(int EmblemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_UnlockLocalEmblem");

	UNimbusCheatManager_SNL_UnlockLocalEmblem_Params params;
	params.EmblemID = EmblemID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_UnlockAndEquipLocalNickname
// (Final, Exec, Native, Public)
// Parameters:
// int                            NicknameID                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_UnlockAndEquipLocalNickname(int NicknameID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_UnlockAndEquipLocalNickname");

	UNimbusCheatManager_SNL_UnlockAndEquipLocalNickname_Params params;
	params.NicknameID = NicknameID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_UnlockAllNicknames
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_UnlockAllNicknames()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_UnlockAllNicknames");

	UNimbusCheatManager_SNL_UnlockAllNicknames_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_ToggleForceHostMigrationFailure
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_ToggleForceHostMigrationFailure()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_ToggleForceHostMigrationFailure");

	UNimbusCheatManager_SNL_ToggleForceHostMigrationFailure_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestProgressionDataCheat
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestProgressionDataCheat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestProgressionDataCheat");

	UNimbusCheatManager_SNL_TestProgressionDataCheat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestMRPDataTableCheat
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestMRPDataTableCheat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestMRPDataTableCheat");

	UNimbusCheatManager_SNL_TestMRPDataTableCheat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestMissionScoreDataTableCheat
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestMissionScoreDataTableCheat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestMissionScoreDataTableCheat");

	UNimbusCheatManager_SNL_TestMissionScoreDataTableCheat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestMedalEvaluationResultCheat
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestMedalEvaluationResultCheat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestMedalEvaluationResultCheat");

	UNimbusCheatManager_SNL_TestMedalEvaluationResultCheat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestGameSettingsCheat
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestGameSettingsCheat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestGameSettingsCheat");

	UNimbusCheatManager_SNL_TestGameSettingsCheat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestGameRulesCheat
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestGameRulesCheat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestGameRulesCheat");

	UNimbusCheatManager_SNL_TestGameRulesCheat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestGameResultCheat
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestGameResultCheat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestGameResultCheat");

	UNimbusCheatManager_SNL_TestGameResultCheat_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestCheatWeaponDamage
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnableCheating                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_TestCheatWeaponDamage(bool bEnableCheating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestCheatWeaponDamage");

	UNimbusCheatManager_SNL_TestCheatWeaponDamage_Params params;
	params.bEnableCheating = bEnableCheating;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestCheatPlaneLocation
// (Final, Exec, Native, Public)
// Parameters:
// int                            ClientIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_TestCheatPlaneLocation(int ClientIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestCheatPlaneLocation");

	UNimbusCheatManager_SNL_TestCheatPlaneLocation_Params params;
	params.ClientIndex = ClientIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestCheatPlaneHealth
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestCheatPlaneHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestCheatPlaneHealth");

	UNimbusCheatManager_SNL_TestCheatPlaneHealth_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestCheatPlaneAmmoCount
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestCheatPlaneAmmoCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestCheatPlaneAmmoCount");

	UNimbusCheatManager_SNL_TestCheatPlaneAmmoCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestCheatOnCheatingProperty
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestCheatOnCheatingProperty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestCheatOnCheatingProperty");

	UNimbusCheatManager_SNL_TestCheatOnCheatingProperty_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TestCheatLocalPlaneLocation
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TestCheatLocalPlaneLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TestCheatLocalPlaneLocation");

	UNimbusCheatManager_SNL_TestCheatLocalPlaneLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TeleportToHost
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_TeleportToHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TeleportToHost");

	UNimbusCheatManager_SNL_TeleportToHost_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_TeleportToAirCurrentVolume
// (Final, Exec, Native, Public)
// Parameters:
// int                            AirCurrentVolumeIndex          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_TeleportToAirCurrentVolume(int AirCurrentVolumeIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_TeleportToAirCurrentVolume");

	UNimbusCheatManager_SNL_TeleportToAirCurrentVolume_Params params;
	params.AirCurrentVolumeIndex = AirCurrentVolumeIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SimulateNetworkLibInitFailure
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SimulateNetworkLibInitFailure(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SimulateNetworkLibInitFailure");

	UNimbusCheatManager_SNL_SimulateNetworkLibInitFailure_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_ShowVCMemberList
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_ShowVCMemberList(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_ShowVCMemberList");

	UNimbusCheatManager_SNL_ShowVCMemberList_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_ShowSimpleVoiceChatPanel
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_ShowSimpleVoiceChatPanel(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_ShowSimpleVoiceChatPanel");

	UNimbusCheatManager_SNL_ShowSimpleVoiceChatPanel_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetVoiceChatMinLightUpTime
// (Final, Exec, Native, Public)
// Parameters:
// float                          TimeInSeconds                  (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetVoiceChatMinLightUpTime(float TimeInSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetVoiceChatMinLightUpTime");

	UNimbusCheatManager_SNL_SetVoiceChatMinLightUpTime_Params params;
	params.TimeInSeconds = TimeInSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetRoomMMRValue
// (Final, Exec, Native, Public)
// Parameters:
// int                            NewMMRValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetRoomMMRValue(int NewMMRValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetRoomMMRValue");

	UNimbusCheatManager_SNL_SetRoomMMRValue_Params params;
	params.NewMMRValue = NewMMRValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetRetrySaveAutoKickDurationInSeconds
// (Final, Exec, Native, Public)
// Parameters:
// float                          TimeInSeconds                  (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetRetrySaveAutoKickDurationInSeconds(float TimeInSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetRetrySaveAutoKickDurationInSeconds");

	UNimbusCheatManager_SNL_SetRetrySaveAutoKickDurationInSeconds_Params params;
	params.TimeInSeconds = TimeInSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetRedBootShowTime
// (Final, Exec, Native, Public)
// Parameters:
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetRedBootShowTime(int Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetRedBootShowTime");

	UNimbusCheatManager_SNL_SetRedBootShowTime_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetRedBootKickedPlayersThreshold
// (Final, Exec, Native, Public)
// Parameters:
// int                            Players                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetRedBootKickedPlayersThreshold(int Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetRedBootKickedPlayersThreshold");

	UNimbusCheatManager_SNL_SetRedBootKickedPlayersThreshold_Params params;
	params.Players = Players;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetRedBootExpiryTime
// (Final, Exec, Native, Public)
// Parameters:
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetRedBootExpiryTime(int Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetRedBootExpiryTime");

	UNimbusCheatManager_SNL_SetRedBootExpiryTime_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetPreventRejoinSessionTime
// (Final, Exec, Native, Public)
// Parameters:
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetPreventRejoinSessionTime(int Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetPreventRejoinSessionTime");

	UNimbusCheatManager_SNL_SetPreventRejoinSessionTime_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetPlaneModel
// (Final, Exec, Native, Public)
// Parameters:
// int                            PlaneID                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            WeaponNo                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetPlaneModel(int PlaneID, int WeaponNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetPlaneModel");

	UNimbusCheatManager_SNL_SetPlaneModel_Params params;
	params.PlaneID = PlaneID;
	params.WeaponNo = WeaponNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetMinimumRequiredBandwidthBPS
// (Final, Exec, Native, Public)
// Parameters:
// float                          MinimumRequiredBandwidthBPS    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetMinimumRequiredBandwidthBPS(float MinimumRequiredBandwidthBPS)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetMinimumRequiredBandwidthBPS");

	UNimbusCheatManager_SNL_SetMinimumRequiredBandwidthBPS_Params params;
	params.MinimumRequiredBandwidthBPS = MinimumRequiredBandwidthBPS;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetLocalRankExp
// (Final, Exec, Native, Public)
// Parameters:
// uint32_t                       RankExperience                 (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetLocalRankExp(uint32_t RankExperience)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetLocalRankExp");

	UNimbusCheatManager_SNL_SetLocalRankExp_Params params;
	params.RankExperience = RankExperience;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetLocalRank
// (Final, Exec, Native, Public)
// Parameters:
// unsigned char                  RankID                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetLocalRank(unsigned char RankID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetLocalRank");

	UNimbusCheatManager_SNL_SetLocalRank_Params params;
	params.RankID = RankID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetLocalPlayerScore
// (Final, Exec, Native, Public)
// Parameters:
// int                            Score                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetLocalPlayerScore(int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetLocalPlayerScore");

	UNimbusCheatManager_SNL_SetLocalPlayerScore_Params params;
	params.Score = Score;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetLocalOnlineCreditValue
// (Final, Exec, Native, Public)
// Parameters:
// int                            MMRP                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetLocalOnlineCreditValue(int MMRP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetLocalOnlineCreditValue");

	UNimbusCheatManager_SNL_SetLocalOnlineCreditValue_Params params;
	params.MMRP = MMRP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetLocalMMRValue
// (Final, Exec, Native, Public)
// Parameters:
// int                            MMRValue                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetLocalMMRValue(int MMRValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetLocalMMRValue");

	UNimbusCheatManager_SNL_SetLocalMMRValue_Params params;
	params.MMRValue = MMRValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetFlightFormation
// (Final, Exec, Native, Public)
// Parameters:
// int                            FlightFormationType            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetFlightFormation(int FlightFormationType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetFlightFormation");

	UNimbusCheatManager_SNL_SetFlightFormation_Params params;
	params.FlightFormationType = FlightFormationType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetErrorDelayDuration
// (Final, Exec, Native, Public)
// Parameters:
// float                          DurationInSeconds              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetErrorDelayDuration(float DurationInSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetErrorDelayDuration");

	UNimbusCheatManager_SNL_SetErrorDelayDuration_Params params;
	params.DurationInSeconds = DurationInSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetCustomFlightFormation
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 FlightFormation                (Parm, ZeroConstructor)

void UNimbusCheatManager::SNL_SetCustomFlightFormation(const struct FString& FlightFormation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetCustomFlightFormation");

	UNimbusCheatManager_SNL_SetCustomFlightFormation_Params params;
	params.FlightFormation = FlightFormation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SetAutoKickThreshold
// (Final, Exec, Native, Public)
// Parameters:
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_SetAutoKickThreshold(int Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SetAutoKickThreshold");

	UNimbusCheatManager_SNL_SetAutoKickThreshold_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SendTestMessage
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_SendTestMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SendTestMessage");

	UNimbusCheatManager_SNL_SendTestMessage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_SendAircraftSetsToAllClients
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_SendAircraftSetsToAllClients()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_SendAircraftSetsToAllClients");

	UNimbusCheatManager_SNL_SendAircraftSetsToAllClients_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_ResetLocalMMRValue
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_ResetLocalMMRValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_ResetLocalMMRValue");

	UNimbusCheatManager_SNL_ResetLocalMMRValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_KillLocalPlayer
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_KillLocalPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_KillLocalPlayer");

	UNimbusCheatManager_SNL_KillLocalPlayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_KickPlayerByID
// (Final, Exec, Native, Public)
// Parameters:
// int                            KickedClientID                 (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_KickPlayerByID(int KickedClientID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_KickPlayerByID");

	UNimbusCheatManager_SNL_KickPlayerByID_Params params;
	params.KickedClientID = KickedClientID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_KickManagerDebugToggle
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_KickManagerDebugToggle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_KickManagerDebugToggle");

	UNimbusCheatManager_SNL_KickManagerDebugToggle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_InitializeNetworkEmulator
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_InitializeNetworkEmulator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_InitializeNetworkEmulator");

	UNimbusCheatManager_SNL_InitializeNetworkEmulator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_ForceCompleteMission
// (Final, Exec, Native, Public)
// Parameters:
// int                            SecondToWait                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_ForceCompleteMission(int SecondToWait)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_ForceCompleteMission");

	UNimbusCheatManager_SNL_ForceCompleteMission_Params params;
	params.SecondToWait = SecondToWait;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_ForceAbortMission
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bShouldAbortMission            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_ForceAbortMission(bool bShouldAbortMission)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_ForceAbortMission");

	UNimbusCheatManager_SNL_ForceAbortMission_Params params;
	params.bShouldAbortMission = bShouldAbortMission;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableUAVLaserPE
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableUAVLaserPE(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableUAVLaserPE");

	UNimbusCheatManager_SNL_EnableUAVLaserPE_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableSessionTimeoutDetection
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableSessionTimeoutDetection(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableSessionTimeoutDetection");

	UNimbusCheatManager_SNL_EnableSessionTimeoutDetection_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableResetPlayerControllerOnPause
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableResetPlayerControllerOnPause(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableResetPlayerControllerOnPause");

	UNimbusCheatManager_SNL_EnableResetPlayerControllerOnPause_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableProgressionDebug
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableProgressionDebug(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableProgressionDebug");

	UNimbusCheatManager_SNL_EnableProgressionDebug_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnablePlaneSync
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnablePlaneSync               (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnablePlaneSync(bool bEnablePlaneSync)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnablePlaneSync");

	UNimbusCheatManager_SNL_EnablePlaneSync_Params params;
	params.bEnablePlaneSync = bEnablePlaneSync;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableNetworkLOD
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableNetworkLOD(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableNetworkLOD");

	UNimbusCheatManager_SNL_EnableNetworkLOD_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableNetworkGodMode
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableNetworkGodMode(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableNetworkGodMode");

	UNimbusCheatManager_SNL_EnableNetworkGodMode_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableFlightEngine
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnableFlightEngine            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableFlightEngine(bool bEnableFlightEngine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableFlightEngine");

	UNimbusCheatManager_SNL_EnableFlightEngine_Params params;
	params.bEnableFlightEngine = bEnableFlightEngine;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableDebugFakeSession
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableDebugFakeSession(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableDebugFakeSession");

	UNimbusCheatManager_SNL_EnableDebugFakeSession_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableAutoWeapon
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bMGEnabled                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bMainWeaponEnabled             (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bUseSpecialWeapon              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableAutoWeapon(bool bMGEnabled, bool bMainWeaponEnabled, bool bUseSpecialWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableAutoWeapon");

	UNimbusCheatManager_SNL_EnableAutoWeapon_Params params;
	params.bMGEnabled = bMGEnabled;
	params.bMainWeaponEnabled = bMainWeaponEnabled;
	params.bUseSpecialWeapon = bUseSpecialWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_EnableAirCurrentReplication
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_EnableAirCurrentReplication(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_EnableAirCurrentReplication");

	UNimbusCheatManager_SNL_EnableAirCurrentReplication_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_DisplayStats
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_DisplayStats(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_DisplayStats");

	UNimbusCheatManager_SNL_DisplayStats_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_DisplayLocalAircraftCost
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_DisplayLocalAircraftCost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_DisplayLocalAircraftCost");

	UNimbusCheatManager_SNL_DisplayLocalAircraftCost_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_DisplayDebugBox
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_DisplayDebugBox(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_DisplayDebugBox");

	UNimbusCheatManager_SNL_DisplayDebugBox_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_DisplayAllHUDElements
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_DisplayAllHUDElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_DisplayAllHUDElements");

	UNimbusCheatManager_SNL_DisplayAllHUDElements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CheckOnlineDataStatus
// (Final, Exec, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusCheatManager::SNL_CheckOnlineDataStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CheckOnlineDataStatus");

	UNimbusCheatManager_SNL_CheckOnlineDataStatus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusCheatManager.SNL_CheckOnlineCreditValue
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_CheckOnlineCreditValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CheckOnlineCreditValue");

	UNimbusCheatManager_SNL_CheckOnlineCreditValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CheckLocalRankInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_CheckLocalRankInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CheckLocalRankInfo");

	UNimbusCheatManager_SNL_CheckLocalRankInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CheckLocalPlayerScore
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_CheckLocalPlayerScore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CheckLocalPlayerScore");

	UNimbusCheatManager_SNL_CheckLocalPlayerScore_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CheckLocalMMRValue
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_CheckLocalMMRValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CheckLocalMMRValue");

	UNimbusCheatManager_SNL_CheckLocalMMRValue_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CameraSideTargetFollow
// (Final, Exec, Native, Public)
// Parameters:
// int                            ClientIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_CameraSideTargetFollow(int ClientIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CameraSideTargetFollow");

	UNimbusCheatManager_SNL_CameraSideTargetFollow_Params params;
	params.ClientIndex = ClientIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CameraSideSetOffset
// (Final, Exec, Native, Public)
// Parameters:
// float                          Right                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Forward                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          Up                             (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_CameraSideSetOffset(float Right, float Forward, float Up)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CameraSideSetOffset");

	UNimbusCheatManager_SNL_CameraSideSetOffset_Params params;
	params.Right = Right;
	params.Forward = Forward;
	params.Up = Up;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CameraSide
// (Final, Exec, Native, Public)
// Parameters:
// int                            ClientIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_CameraSide(int ClientIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CameraSide");

	UNimbusCheatManager_SNL_CameraSide_Params params;
	params.ClientIndex = ClientIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CameraMovePlayer
// (Final, Exec, Native, Public)
// Parameters:
// int                            ClientIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_CameraMovePlayer(int ClientIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CameraMovePlayer");

	UNimbusCheatManager_SNL_CameraMovePlayer_Params params;
	params.ClientIndex = ClientIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CameraFree
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_CameraFree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CameraFree");

	UNimbusCheatManager_SNL_CameraFree_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CameraFollowClient
// (Final, Exec, Native, Public)
// Parameters:
// int                            ClientIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SNL_CameraFollowClient(int ClientIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CameraFollowClient");

	UNimbusCheatManager_SNL_CameraFollowClient_Params params;
	params.ClientIndex = ClientIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_CameraDisable
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_CameraDisable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_CameraDisable");

	UNimbusCheatManager_SNL_CameraDisable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SNL_ArrangeWindows
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SNL_ArrangeWindows()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SNL_ArrangeWindows");

	UNimbusCheatManager_SNL_ArrangeWindows_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SkipToPhase
// (Final, Exec, Native, Public)
// Parameters:
// int                            PhaseNo                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SkipToPhase(int PhaseNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SkipToPhase");

	UNimbusCheatManager_SkipToPhase_Params params;
	params.PhaseNo = PhaseNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SimulateSaveDataMinSizeKB
// (Final, Exec, Native, Public)
// Parameters:
// int                            KiloByteSize                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SimulateSaveDataMinSizeKB(int KiloByteSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SimulateSaveDataMinSizeKB");

	UNimbusCheatManager_SimulateSaveDataMinSizeKB_Params params;
	params.KiloByteSize = KiloByteSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SimulateSaveDataMinSize
// (Final, Exec, Native, Public)
// Parameters:
// int                            ByteSize                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SimulateSaveDataMinSize(int ByteSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SimulateSaveDataMinSize");

	UNimbusCheatManager_SimulateSaveDataMinSize_Params params;
	params.ByteSize = ByteSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SimulateMissileDeath
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SimulateMissileDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SimulateMissileDeath");

	UNimbusCheatManager_SimulateMissileDeath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SimulateCorruptedSaveDataInMemory
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bIsCorruptedSave               (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SimulateCorruptedSaveDataInMemory(bool bIsCorruptedSave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SimulateCorruptedSaveDataInMemory");

	UNimbusCheatManager_SimulateCorruptedSaveDataInMemory_Params params;
	params.bIsCorruptedSave = bIsCorruptedSave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ShutdownAutomationTest
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ShutdownAutomationTest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ShutdownAutomationTest");

	UNimbusCheatManager_ShutdownAutomationTest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ShowWeatherParticleLocation
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ShowWeatherParticleLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ShowWeatherParticleLocation");

	UNimbusCheatManager_ShowWeatherParticleLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ShowTunnelInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ShowTunnelInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ShowTunnelInfo");

	UNimbusCheatManager_ShowTunnelInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ShowSnapPositionDebug
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ShowSnapPositionDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ShowSnapPositionDebug");

	UNimbusCheatManager_ShowSnapPositionDebug_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ShowSearchLightDebug
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ShowSearchLightDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ShowSearchLightDebug");

	UNimbusCheatManager_ShowSearchLightDebug_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ShowImpactCameraInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ShowImpactCameraInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ShowImpactCameraInfo");

	UNimbusCheatManager_ShowImpactCameraInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ShowDialogStack
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ShowDialogStack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ShowDialogStack");

	UNimbusCheatManager_ShowDialogStack_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ShowAIASSeaExplosionDebug
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ShowAIASSeaExplosionDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ShowAIASSeaExplosionDebug");

	UNimbusCheatManager_ShowAIASSeaExplosionDebug_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetWeaponDebugContainerDisplayMode
// (Final, Exec, Native, Public)
// Parameters:
// int                            Mode                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetWeaponDebugContainerDisplayMode(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetWeaponDebugContainerDisplayMode");

	UNimbusCheatManager_SetWeaponDebugContainerDisplayMode_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRWidgetDistance
// (Final, Exec, Native, Public)
// Parameters:
// float                          DistanceOffset                 (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRWidgetDistance(float DistanceOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRWidgetDistance");

	UNimbusCheatManager_SetVRWidgetDistance_Params params;
	params.DistanceOffset = DistanceOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRWeaponInfoYaw
// (Final, Exec, Native, Public)
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRWeaponInfoYaw(float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRWeaponInfoYaw");

	UNimbusCheatManager_SetVRWeaponInfoYaw_Params params;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRWeaponInfoScale
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRWeaponInfoScale(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRWeaponInfoScale");

	UNimbusCheatManager_SetVRWeaponInfoScale_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRWeaponInfoPosition
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRWeaponInfoPosition(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRWeaponInfoPosition");

	UNimbusCheatManager_SetVRWeaponInfoPosition_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRWeaponInfoPitch
// (Final, Exec, Native, Public)
// Parameters:
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRWeaponInfoPitch(float Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRWeaponInfoPitch");

	UNimbusCheatManager_SetVRWeaponInfoPitch_Params params;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRVelocityVectorScale
// (Final, Exec, Native, Public)
// Parameters:
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRVelocityVectorScale(float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRVelocityVectorScale");

	UNimbusCheatManager_SetVRVelocityVectorScale_Params params;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRTextInfoYaw
// (Final, Exec, Native, Public)
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRTextInfoYaw(float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRTextInfoYaw");

	UNimbusCheatManager_SetVRTextInfoYaw_Params params;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRTextInfoScale
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRTextInfoScale(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRTextInfoScale");

	UNimbusCheatManager_SetVRTextInfoScale_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRTextInfoPosition
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRTextInfoPosition(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRTextInfoPosition");

	UNimbusCheatManager_SetVRTextInfoPosition_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRTextInfoPitch
// (Final, Exec, Native, Public)
// Parameters:
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRTextInfoPitch(float Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRTextInfoPitch");

	UNimbusCheatManager_SetVRTextInfoPitch_Params params;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRSubtitlePosition
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRSubtitlePosition(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRSubtitlePosition");

	UNimbusCheatManager_SetVRSubtitlePosition_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRRadarYaw
// (Final, Exec, Native, Public)
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRRadarYaw(float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRRadarYaw");

	UNimbusCheatManager_SetVRRadarYaw_Params params;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRRadarScale
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRRadarScale(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRRadarScale");

	UNimbusCheatManager_SetVRRadarScale_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRRadarPosition
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRRadarPosition(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRRadarPosition");

	UNimbusCheatManager_SetVRRadarPosition_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRRadarPitch
// (Final, Exec, Native, Public)
// Parameters:
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRRadarPitch(float Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRRadarPitch");

	UNimbusCheatManager_SetVRRadarPitch_Params params;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRPlaneInfoYaw
// (Final, Exec, Native, Public)
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRPlaneInfoYaw(float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRPlaneInfoYaw");

	UNimbusCheatManager_SetVRPlaneInfoYaw_Params params;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRPlaneInfoScale
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRPlaneInfoScale(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRPlaneInfoScale");

	UNimbusCheatManager_SetVRPlaneInfoScale_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRPlaneInfoPosition
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRPlaneInfoPosition(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRPlaneInfoPosition");

	UNimbusCheatManager_SetVRPlaneInfoPosition_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRPlaneInfoPitch
// (Final, Exec, Native, Public)
// Parameters:
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRPlaneInfoPitch(float Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRPlaneInfoPitch");

	UNimbusCheatManager_SetVRPlaneInfoPitch_Params params;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRPitchMeterScale
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRPitchMeterScale(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRPitchMeterScale");

	UNimbusCheatManager_SetVRPitchMeterScale_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRPitchMeterDepth
// (Final, Exec, Native, Public)
// Parameters:
// float                          Depth                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRPitchMeterDepth(float Depth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRPitchMeterDepth");

	UNimbusCheatManager_SetVRPitchMeterDepth_Params params;
	params.Depth = Depth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVROverlayGlow
// (Final, Exec, Native, Public)
// Parameters:
// float                          R                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          G                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          B                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          A                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVROverlayGlow(float R, float G, float B, float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVROverlayGlow");

	UNimbusCheatManager_SetVROverlayGlow_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVROverlayCurve
// (Final, Exec, Native, Public)
// Parameters:
// float                          Distance                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          curveParam                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVROverlayCurve(float Distance, float curveParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVROverlayCurve");

	UNimbusCheatManager_SetVROverlayCurve_Params params;
	params.Distance = Distance;
	params.curveParam = curveParam;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRHangarCameraRotationYaw
// (Final, Exec, Native, Public)
// Parameters:
// float                          Yaw                            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRHangarCameraRotationYaw(float Yaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRHangarCameraRotationYaw");

	UNimbusCheatManager_SetVRHangarCameraRotationYaw_Params params;
	params.Yaw = Yaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRHangarCameraRotationRoll
// (Final, Exec, Native, Public)
// Parameters:
// float                          Roll                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRHangarCameraRotationRoll(float Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRHangarCameraRotationRoll");

	UNimbusCheatManager_SetVRHangarCameraRotationRoll_Params params;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRHangarCameraRotationPitch
// (Final, Exec, Native, Public)
// Parameters:
// float                          Pitch                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRHangarCameraRotationPitch(float Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRHangarCameraRotationPitch");

	UNimbusCheatManager_SetVRHangarCameraRotationPitch_Params params;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRHangarCameraRotation
// (Final, Exec, Native, Public, HasDefaults)
// Parameters:
// struct FRotator                Rotation                       (Parm, IsPlainOldData)

void UNimbusCheatManager::SetVRHangarCameraRotation(const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRHangarCameraRotation");

	UNimbusCheatManager_SetVRHangarCameraRotation_Params params;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRHangarCameraPositionZ
// (Final, Exec, Native, Public)
// Parameters:
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRHangarCameraPositionZ(float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRHangarCameraPositionZ");

	UNimbusCheatManager_SetVRHangarCameraPositionZ_Params params;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRHangarCameraPositionY
// (Final, Exec, Native, Public)
// Parameters:
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRHangarCameraPositionY(float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRHangarCameraPositionY");

	UNimbusCheatManager_SetVRHangarCameraPositionY_Params params;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRHangarCameraPositionX
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRHangarCameraPositionX(float X)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRHangarCameraPositionX");

	UNimbusCheatManager_SetVRHangarCameraPositionX_Params params;
	params.X = X;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRHangarCameraPosition
// (Final, Exec, Native, Public, HasDefaults)
// Parameters:
// struct FVector                 Position                       (Parm, IsPlainOldData)

void UNimbusCheatManager::SetVRHangarCameraPosition(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRHangarCameraPosition");

	UNimbusCheatManager_SetVRHangarCameraPosition_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRCompassScale
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRCompassScale(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRCompassScale");

	UNimbusCheatManager_SetVRCompassScale_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRCompassHeight
// (Final, Exec, Native, Public)
// Parameters:
// float                          Depth                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRCompassHeight(float Depth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRCompassHeight");

	UNimbusCheatManager_SetVRCompassHeight_Params params;
	params.Depth = Depth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRCompassDepth
// (Final, Exec, Native, Public)
// Parameters:
// float                          Depth                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRCompassDepth(float Depth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRCompassDepth");

	UNimbusCheatManager_SetVRCompassDepth_Params params;
	params.Depth = Depth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRCampaignMRP
// (Final, Exec, Native, Public)
// Parameters:
// uint64_t                       NewMRP                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRCampaignMRP(uint64_t NewMRP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRCampaignMRP");

	UNimbusCheatManager_SetVRCampaignMRP_Params params;
	params.NewMRP = NewMRP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRCameraPositionZ
// (Final, Exec, Native, Public)
// Parameters:
// float                          Z                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRCameraPositionZ(float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRCameraPositionZ");

	UNimbusCheatManager_SetVRCameraPositionZ_Params params;
	params.Z = Z;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRCameraPositionY
// (Final, Exec, Native, Public)
// Parameters:
// float                          Y                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRCameraPositionY(float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRCameraPositionY");

	UNimbusCheatManager_SetVRCameraPositionY_Params params;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVRCameraPositionX
// (Final, Exec, Native, Public)
// Parameters:
// float                          X                              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVRCameraPositionX(float X)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVRCameraPositionX");

	UNimbusCheatManager_SetVRCameraPositionX_Params params;
	params.X = X;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVoiceLanguage
// (Final, Exec, Native, Public)
// Parameters:
// int                            Languange                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVoiceLanguage(int Languange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVoiceLanguage");

	UNimbusCheatManager_SetVoiceLanguage_Params params;
	params.Languange = Languange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetVibrationScalar
// (Final, Exec, Native, Public)
// Parameters:
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetVibrationScalar(float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetVibrationScalar");

	UNimbusCheatManager_SetVibrationScalar_Params params;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetTrueSkyEnabled
// (Final, Exec, Native, Public)
// Parameters:
// bool                           Value                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetTrueSkyEnabled(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetTrueSkyEnabled");

	UNimbusCheatManager_SetTrueSkyEnabled_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetTransitionAsyncLoadingTimeLimit
// (Final, Exec, Native, Public)
// Parameters:
// float                          TimeLimit                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetTransitionAsyncLoadingTimeLimit(float TimeLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetTransitionAsyncLoadingTimeLimit");

	UNimbusCheatManager_SetTransitionAsyncLoadingTimeLimit_Params params;
	params.TimeLimit = TimeLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetTeleportDistance
// (Final, Exec, Native, Public)
// Parameters:
// float                          DistanceUU                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetTeleportDistance(float DistanceUU)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetTeleportDistance");

	UNimbusCheatManager_SetTeleportDistance_Params params;
	params.DistanceUU = DistanceUU;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetTargetSelectionWideMode
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bWideMode                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetTargetSelectionWideMode(bool bWideMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetTargetSelectionWideMode");

	UNimbusCheatManager_SetTargetSelectionWideMode_Params params;
	params.bWideMode = bWideMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetTargetSelectionAngleFirst
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bAngleFirst                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetTargetSelectionAngleFirst(bool bAngleFirst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetTargetSelectionAngleFirst");

	UNimbusCheatManager_SetTargetSelectionAngleFirst_Params params;
	params.bAngleFirst = bAngleFirst;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetSubtitleLanguage
// (Final, Exec, Native, Public)
// Parameters:
// int                            Languange                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetSubtitleLanguage(int Languange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetSubtitleLanguage");

	UNimbusCheatManager_SetSubtitleLanguage_Params params;
	params.Languange = Languange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetStreamingInstallProgress
// (Final, Exec, Native, Public)
// Parameters:
// int                            Percentage                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            Seconds                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetStreamingInstallProgress(int Percentage, int Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetStreamingInstallProgress");

	UNimbusCheatManager_SetStreamingInstallProgress_Params params;
	params.Percentage = Percentage;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetStreamingInstallChunk
// (Final, Exec, Native, Public)
// Parameters:
// int                            FinishedChunkNo                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetStreamingInstallChunk(int FinishedChunkNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetStreamingInstallChunk");

	UNimbusCheatManager_SetStreamingInstallChunk_Params params;
	params.FinishedChunkNo = FinishedChunkNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetStereoDepthDirectly
// (Final, Exec, Native, Public)
// Parameters:
// float                          Depth                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetStereoDepthDirectly(float Depth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetStereoDepthDirectly");

	UNimbusCheatManager_SetStereoDepthDirectly_Params params;
	params.Depth = Depth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetStereoDepth
// (Final, Exec, Native, Public)
// Parameters:
// float                          Depth                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetStereoDepth(float Depth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetStereoDepth");

	UNimbusCheatManager_SetStereoDepth_Params params;
	params.Depth = Depth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetSearchEnemyRangeDisplayMode
// (Final, Exec, Native, Public)
// Parameters:
// int                            DisplayMode                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetSearchEnemyRangeDisplayMode(int DisplayMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetSearchEnemyRangeDisplayMode");

	UNimbusCheatManager_SetSearchEnemyRangeDisplayMode_Params params;
	params.DisplayMode = DisplayMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetSaveLoadThreadMinDelay
// (Final, Exec, Native, Public)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetSaveLoadThreadMinDelay(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetSaveLoadThreadMinDelay");

	UNimbusCheatManager_SetSaveLoadThreadMinDelay_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetSaveLoadSimulatedStatus
// (Final, Exec, Native, Public)
// Parameters:
// int                            StatusValue                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetSaveLoadSimulatedStatus(int StatusValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetSaveLoadSimulatedStatus");

	UNimbusCheatManager_SetSaveLoadSimulatedStatus_Params params;
	params.StatusValue = StatusValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetSaveLoadDialogMinDelay
// (Final, Exec, Native, Public)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetSaveLoadDialogMinDelay(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetSaveLoadDialogMinDelay");

	UNimbusCheatManager_SetSaveLoadDialogMinDelay_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetReplaySlowMotionSpeed
// (Final, Exec, Native, Public)
// Parameters:
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetReplaySlowMotionSpeed(float Speed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetReplaySlowMotionSpeed");

	UNimbusCheatManager_SetReplaySlowMotionSpeed_Params params;
	params.Speed = Speed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetReplayFastForwardSpeed
// (Final, Exec, Native, Public)
// Parameters:
// float                          Speed                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetReplayFastForwardSpeed(float Speed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetReplayFastForwardSpeed");

	UNimbusCheatManager_SetReplayFastForwardSpeed_Params params;
	params.Speed = Speed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetPlayerTickRate
// (Final, Exec, Native, Public)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetPlayerTickRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetPlayerTickRate");

	UNimbusCheatManager_SetPlayerTickRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetPlayerSpecialWeapon
// (Final, Exec, Native, Public)
// Parameters:
// int                            Number                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetPlayerSpecialWeapon(int Number)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetPlayerSpecialWeapon");

	UNimbusCheatManager_SetPlayerSpecialWeapon_Params params;
	params.Number = Number;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetPlayerSkin
// (Final, Exec, Native, Public)
// Parameters:
// int                            Number                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetPlayerSkin(int Number)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetPlayerSkin");

	UNimbusCheatManager_SetPlayerSkin_Params params;
	params.Number = Number;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetPlayerMissilePowerCoefficient
// (Final, Exec, Native, Public)
// Parameters:
// float                          Coefficient                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetPlayerMissilePowerCoefficient(float Coefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetPlayerMissilePowerCoefficient");

	UNimbusCheatManager_SetPlayerMissilePowerCoefficient_Params params;
	params.Coefficient = Coefficient;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetPlayerJamming
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bIsJamming                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetPlayerJamming(bool bIsJamming)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetPlayerJamming");

	UNimbusCheatManager_SetPlayerJamming_Params params;
	params.bIsJamming = bIsJamming;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetPlayerEmblem
// (Final, Exec, Native, Public)
// Parameters:
// int                            EmblemID                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetPlayerEmblem(int EmblemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetPlayerEmblem");

	UNimbusCheatManager_SetPlayerEmblem_Params params;
	params.EmblemID = EmblemID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetPlayerControlType
// (Final, Exec, Native, Public)
// Parameters:
// int                            Type                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetPlayerControlType(int Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetPlayerControlType");

	UNimbusCheatManager_SetPlayerControlType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetPlayerBrakingForce
// (Final, Exec, Native, Public)
// Parameters:
// float                          Force                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetPlayerBrakingForce(float Force)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetPlayerBrakingForce");

	UNimbusCheatManager_SetPlayerBrakingForce_Params params;
	params.Force = Force;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetNimbusUserState
// (Final, Exec, Native, Public)
// Parameters:
// int                            StateIndex                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetNimbusUserState(int StateIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetNimbusUserState");

	UNimbusCheatManager_SetNimbusUserState_Params params;
	params.StateIndex = StateIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetMissionSetupPauseFrame
// (Final, Exec, Native, Public)
// Parameters:
// int                            frame                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetMissionSetupPauseFrame(int frame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetMissionSetupPauseFrame");

	UNimbusCheatManager_SetMissionSetupPauseFrame_Params params;
	params.frame = frame;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetMissionPhaseTimeLeft
// (Final, Exec, Native, Public)
// Parameters:
// float                          TimeLeftSeconds                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetMissionPhaseTimeLeft(float TimeLeftSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetMissionPhaseTimeLeft");

	UNimbusCheatManager_SetMissionPhaseTimeLeft_Params params;
	params.TimeLeftSeconds = TimeLeftSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetLoadingTips
// (Final, Exec, Native, Public)
// Parameters:
// int                            TipsID                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetLoadingTips(int TipsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetLoadingTips");

	UNimbusCheatManager_SetLoadingTips_Params params;
	params.TipsID = TipsID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetLanguage
// (Final, Exec, Native, Public)
// Parameters:
// int                            Languange                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetLanguage(int Languange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetLanguage");

	UNimbusCheatManager_SetLanguage_Params params;
	params.Languange = Languange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetIsInJammingArea
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bIsJamming                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetIsInJammingArea(bool bIsJamming)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetIsInJammingArea");

	UNimbusCheatManager_SetIsInJammingArea_Params params;
	params.bIsJamming = bIsJamming;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetIdleIconWaitingTime
// (Final, Exec, Native, Public)
// Parameters:
// float                          Seconds                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetIdleIconWaitingTime(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetIdleIconWaitingTime");

	UNimbusCheatManager_SetIdleIconWaitingTime_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetHudMADParameter
// (Final, Exec, Native, Public)
// Parameters:
// float                          Peak                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          WaveNum                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          WaveOffset                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetHudMADParameter(float Peak, float Scale, float WaveNum, float WaveOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetHudMADParameter");

	UNimbusCheatManager_SetHudMADParameter_Params params;
	params.Peak = Peak;
	params.Scale = Scale;
	params.WaveNum = WaveNum;
	params.WaveOffset = WaveOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetHUDDistortionScale
// (Final, Exec, Native, Public)
// Parameters:
// float                          NewScale                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetHUDDistortionScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetHUDDistortionScale");

	UNimbusCheatManager_SetHUDDistortionScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetHealthPercentage
// (Final, Exec, Native, Public)
// Parameters:
// float                          Percentage                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetHealthPercentage(float Percentage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetHealthPercentage");

	UNimbusCheatManager_SetHealthPercentage_Params params;
	params.Percentage = Percentage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetGamma
// (Final, Exec, Native, Public)
// Parameters:
// int                            OptionsValue                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetGamma(int OptionsValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetGamma");

	UNimbusCheatManager_SetGamma_Params params;
	params.OptionsValue = OptionsValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetForceSandDensity
// (Final, Exec, Native, Public)
// Parameters:
// float                          Density                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetForceSandDensity(float Density)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetForceSandDensity");

	UNimbusCheatManager_SetForceSandDensity_Params params;
	params.Density = Density;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetForceEquipUpgradeParts
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 PartsIDs                       (Parm, ZeroConstructor)

void UNimbusCheatManager::SetForceEquipUpgradeParts(const struct FString& PartsIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetForceEquipUpgradeParts");

	UNimbusCheatManager_SetForceEquipUpgradeParts_Params params;
	params.PartsIDs = PartsIDs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetForceEmblemID
// (Final, Exec, Native, Public)
// Parameters:
// int                            EmblemID                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetForceEmblemID(int EmblemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetForceEmblemID");

	UNimbusCheatManager_SetForceEmblemID_Params params;
	params.EmblemID = EmblemID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetForceCloudDensity
// (Final, Exec, Native, Public)
// Parameters:
// float                          Density                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetForceCloudDensity(float Density)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetForceCloudDensity");

	UNimbusCheatManager_SetForceCloudDensity_Params params;
	params.Density = Density;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetDistanceUnit
// (Final, Exec, Native, Public)
// Parameters:
// int                            UnitType                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetDistanceUnit(int UnitType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetDistanceUnit");

	UNimbusCheatManager_SetDistanceUnit_Params params;
	params.UnitType = UnitType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetDisableRadioGroupFilter
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 RadioGroups                    (Parm, ZeroConstructor)

void UNimbusCheatManager::SetDisableRadioGroupFilter(const struct FString& RadioGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetDisableRadioGroupFilter");

	UNimbusCheatManager_SetDisableRadioGroupFilter_Params params;
	params.RadioGroups = RadioGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetDebugObjectMapMode
// (Final, Exec, Native, Public)
// Parameters:
// int                            Mode                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetDebugObjectMapMode(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetDebugObjectMapMode");

	UNimbusCheatManager_SetDebugObjectMapMode_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetDebugContainerVisibilityDistance
// (Final, Exec, Native, Public)
// Parameters:
// float                          DistanceUU                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetDebugContainerVisibilityDistance(float DistanceUU)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetDebugContainerVisibilityDistance");

	UNimbusCheatManager_SetDebugContainerVisibilityDistance_Params params;
	params.DistanceUU = DistanceUU;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetDebugContainerDisplayMode
// (Final, Exec, Native, Public)
// Parameters:
// int                            DisplayMode                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetDebugContainerDisplayMode(int DisplayMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetDebugContainerDisplayMode");

	UNimbusCheatManager_SetDebugContainerDisplayMode_Params params;
	params.DisplayMode = DisplayMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetDebugAssistAngleForRemotePlayer
// (Final, Exec, Native, Public)
// Parameters:
// float                          AssistAngle                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetDebugAssistAngleForRemotePlayer(float AssistAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetDebugAssistAngleForRemotePlayer");

	UNimbusCheatManager_SetDebugAssistAngleForRemotePlayer_Params params;
	params.AssistAngle = AssistAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetCollectLoadedTextureIncreaseInMipLevel
// (Final, Exec, Native, Public)
// Parameters:
// int                            InMipLevel                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetCollectLoadedTextureIncreaseInMipLevel(int InMipLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetCollectLoadedTextureIncreaseInMipLevel");

	UNimbusCheatManager_SetCollectLoadedTextureIncreaseInMipLevel_Params params;
	params.InMipLevel = InMipLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetCollectLoadedTextureIGCNo
// (Final, Exec, Native, Public)
// Parameters:
// int                            InIGCNo                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetCollectLoadedTextureIGCNo(int InIGCNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetCollectLoadedTextureIGCNo");

	UNimbusCheatManager_SetCollectLoadedTextureIGCNo_Params params;
	params.InIGCNo = InIGCNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetCampaignMRP
// (Final, Exec, Native, Public)
// Parameters:
// uint64_t                       NewMRP                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetCampaignMRP(uint64_t NewMRP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetCampaignMRP");

	UNimbusCheatManager_SetCampaignMRP_Params params;
	params.NewMRP = NewMRP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetAllAttackTargetsException
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetAllAttackTargetsException(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetAllAttackTargetsException");

	UNimbusCheatManager_SetAllAttackTargetsException_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetAIWeaponFilter
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 WeaponLabel                    (Parm, ZeroConstructor)

void UNimbusCheatManager::SetAIWeaponFilter(const struct FString& WeaponLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetAIWeaponFilter");

	UNimbusCheatManager_SetAIWeaponFilter_Params params;
	params.WeaponLabel = WeaponLabel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetAIPlaneTickRateDuringMission
// (Final, Exec, Native, Public)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetAIPlaneTickRateDuringMission(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetAIPlaneTickRateDuringMission");

	UNimbusCheatManager_SetAIPlaneTickRateDuringMission_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SetAIPlaneTickRate
// (Final, Exec, Native, Public)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::SetAIPlaneTickRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SetAIPlaneTickRate");

	UNimbusCheatManager_SetAIPlaneTickRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SelectRandomMenuItem
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SelectRandomMenuItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SelectRandomMenuItem");

	UNimbusCheatManager_SelectRandomMenuItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SelectNextMenuItem
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SelectNextMenuItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SelectNextMenuItem");

	UNimbusCheatManager_SelectNextMenuItem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SaveSigmaData
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SaveSigmaData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SaveSigmaData");

	UNimbusCheatManager_SaveSigmaData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.SaveAllGameData
// (Final, Exec, Native, Public)

void UNimbusCheatManager::SaveAllGameData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.SaveAllGameData");

	UNimbusCheatManager_SaveAllGameData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ReturnToBoot
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ReturnToBoot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ReturnToBoot");

	UNimbusCheatManager_ReturnToBoot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.RestockEquipment
// (Final, Exec, Native, Public)

void UNimbusCheatManager::RestockEquipment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.RestockEquipment");

	UNimbusCheatManager_RestockEquipment_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ResetUserSetting
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ResetUserSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ResetUserSetting");

	UNimbusCheatManager_ResetUserSetting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ResetSigmaSaveData
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ResetSigmaSaveData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ResetSigmaSaveData");

	UNimbusCheatManager_ResetSigmaSaveData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ResetRadioPlayCounts
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ResetRadioPlayCounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ResetRadioPlayCounts");

	UNimbusCheatManager_ResetRadioPlayCounts_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ResetFPSTracking
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ResetFPSTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ResetFPSTracking");

	UNimbusCheatManager_ResetFPSTracking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ResetAutomaticSpeakerIDs
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ResetAutomaticSpeakerIDs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ResetAutomaticSpeakerIDs");

	UNimbusCheatManager_ResetAutomaticSpeakerIDs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ResetAllSaveData
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ResetAllSaveData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ResetAllSaveData");

	UNimbusCheatManager_ResetAllSaveData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ResetAchievements
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ResetAchievements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ResetAchievements");

	UNimbusCheatManager_ResetAchievements_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ReplayRandomCameraCondition
// (Final, Exec, Native, Public)
// Parameters:
// int                            Mode                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ReplayRandomCameraCondition(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ReplayRandomCameraCondition");

	UNimbusCheatManager_ReplayRandomCameraCondition_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ReloadSoundBank
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ReloadSoundBank()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ReloadSoundBank");

	UNimbusCheatManager_ReloadSoundBank_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ReloadLevel
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ReloadLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ReloadLevel");

	UNimbusCheatManager_ReloadLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.RadioSuspendToMiniGame
// (Final, Exec, Native, Public)

void UNimbusCheatManager::RadioSuspendToMiniGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.RadioSuspendToMiniGame");

	UNimbusCheatManager_RadioSuspendToMiniGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.RadioResumeFromMiniGame
// (Final, Exec, Native, Public)

void UNimbusCheatManager::RadioResumeFromMiniGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.RadioResumeFromMiniGame");

	UNimbusCheatManager_RadioResumeFromMiniGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.QueryUIStatus
// (Final, Exec, Native, Public)

void UNimbusCheatManager::QueryUIStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.QueryUIStatus");

	UNimbusCheatManager_QueryUIStatus_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.QueryStorageInfo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::QueryStorageInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.QueryStorageInfo");

	UNimbusCheatManager_QueryStorageInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PrintVRSubtitlePosition
// (Final, Exec, Native, Public)

void UNimbusCheatManager::PrintVRSubtitlePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PrintVRSubtitlePosition");

	UNimbusCheatManager_PrintVRSubtitlePosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PrintConditionActionMap
// (Final, Exec, Native, Public)

void UNimbusCheatManager::PrintConditionActionMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PrintConditionActionMap");

	UNimbusCheatManager_PrintConditionActionMap_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PlaySavedReplay
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 ReplayName                     (Parm, ZeroConstructor)

void UNimbusCheatManager::PlaySavedReplay(const struct FString& ReplayName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PlaySavedReplay");

	UNimbusCheatManager_PlaySavedReplay_Params params;
	params.ReplayName = ReplayName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PlayRadioTable
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 RadioTableName                 (Parm, ZeroConstructor)

void UNimbusCheatManager::PlayRadioTable(const struct FString& RadioTableName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PlayRadioTable");

	UNimbusCheatManager_PlayRadioTable_Params params;
	params.RadioTableName = RadioTableName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PlayImpactCamera
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   CameraName                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::PlayImpactCamera(const struct FName& CameraName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PlayImpactCamera");

	UNimbusCheatManager_PlayImpactCamera_Params params;
	params.CameraName = CameraName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PlayIGC
// (Final, Exec, Native, Public)
// Parameters:
// int                            IGCNumber                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::PlayIGC(int IGCNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PlayIGC");

	UNimbusCheatManager_PlayIGC_Params params;
	params.IGCNumber = IGCNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PlayerStruckByLightning
// (Final, Exec, Native, Public)

void UNimbusCheatManager::PlayerStruckByLightning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PlayerStruckByLightning");

	UNimbusCheatManager_PlayerStruckByLightning_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PingTargettedEnemyInRadar
// (Final, Exec, Native, Public)

void UNimbusCheatManager::PingTargettedEnemyInRadar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PingTargettedEnemyInRadar");

	UNimbusCheatManager_PingTargettedEnemyInRadar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.PingHelpInRadar
// (Final, Exec, Native, Public)

void UNimbusCheatManager::PingHelpInRadar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.PingHelpInRadar");

	UNimbusCheatManager_PingHelpInRadar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.OpenDialog
// (Final, Exec, Native, Public)
// Parameters:
// int                            DialogID                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::OpenDialog(int DialogID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.OpenDialog");

	UNimbusCheatManager_OpenDialog_Params params;
	params.DialogID = DialogID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.NearClip_NotTouch
// (Final, Exec, Native, Public)

void UNimbusCheatManager::NearClip_NotTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.NearClip_NotTouch");

	UNimbusCheatManager_NearClip_NotTouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.NearClip_AlwaysReset
// (Final, Exec, Native, Public)

void UNimbusCheatManager::NearClip_AlwaysReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.NearClip_AlwaysReset");

	UNimbusCheatManager_NearClip_AlwaysReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.MoreFireworksPlease
// (Final, Exec, Native, Public)
// Parameters:
// int                            Count                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::MoreFireworksPlease(int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.MoreFireworksPlease");

	UNimbusCheatManager_MoreFireworksPlease_Params params;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.MissionTimeLeftToExpire
// (Final, Exec, Native, Public)
// Parameters:
// float                          RemainingTimeInSeconds         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::MissionTimeLeftToExpire(float RemainingTimeInSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.MissionTimeLeftToExpire");

	UNimbusCheatManager_MissionTimeLeftToExpire_Params params;
	params.RemainingTimeInSeconds = RemainingTimeInSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.LockVRAircraftTree
// (Final, Exec, Native, Public)

void UNimbusCheatManager::LockVRAircraftTree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.LockVRAircraftTree");

	UNimbusCheatManager_LockVRAircraftTree_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.LockMultiplayAircraftTree
// (Final, Exec, Native, Public)

void UNimbusCheatManager::LockMultiplayAircraftTree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.LockMultiplayAircraftTree");

	UNimbusCheatManager_LockMultiplayAircraftTree_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.LockAircraftTree
// (Final, Exec, Native, Public)

void UNimbusCheatManager::LockAircraftTree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.LockAircraftTree");

	UNimbusCheatManager_LockAircraftTree_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.LockAircraft
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 PlaneStringID                  (Parm, ZeroConstructor)

void UNimbusCheatManager::LockAircraft(const struct FString& PlaneStringID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.LockAircraft");

	UNimbusCheatManager_LockAircraft_Params params;
	params.PlaneStringID = PlaneStringID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.LoadSigmaSaveData
// (Final, Exec, Native, Public)

void UNimbusCheatManager::LoadSigmaSaveData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.LoadSigmaSaveData");

	UNimbusCheatManager_LoadSigmaSaveData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.LoadAllSaveData
// (Final, Exec, Native, Public)

void UNimbusCheatManager::LoadAllSaveData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.LoadAllSaveData");

	UNimbusCheatManager_LoadAllSaveData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.KillTGT
// (Final, Exec, Native, Public)

void UNimbusCheatManager::KillTGT()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.KillTGT");

	UNimbusCheatManager_KillTGT_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.KillTarget
// (Final, Exec, Native, Public)

void UNimbusCheatManager::KillTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.KillTarget");

	UNimbusCheatManager_KillTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.KillSelf
// (Final, Exec, Native, Public)

void UNimbusCheatManager::KillSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.KillSelf");

	UNimbusCheatManager_KillSelf_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.KillNonTGT
// (Final, Exec, Native, Public)

void UNimbusCheatManager::KillNonTGT()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.KillNonTGT");

	UNimbusCheatManager_KillNonTGT_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.KillNextTarget
// (Final, Exec, Native, Public)

void UNimbusCheatManager::KillNextTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.KillNextTarget");

	UNimbusCheatManager_KillNextTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.KillLockedOnTargets
// (Final, Exec, Native, Public)

void UNimbusCheatManager::KillLockedOnTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.KillLockedOnTargets");

	UNimbusCheatManager_KillLockedOnTargets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.KillCameraChangeMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::KillCameraChangeMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.KillCameraChangeMode");

	UNimbusCheatManager_KillCameraChangeMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.KillAllies
// (Final, Exec, Native, Public)

void UNimbusCheatManager::KillAllies()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.KillAllies");

	UNimbusCheatManager_KillAllies_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ItsOver9000
// (Final, Exec, Native, Public)
// Parameters:
// float                          Multiplier                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ItsOver9000(float Multiplier, bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ItsOver9000");

	UNimbusCheatManager_ItsOver9000_Params params;
	params.Multiplier = Multiplier;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.IsConnectedToOnlineService
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bForceCheck                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::IsConnectedToOnlineService(bool bForceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.IsConnectedToOnlineService");

	UNimbusCheatManager_IsConnectedToOnlineService_Params params;
	params.bForceCheck = bForceCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.IsConnectedToNetwork
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bForceCheck                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::IsConnectedToNetwork(bool bForceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.IsConnectedToNetwork");

	UNimbusCheatManager_IsConnectedToNetwork_Params params;
	params.bForceCheck = bForceCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ImpactCameraForcedPlayCameraName
// (Final, Exec, Native, Public)
// Parameters:
// struct FName                   CameraName                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ImpactCameraForcedPlayCameraName(const struct FName& CameraName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ImpactCameraForcedPlayCameraName");

	UNimbusCheatManager_ImpactCameraForcedPlayCameraName_Params params;
	params.CameraName = CameraName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ImpactCameraForcedEmergencyMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ImpactCameraForcedEmergencyMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ImpactCameraForcedEmergencyMode");

	UNimbusCheatManager_ImpactCameraForcedEmergencyMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ImpactCameraChangeMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ImpactCameraChangeMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ImpactCameraChangeMode");

	UNimbusCheatManager_ImpactCameraChangeMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ImpactCameraChangeDebugSphereMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ImpactCameraChangeDebugSphereMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ImpactCameraChangeDebugSphereMode");

	UNimbusCheatManager_ImpactCameraChangeDebugSphereMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.HideStaticMesh
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 FilterStr                      (Parm, ZeroConstructor)
// bool                           bHide                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::HideStaticMesh(const struct FString& FilterStr, bool bHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.HideStaticMesh");

	UNimbusCheatManager_HideStaticMesh_Params params;
	params.FilterStr = FilterStr;
	params.bHide = bHide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.HideDebugInfo
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bHide                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::HideDebugInfo(bool bHide)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.HideDebugInfo");

	UNimbusCheatManager_HideDebugInfo_Params params;
	params.bHide = bHide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.GundariumUpgrade
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::GundariumUpgrade(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.GundariumUpgrade");

	UNimbusCheatManager_GundariumUpgrade_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.GodAI
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::GodAI(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.GodAI");

	UNimbusCheatManager_GodAI_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.GetOnlineConnectivity
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bForceCheck                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::GetOnlineConnectivity(bool bForceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.GetOnlineConnectivity");

	UNimbusCheatManager_GetOnlineConnectivity_Params params;
	params.bForceCheck = bForceCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ForceStaticMeshLOD
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 FilterStr                      (Parm, ZeroConstructor)
// int                            InForcedLOD                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ForceStaticMeshLOD(const struct FString& FilterStr, int InForcedLOD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ForceStaticMeshLOD");

	UNimbusCheatManager_ForceStaticMeshLOD_Params params;
	params.FilterStr = FilterStr;
	params.InForcedLOD = InForcedLOD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ForceMultiplayerSortie
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ForceMultiplayerSortie()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ForceMultiplayerSortie");

	UNimbusCheatManager_ForceMultiplayerSortie_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ForceMapChange
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 MapName                        (Parm, ZeroConstructor)

void UNimbusCheatManager::ForceMapChange(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ForceMapChange");

	UNimbusCheatManager_ForceMapChange_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ForceFailSave
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bFail                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ForceFailSave(bool bFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ForceFailSave");

	UNimbusCheatManager_ForceFailSave_Params params;
	params.bFail = bFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ForceDisableHUD
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bDisable                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ForceDisableHUD(bool bDisable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ForceDisableHUD");

	UNimbusCheatManager_ForceDisableHUD_Params params;
	params.bDisable = bDisable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.FindDevelopersAssetReference
// (Final, Exec, Native, Public)

void UNimbusCheatManager::FindDevelopersAssetReference()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.FindDevelopersAssetReference");

	UNimbusCheatManager_FindDevelopersAssetReference_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.FillVRCampaignMissionRecords
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 DifficultyLevel                (Parm, ZeroConstructor)
// EMissionRank                   ClearRank                      (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       Score                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeSec                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipLastMission               (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::FillVRCampaignMissionRecords(const struct FString& DifficultyLevel, EMissionRank ClearRank, uint32_t Score, float TimeSec, bool bSkipLastMission)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.FillVRCampaignMissionRecords");

	UNimbusCheatManager_FillVRCampaignMissionRecords_Params params;
	params.DifficultyLevel = DifficultyLevel;
	params.ClearRank = ClearRank;
	params.Score = Score;
	params.TimeSec = TimeSec;
	params.bSkipLastMission = bSkipLastMission;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.FillMissionRecord
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 MissionStringID                (Parm, ZeroConstructor)
// struct FString                 DifficultyLevel                (Parm, ZeroConstructor)
// EMissionRank                   ClearRank                      (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       Score                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeSec                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::FillMissionRecord(const struct FString& MissionStringID, const struct FString& DifficultyLevel, EMissionRank ClearRank, uint32_t Score, float TimeSec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.FillMissionRecord");

	UNimbusCheatManager_FillMissionRecord_Params params;
	params.MissionStringID = MissionStringID;
	params.DifficultyLevel = DifficultyLevel;
	params.ClearRank = ClearRank;
	params.Score = Score;
	params.TimeSec = TimeSec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.FillCampaignMissionRecords
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 DifficultyLevel                (Parm, ZeroConstructor)
// EMissionRank                   ClearRank                      (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       Score                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          TimeSec                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSkipLastMission               (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::FillCampaignMissionRecords(const struct FString& DifficultyLevel, EMissionRank ClearRank, uint32_t Score, float TimeSec, bool bSkipLastMission)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.FillCampaignMissionRecords");

	UNimbusCheatManager_FillCampaignMissionRecords_Params params;
	params.DifficultyLevel = DifficultyLevel;
	params.ClearRank = ClearRank;
	params.Score = Score;
	params.TimeSec = TimeSec;
	params.bSkipLastMission = bSkipLastMission;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.FadeOut
// (Final, Exec, Native, Public)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::FadeOut(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.FadeOut");

	UNimbusCheatManager_FadeOut_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.FadeIn
// (Final, Exec, Native, Public)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::FadeIn(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.FadeIn");

	UNimbusCheatManager_FadeIn_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.EULAFlow
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::EULAFlow(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.EULAFlow");

	UNimbusCheatManager_EULAFlow_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.EnableWeaponExtrapolation
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::EnableWeaponExtrapolation(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.EnableWeaponExtrapolation");

	UNimbusCheatManager_EnableWeaponExtrapolation_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.EnableWeaponDebugPath
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::EnableWeaponDebugPath(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.EnableWeaponDebugPath");

	UNimbusCheatManager_EnableWeaponDebugPath_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.EnableNimbusUserManagerListeningEvent
// (Final, Exec, Native, Public)

void UNimbusCheatManager::EnableNimbusUserManagerListeningEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.EnableNimbusUserManagerListeningEvent");

	UNimbusCheatManager_EnableNimbusUserManagerListeningEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.EnableNewTargetSelectionAlgorithm
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::EnableNewTargetSelectionAlgorithm(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.EnableNewTargetSelectionAlgorithm");

	UNimbusCheatManager_EnableNewTargetSelectionAlgorithm_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.EnableMiniMapRadar
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::EnableMiniMapRadar(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.EnableMiniMapRadar");

	UNimbusCheatManager_EnableMiniMapRadar_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.EnableHudMAD
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::EnableHudMAD(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.EnableHudMAD");

	UNimbusCheatManager_EnableHudMAD_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.EnableHUDDistortion
// (Final, Exec, Native, Public)

void UNimbusCheatManager::EnableHUDDistortion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.EnableHUDDistortion");

	UNimbusCheatManager_EnableHUDDistortion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DumpReplayDataBuffer
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DumpReplayDataBuffer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DumpReplayDataBuffer");

	UNimbusCheatManager_DumpReplayDataBuffer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DumpMemoryStats
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DumpMemoryStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DumpMemoryStats");

	UNimbusCheatManager_DumpMemoryStats_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DumpDependencedPackages
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 ObjectName                     (Parm, ZeroConstructor)

void UNimbusCheatManager::DumpDependencedPackages(const struct FString& ObjectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DumpDependencedPackages");

	UNimbusCheatManager_DumpDependencedPackages_Params params;
	params.ObjectName = ObjectName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DisableSound
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DisableSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DisableSound");

	UNimbusCheatManager_DisableSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DisableReplayExit
// (Final, Exec, Native, Public)
// Parameters:
// bool                           Disabled                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::DisableReplayExit(bool Disabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DisableReplayExit");

	UNimbusCheatManager_DisableReplayExit_Params params;
	params.Disabled = Disabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DisableProhibitionBlock
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 BlockType                      (Parm, ZeroConstructor)
// bool                           bShouldDisable                 (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::DisableProhibitionBlock(const struct FString& BlockType, bool bShouldDisable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DisableProhibitionBlock");

	UNimbusCheatManager_DisableProhibitionBlock_Params params;
	params.BlockType = BlockType;
	params.bShouldDisable = bShouldDisable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DisablePlayerAirCurrent
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DisablePlayerAirCurrent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DisablePlayerAirCurrent");

	UNimbusCheatManager_DisablePlayerAirCurrent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DisableHUDDistortion
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DisableHUDDistortion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DisableHUDDistortion");

	UNimbusCheatManager_DisableHUDDistortion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DisableAIAttack
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bDisable                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::DisableAIAttack(bool bDisable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DisableAIAttack");

	UNimbusCheatManager_DisableAIAttack_Params params;
	params.bDisable = bDisable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DeleteSigmaSaveFile
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DeleteSigmaSaveFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DeleteSigmaSaveFile");

	UNimbusCheatManager_DeleteSigmaSaveFile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DeleteDebugSaveFile
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DeleteDebugSaveFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DeleteDebugSaveFile");

	UNimbusCheatManager_DeleteDebugSaveFile_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DeleteAllSaveFiles
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DeleteAllSaveFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DeleteAllSaveFiles");

	UNimbusCheatManager_DeleteAllSaveFiles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DebugShowTLSLength
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DebugShowTLSLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DebugShowTLSLength");

	UNimbusCheatManager_DebugShowTLSLength_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DebugShowRainLineParameter
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DebugShowRainLineParameter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DebugShowRainLineParameter");

	UNimbusCheatManager_DebugShowRainLineParameter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DebugShowPathPointTimeout
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DebugShowPathPointTimeout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DebugShowPathPointTimeout");

	UNimbusCheatManager_DebugShowPathPointTimeout_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DebugShowImageEffectParameter
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DebugShowImageEffectParameter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DebugShowImageEffectParameter");

	UNimbusCheatManager_DebugShowImageEffectParameter_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DebugShowAirCurrent
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DebugShowAirCurrent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DebugShowAirCurrent");

	UNimbusCheatManager_DebugShowAirCurrent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DebugDummyAirCurrent
// (Final, Exec, Native, Public)

void UNimbusCheatManager::DebugDummyAirCurrent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DebugDummyAirCurrent");

	UNimbusCheatManager_DebugDummyAirCurrent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DataviewerSortieRandomAircraft
// (Final, Exec, Native, Public)
// Parameters:
// int                            Mode                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::DataviewerSortieRandomAircraft(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DataviewerSortieRandomAircraft");

	UNimbusCheatManager_DataviewerSortieRandomAircraft_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DataviewerSortieMPAircraft
// (Final, Exec, Native, Public)
// Parameters:
// int                            PlaneID                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Sortie                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            StageNum                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            SWPNo                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            KillSWP                        (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       Aircraft                       (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       UAV                            (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ground                         (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       Vessel                         (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       FlightTimeMS                   (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       FlightDistanceMeters           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Score                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MRP                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsBestPlayer                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            PerformanceEvaluID             (Parm, ZeroConstructor, IsPlainOldData)
// int                            PerformanceEvaluIDCount        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Mode                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::DataviewerSortieMPAircraft(int PlaneID, int Sortie, int StageNum, int SWPNo, int KillSWP, uint32_t Aircraft, uint32_t UAV, uint32_t ground, uint32_t Vessel, uint64_t FlightTimeMS, uint64_t FlightDistanceMeters, int Score, int MRP, bool bIsBestPlayer, int PerformanceEvaluID, int PerformanceEvaluIDCount, int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DataviewerSortieMPAircraft");

	UNimbusCheatManager_DataviewerSortieMPAircraft_Params params;
	params.PlaneID = PlaneID;
	params.Sortie = Sortie;
	params.StageNum = StageNum;
	params.SWPNo = SWPNo;
	params.KillSWP = KillSWP;
	params.Aircraft = Aircraft;
	params.UAV = UAV;
	params.ground = ground;
	params.Vessel = Vessel;
	params.FlightTimeMS = FlightTimeMS;
	params.FlightDistanceMeters = FlightDistanceMeters;
	params.Score = Score;
	params.MRP = MRP;
	params.bIsBestPlayer = bIsBestPlayer;
	params.PerformanceEvaluID = PerformanceEvaluID;
	params.PerformanceEvaluIDCount = PerformanceEvaluIDCount;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.DataviewerSortieAircraft
// (Final, Exec, Native, Public)
// Parameters:
// int                            PlaneID                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Sortie                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            MissionID                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            SWPNo                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            KillSWP                        (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       Aircraft                       (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       UAV                            (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       ground                         (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       Vessel                         (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       FlightTimeMS                   (Parm, ZeroConstructor, IsPlainOldData)
// uint64_t                       FlightDistanceMeters           (Parm, ZeroConstructor, IsPlainOldData)
// int                            Score                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            MRP                            (Parm, ZeroConstructor, IsPlainOldData)
// int                            Mode                           (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::DataviewerSortieAircraft(int PlaneID, int Sortie, int MissionID, int SWPNo, int KillSWP, uint32_t Aircraft, uint32_t UAV, uint32_t ground, uint32_t Vessel, uint64_t FlightTimeMS, uint64_t FlightDistanceMeters, int Score, int MRP, int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.DataviewerSortieAircraft");

	UNimbusCheatManager_DataviewerSortieAircraft_Params params;
	params.PlaneID = PlaneID;
	params.Sortie = Sortie;
	params.MissionID = MissionID;
	params.SWPNo = SWPNo;
	params.KillSWP = KillSWP;
	params.Aircraft = Aircraft;
	params.UAV = UAV;
	params.ground = ground;
	params.Vessel = Vessel;
	params.FlightTimeMS = FlightTimeMS;
	params.FlightDistanceMeters = FlightDistanceMeters;
	params.Score = Score;
	params.MRP = MRP;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CreateGarbageUObject
// (Final, Exec, Native, Public)
// Parameters:
// int                            ObjectSize                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            ObjectNum                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::CreateGarbageUObject(int ObjectSize, int ObjectNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CreateGarbageUObject");

	UNimbusCheatManager_CreateGarbageUObject_Params params;
	params.ObjectSize = ObjectSize;
	params.ObjectNum = ObjectNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CrashDump
// (Final, Exec, Native, Public)

void UNimbusCheatManager::CrashDump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CrashDump");

	UNimbusCheatManager_CrashDump_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CompleteVRCampaign
// (Final, Exec, Native, Public)

void UNimbusCheatManager::CompleteVRCampaign()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CompleteVRCampaign");

	UNimbusCheatManager_CompleteVRCampaign_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CompleteSaveLoadSimulatedTask
// (Final, Exec, Native, Public)

void UNimbusCheatManager::CompleteSaveLoadSimulatedTask()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CompleteSaveLoadSimulatedTask");

	UNimbusCheatManager_CompleteSaveLoadSimulatedTask_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CompleteMission
// (Final, Exec, Native, Public)

void UNimbusCheatManager::CompleteMission()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CompleteMission");

	UNimbusCheatManager_CompleteMission_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CompleteCampaign
// (Final, Exec, Native, Public)

void UNimbusCheatManager::CompleteCampaign()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CompleteCampaign");

	UNimbusCheatManager_CompleteCampaign_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CloseDialog
// (Final, Exec, Native, Public)
// Parameters:
// int                            DialogID                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::CloseDialog(int DialogID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CloseDialog");

	UNimbusCheatManager_CloseDialog_Params params;
	params.DialogID = DialogID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CloseAllDialogs
// (Final, Exec, Native, Public)

void UNimbusCheatManager::CloseAllDialogs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CloseAllDialogs");

	UNimbusCheatManager_CloseAllDialogs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ClearPhase
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ClearPhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ClearPhase");

	UNimbusCheatManager_ClearPhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CheatPause
// (Final, Exec, Native, Public)
// Parameters:
// int                            ChannelIndex                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::CheatPause(int ChannelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CheatPause");

	UNimbusCheatManager_CheatPause_Params params;
	params.ChannelIndex = ChannelIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ChangeMenuByIndex
// (Final, Exec, Native, Public)
// Parameters:
// int                            MenuIDIndex                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ChangeMenuByIndex(int MenuIDIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ChangeMenuByIndex");

	UNimbusCheatManager_ChangeMenuByIndex_Params params;
	params.MenuIDIndex = MenuIDIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ChangeMenu
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 MenuIDStringName               (Parm, ZeroConstructor)

void UNimbusCheatManager::ChangeMenu(const struct FString& MenuIDStringName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ChangeMenu");

	UNimbusCheatManager_ChangeMenu_Params params;
	params.MenuIDStringName = MenuIDStringName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.CameraShakeIntermittent
// (Final, Exec, Native, Public)

void UNimbusCheatManager::CameraShakeIntermittent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.CameraShakeIntermittent");

	UNimbusCheatManager_CameraShakeIntermittent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.BowToSlimForAmmo
// (Final, Exec, Native, Public)
// Parameters:
// int                            WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// int                            WeaponCount                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::BowToSlimForAmmo(int WeaponNumber, int WeaponCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.BowToSlimForAmmo");

	UNimbusCheatManager_BowToSlimForAmmo_Params params;
	params.WeaponNumber = WeaponNumber;
	params.WeaponCount = WeaponCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.BowToPPForAmmo
// (Final, Exec, Native, Public)

void UNimbusCheatManager::BowToPPForAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.BowToPPForAmmo");

	UNimbusCheatManager_BowToPPForAmmo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_StopRecording
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_StopRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_StopRecording");

	UNimbusCheatManager_AUTOM_StopRecording_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_StopPlaying
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_StopPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_StopPlaying");

	UNimbusCheatManager_AUTOM_StopPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_StopLoopingPlayback
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_StopLoopingPlayback()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_StopLoopingPlayback");

	UNimbusCheatManager_AUTOM_StopLoopingPlayback_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_StartRecording
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 InSaveFileName                 (Parm, ZeroConstructor)

void UNimbusCheatManager::AUTOM_StartRecording(const struct FString& InSaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_StartRecording");

	UNimbusCheatManager_AUTOM_StartRecording_Params params;
	params.InSaveFileName = InSaveFileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_SetSaveFileType
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bBinary                        (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::AUTOM_SetSaveFileType(bool bBinary)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_SetSaveFileType");

	UNimbusCheatManager_AUTOM_SetSaveFileType_Params params;
	params.bBinary = bBinary;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_SetPaused
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bIsPaused                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::AUTOM_SetPaused(bool bIsPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_SetPaused");

	UNimbusCheatManager_AUTOM_SetPaused_Params params;
	params.bIsPaused = bIsPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_SetLoopCountLimit
// (Final, Exec, Native, Public)
// Parameters:
// int                            LoopCountLimist                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::AUTOM_SetLoopCountLimit(int LoopCountLimist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_SetLoopCountLimit");

	UNimbusCheatManager_AUTOM_SetLoopCountLimit_Params params;
	params.LoopCountLimist = LoopCountLimist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_SetDisplayLog
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::AUTOM_SetDisplayLog(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_SetDisplayLog");

	UNimbusCheatManager_AUTOM_SetDisplayLog_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_SaveToFile
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 InSaveFileName                 (Parm, ZeroConstructor)

void UNimbusCheatManager::AUTOM_SaveToFile(const struct FString& InSaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_SaveToFile");

	UNimbusCheatManager_AUTOM_SaveToFile_Params params;
	params.InSaveFileName = InSaveFileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_PlayFilesInSubFolderRandom
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 SubDirectoryName               (Parm, ZeroConstructor)

void UNimbusCheatManager::AUTOM_PlayFilesInSubFolderRandom(const struct FString& SubDirectoryName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_PlayFilesInSubFolderRandom");

	UNimbusCheatManager_AUTOM_PlayFilesInSubFolderRandom_Params params;
	params.SubDirectoryName = SubDirectoryName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_PlayFilesInSubFolder
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 SubDirectoryName               (Parm, ZeroConstructor)

void UNimbusCheatManager::AUTOM_PlayFilesInSubFolder(const struct FString& SubDirectoryName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_PlayFilesInSubFolder");

	UNimbusCheatManager_AUTOM_PlayFilesInSubFolder_Params params;
	params.SubDirectoryName = SubDirectoryName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_PlaybackFileLoop
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 InLoadFileName                 (Parm, ZeroConstructor)

void UNimbusCheatManager::AUTOM_PlaybackFileLoop(const struct FString& InLoadFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_PlaybackFileLoop");

	UNimbusCheatManager_AUTOM_PlaybackFileLoop_Params params;
	params.InLoadFileName = InLoadFileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_PlaybackFile
// (Final, Exec, Native, Public)
// Parameters:
// struct FString                 InLoadFileName                 (Parm, ZeroConstructor)

void UNimbusCheatManager::AUTOM_PlaybackFile(const struct FString& InLoadFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_PlaybackFile");

	UNimbusCheatManager_AUTOM_PlaybackFile_Params params;
	params.InLoadFileName = InLoadFileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_PlaybackCurrentLoop
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_PlaybackCurrentLoop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_PlaybackCurrentLoop");

	UNimbusCheatManager_AUTOM_PlaybackCurrentLoop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_PlaybackCurrent
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_PlaybackCurrent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_PlaybackCurrent");

	UNimbusCheatManager_AUTOM_PlaybackCurrent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_PlayAllFilesRandom
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_PlayAllFilesRandom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_PlayAllFilesRandom");

	UNimbusCheatManager_AUTOM_PlayAllFilesRandom_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_PlayAllFiles
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_PlayAllFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_PlayAllFiles");

	UNimbusCheatManager_AUTOM_PlayAllFiles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_OutputLog
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_OutputLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_OutputLog");

	UNimbusCheatManager_AUTOM_OutputLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_MemReport
// (Final, Exec, Native, Public)
// Parameters:
// bool                           bFull                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::AUTOM_MemReport(bool bFull)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_MemReport");

	UNimbusCheatManager_AUTOM_MemReport_Params params;
	params.bFull = bFull;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AUTOM_ListPlaybackFiles
// (Final, Exec, Native, Public)

void UNimbusCheatManager::AUTOM_ListPlaybackFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AUTOM_ListPlaybackFiles");

	UNimbusCheatManager_AUTOM_ListPlaybackFiles_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ApplyDamageToPlayer
// (Final, Exec, Native, Public)
// Parameters:
// float                          DamageAmount                   (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ApplyDamageToPlayer(float DamageAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ApplyDamageToPlayer");

	UNimbusCheatManager_ApplyDamageToPlayer_Params params;
	params.DamageAmount = DamageAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AddFlightDistanceAndKillCount
// (Final, Exec, Native, Public)
// Parameters:
// EMissionCategory               MissionCategory                (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       FlightDistance                 (Parm, ZeroConstructor, IsPlainOldData)
// uint32_t                       KillCount                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::AddFlightDistanceAndKillCount(EMissionCategory MissionCategory, uint32_t FlightDistance, uint32_t KillCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AddFlightDistanceAndKillCount");

	UNimbusCheatManager_AddFlightDistanceAndKillCount_Params params;
	params.MissionCategory = MissionCategory;
	params.FlightDistance = FlightDistance;
	params.KillCount = KillCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.AddCompletedMission
// (Final, Exec, Native, Public)
// Parameters:
// int                            CompletedMission               (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::AddCompletedMission(int CompletedMission)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.AddCompletedMission");

	UNimbusCheatManager_AddCompletedMission_Params params;
	params.CompletedMission = CompletedMission;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ActivateDebugMenuMode
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ActivateDebugMenuMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ActivateDebugMenuMode");

	UNimbusCheatManager_ActivateDebugMenuMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ActivateDebugCondition
// (Final, Exec, Native, Public)
// Parameters:
// uint32_t                       ConditionId                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusCheatManager::ActivateDebugCondition(uint32_t ConditionId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ActivateDebugCondition");

	UNimbusCheatManager_ActivateDebugCondition_Params params;
	params.ConditionId = ConditionId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusCheatManager.ActivateAllConditionActionEntries
// (Final, Exec, Native, Public)

void UNimbusCheatManager::ActivateAllConditionActionEntries()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusCheatManager.ActivateAllConditionActionEntries");

	UNimbusCheatManager_ActivateAllConditionActionEntries_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusControllerVibration.SetXBoxControllerVibrationScalar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusControllerVibration::SetXBoxControllerVibrationScalar(float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusControllerVibration.SetXBoxControllerVibrationScalar");

	UNimbusControllerVibration_SetXBoxControllerVibrationScalar_Params params;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusControllerVibration.SetPSControllerVibrationScalar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusControllerVibration::SetPSControllerVibrationScalar(float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusControllerVibration.SetPSControllerVibrationScalar");

	UNimbusControllerVibration_SetPSControllerVibrationScalar_Params params;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusControllerVibration.OnStopControllerVibration__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UNimbusControllerVibration::OnStopControllerVibration__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusControllerVibration.OnStopControllerVibration__DelegateSignature");

	UNimbusControllerVibration_OnStopControllerVibration__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusControllerVibration.OnStartControllerVibration__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          intensity                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusControllerVibration::OnStartControllerVibration__DelegateSignature(float intensity, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusControllerVibration.OnStartControllerVibration__DelegateSignature");

	UNimbusControllerVibration_OnStartControllerVibration__DelegateSignature_Params params;
	params.intensity = intensity;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugInfoLayerWidget.OnEnableHud
// (Final, Native, Public, BlueprintCallable)

void UNimbusDebugInfoLayerWidget::OnEnableHud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugInfoLayerWidget.OnEnableHud");

	UNimbusDebugInfoLayerWidget_OnEnableHud_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugInfoLayerWidget.OnDisableHud
// (Final, Native, Public, BlueprintCallable)

void UNimbusDebugInfoLayerWidget::OnDisableHud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugInfoLayerWidget.OnDisableHud");

	UNimbusDebugInfoLayerWidget_OnDisableHud_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDebugInfoLayerWidget.OnDetectedMissionHitch
// (Final, Native, Protected, HasOutParms)
// Parameters:
// struct FMissionHitchInfo       InMissionHitchInfo             (ConstParm, Parm, OutParm, ReferenceParm)

void UNimbusDebugInfoLayerWidget::OnDetectedMissionHitch(const struct FMissionHitchInfo& InMissionHitchInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDebugInfoLayerWidget.OnDetectedMissionHitch");

	UNimbusDebugInfoLayerWidget_OnDetectedMissionHitch_Params params;
	params.InMissionHitchInfo = InMissionHitchInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusDLCInformation.IsDLCOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 DLCID                          (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusDLCInformation::IsDLCOwned(const struct FString& DLCID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusDLCInformation.IsDLCOwned");

	UNimbusDLCInformation_IsDLCOwned_Params params;
	params.DLCID = DLCID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// DelegateFunction Nimbus.NimbusDLCInformation.DLCsUpdatedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UNimbusDLCInformation::DLCsUpdatedDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusDLCInformation.DLCsUpdatedDelegate__DelegateSignature");

	UNimbusDLCInformation_DLCsUpdatedDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusEventParser.OnPreRestartPhaseEvent
// (Final, Native, Private)

void ANimbusEventParser::OnPreRestartPhaseEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusEventParser.OnPreRestartPhaseEvent");

	ANimbusEventParser_OnPreRestartPhaseEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusEventParser.OnIGCEnableEvent
// (Final, Native, Private)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusEventParser::OnIGCEnableEvent(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusEventParser.OnIGCEnableEvent");

	ANimbusEventParser_OnIGCEnableEvent_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusEventParser.MultiAbort__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ANimbusEventParser::MultiAbort__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusEventParser.MultiAbort__DelegateSignature");

	ANimbusEventParser_MultiAbort__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInformation.PlaneStringIDToPlaneID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 PlaneStringID                  (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusGameInformation::STATIC_PlaneStringIDToPlaneID(const struct FString& PlaneStringID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInformation.PlaneStringIDToPlaneID");

	UNimbusGameInformation_PlaneStringIDToPlaneID_Params params;
	params.PlaneStringID = PlaneStringID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInformation.PlaneIDToPlaneStringID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            PlaneID                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UNimbusGameInformation::STATIC_PlaneIDToPlaneStringID(int PlaneID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInformation.PlaneIDToPlaneStringID");

	UNimbusGameInformation_PlaneIDToPlaneStringID_Params params;
	params.PlaneID = PlaneID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.SetShowWeaponsInHangar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShouldShowWeaponsInHangar     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetShowWeaponsInHangar(bool bShouldShowWeaponsInHangar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetShowWeaponsInHangar");

	UNimbusGameInstance_SetShowWeaponsInHangar_Params params;
	params.bShouldShowWeaponsInHangar = bShouldShowWeaponsInHangar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetShowWeaponOnPlaneInHangar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShouldShowWeaponOnPlaneInHangar (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetShowWeaponOnPlaneInHangar(bool bShouldShowWeaponOnPlaneInHangar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetShowWeaponOnPlaneInHangar");

	UNimbusGameInstance_SetShowWeaponOnPlaneInHangar_Params params;
	params.bShouldShowWeaponOnPlaneInHangar = bShouldShowWeaponOnPlaneInHangar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetShowPlaneInHangar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShouldShowPlaneInHangar       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetShowPlaneInHangar(bool bShouldShowPlaneInHangar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetShowPlaneInHangar");

	UNimbusGameInstance_SetShowPlaneInHangar_Params params;
	params.bShouldShowPlaneInHangar = bShouldShowPlaneInHangar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetShowPilotInHangar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShouldShowPilotInHangar       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetShowPilotInHangar(bool bShouldShowPilotInHangar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetShowPilotInHangar");

	UNimbusGameInstance_SetShowPilotInHangar_Params params;
	params.bShouldShowPilotInHangar = bShouldShowPilotInHangar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetShowHangar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShouldShowHangar              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetShowHangar(bool bShouldShowHangar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetShowHangar");

	UNimbusGameInstance_SetShowHangar_Params params;
	params.bShouldShowHangar = bShouldShowHangar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetSelectedPlaneSkinNo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            SelectedPlaneSkinNo            (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetSelectedPlaneSkinNo(int SelectedPlaneSkinNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetSelectedPlaneSkinNo");

	UNimbusGameInstance_SetSelectedPlaneSkinNo_Params params;
	params.SelectedPlaneSkinNo = SelectedPlaneSkinNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetSelectedPlaneEmblemID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            SelectedPlaneEmblemID          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetSelectedPlaneEmblemID(int SelectedPlaneEmblemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetSelectedPlaneEmblemID");

	UNimbusGameInstance_SetSelectedPlaneEmblemID_Params params;
	params.SelectedPlaneEmblemID = SelectedPlaneEmblemID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetSelectedHangarCameraType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHangarCameraType              HangarCameraType               (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetSelectedHangarCameraType(EHangarCameraType HangarCameraType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetSelectedHangarCameraType");

	UNimbusGameInstance_SetSelectedHangarCameraType_Params params;
	params.HangarCameraType = HangarCameraType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetPlaneAndSWP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            SelectedPlaneType              (Parm, ZeroConstructor, IsPlainOldData)
// int                            SelectedPlaneSWP               (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetPlaneAndSWP(int SelectedPlaneType, int SelectedPlaneSWP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetPlaneAndSWP");

	UNimbusGameInstance_SetPlaneAndSWP_Params params;
	params.SelectedPlaneType = SelectedPlaneType;
	params.SelectedPlaneSWP = SelectedPlaneSWP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetMissionID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            MissionID                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetMissionID(int MissionID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetMissionID");

	UNimbusGameInstance_SetMissionID_Params params;
	params.MissionID = MissionID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.SetCurrentGameSaveSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGameSaveSlot                  NewGameSaveSlot                (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusGameInstance::SetCurrentGameSaveSlot(EGameSaveSlot NewGameSaveSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.SetCurrentGameSaveSlot");

	UNimbusGameInstance_SetCurrentGameSaveSlot_Params params;
	params.NewGameSaveSlot = NewGameSaveSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusGameInstance.IsVRUIMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::STATIC_IsVRUIMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.IsVRUIMode");

	UNimbusGameInstance_IsVRUIMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.IsVRMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::STATIC_IsVRMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.IsVRMode");

	UNimbusGameInstance_IsVRMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.IsVRGameMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::STATIC_IsVRGameMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.IsVRGameMode");

	UNimbusGameInstance_IsVRGameMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.IsStereoMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::STATIC_IsStereoMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.IsStereoMode");

	UNimbusGameInstance_IsStereoMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.IsShippingMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::STATIC_IsShippingMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.IsShippingMode");

	UNimbusGameInstance_IsShippingMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetShowWeaponsInHangar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::GetShowWeaponsInHangar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetShowWeaponsInHangar");

	UNimbusGameInstance_GetShowWeaponsInHangar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetShowWeaponOnPlaneInHangar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::GetShowWeaponOnPlaneInHangar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetShowWeaponOnPlaneInHangar");

	UNimbusGameInstance_GetShowWeaponOnPlaneInHangar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetShowPlaneInHangar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::GetShowPlaneInHangar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetShowPlaneInHangar");

	UNimbusGameInstance_GetShowPlaneInHangar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetShowPilotInHangar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::GetShowPilotInHangar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetShowPilotInHangar");

	UNimbusGameInstance_GetShowPilotInHangar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetShowHangar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::GetShowHangar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetShowHangar");

	UNimbusGameInstance_GetShowHangar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetSelectedPlaneSWP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusGameInstance::GetSelectedPlaneSWP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetSelectedPlaneSWP");

	UNimbusGameInstance_GetSelectedPlaneSWP_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetSelectedPlaneSkinNo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusGameInstance::GetSelectedPlaneSkinNo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetSelectedPlaneSkinNo");

	UNimbusGameInstance_GetSelectedPlaneSkinNo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetSelectedPlaneID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusGameInstance::GetSelectedPlaneID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetSelectedPlaneID");

	UNimbusGameInstance_GetSelectedPlaneID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetSelectedPlaneEmblemID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusGameInstance::GetSelectedPlaneEmblemID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetSelectedPlaneEmblemID");

	UNimbusGameInstance_GetSelectedPlaneEmblemID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetSelectedHangarCameraType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHangarCameraType              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EHangarCameraType UNimbusGameInstance::GetSelectedHangarCameraType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetSelectedHangarCameraType");

	UNimbusGameInstance_GetSelectedHangarCameraType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetPhysicalMaterialName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPhysicalMaterialType          MaterialType                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UNimbusGameInstance::GetPhysicalMaterialName(EPhysicalMaterialType MaterialType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetPhysicalMaterialName");

	UNimbusGameInstance_GetPhysicalMaterialName_Params params;
	params.MaterialType = MaterialType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetMissionID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusGameInstance::GetMissionID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetMissionID");

	UNimbusGameInstance_GetMissionID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.GetCurrentGameSaveSlot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGameSaveSlot                  ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EGameSaveSlot UNimbusGameInstance::GetCurrentGameSaveSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.GetCurrentGameSaveSlot");

	UNimbusGameInstance_GetCurrentGameSaveSlot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.AsyncSaveOnlineData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::AsyncSaveOnlineData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.AsyncSaveOnlineData");

	UNimbusGameInstance_AsyncSaveOnlineData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.AsyncSaveGameplaySettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGameSaveSlot                  GameSaveSlot                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::AsyncSaveGameplaySettings(EGameSaveSlot GameSaveSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.AsyncSaveGameplaySettings");

	UNimbusGameInstance_AsyncSaveGameplaySettings_Params params;
	params.GameSaveSlot = GameSaveSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.AsyncSaveAccountSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::AsyncSaveAccountSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.AsyncSaveAccountSettings");

	UNimbusGameInstance_AsyncSaveAccountSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.AsyncLoadOnlineData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::AsyncLoadOnlineData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.AsyncLoadOnlineData");

	UNimbusGameInstance_AsyncLoadOnlineData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.AsyncLoadGameplaySettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGameSaveSlot                  GameSaveSlot                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::AsyncLoadGameplaySettings(EGameSaveSlot GameSaveSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.AsyncLoadGameplaySettings");

	UNimbusGameInstance_AsyncLoadGameplaySettings_Params params;
	params.GameSaveSlot = GameSaveSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameInstance.AsyncLoadAccountSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameInstance::AsyncLoadAccountSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameInstance.AsyncLoadAccountSettings");

	UNimbusGameInstance_AsyncLoadAccountSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusGameUserSettings.IsShowPlayByPlayRadioConditionLog
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusGameUserSettings::STATIC_IsShowPlayByPlayRadioConditionLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusGameUserSettings.IsShowPlayByPlayRadioConditionLog");

	UNimbusGameUserSettings_IsShowPlayByPlayRadioConditionLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// DelegateFunction Nimbus.NimbusFadeManager.OnStartFadingDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusFadeManager::OnStartFadingDelegate__DelegateSignature(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusFadeManager.OnStartFadingDelegate__DelegateSignature");

	UNimbusFadeManager_OnStartFadingDelegate__DelegateSignature_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusFadeManager.OnPreLoadMap
// (Final, Native, Protected)
// Parameters:
// struct FString                 MapName                        (Parm, ZeroConstructor)

void UNimbusFadeManager::OnPreLoadMap(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusFadeManager.OnPreLoadMap");

	UNimbusFadeManager_OnPreLoadMap_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusFadeManager.OnPostLoadMap
// (Final, Native, Protected)
// Parameters:
// class UWorld*                  LoadedWorld                    (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusFadeManager::OnPostLoadMap(class UWorld* LoadedWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusFadeManager.OnPostLoadMap");

	UNimbusFadeManager_OnPostLoadMap_Params params;
	params.LoadedWorld = LoadedWorld;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusFadeManager.OnLoadingScreenShowHandler
// (Final, Native, Protected)

void UNimbusFadeManager::OnLoadingScreenShowHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusFadeManager.OnLoadingScreenShowHandler");

	UNimbusFadeManager_OnLoadingScreenShowHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusFadeManager.OnLoadingScreenHideHandler
// (Final, Native, Protected)

void UNimbusFadeManager::OnLoadingScreenHideHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusFadeManager.OnLoadingScreenHideHandler");

	UNimbusFadeManager_OnLoadingScreenHideHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusFadeManager.OnFadeOutHandler
// (Final, Native, Protected)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusFadeManager::OnFadeOutHandler(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusFadeManager.OnFadeOutHandler");

	UNimbusFadeManager_OnFadeOutHandler_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusFadeManager.OnFadeInHandler
// (Final, Native, Protected)
// Parameters:
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusFadeManager::OnFadeInHandler(float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusFadeManager.OnFadeInHandler");

	UNimbusFadeManager_OnFadeInHandler_Params params;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusFadeManager.OnFadedOutHandler
// (Final, Native, Protected)

void UNimbusFadeManager::OnFadedOutHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusFadeManager.OnFadedOutHandler");

	UNimbusFadeManager_OnFadedOutHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusFadeManager.OnFadedInHandler
// (Final, Native, Protected)

void UNimbusFadeManager::OnFadedInHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusFadeManager.OnFadedInHandler");

	UNimbusFadeManager_OnFadedInHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusFadeManager.OnFadedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UNimbusFadeManager::OnFadedDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusFadeManager.OnFadedDelegate__DelegateSignature");

	UNimbusFadeManager_OnFadedDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHangarMeshManager.OnHangarVisibilityChanged
// (Event, Public, BlueprintEvent)

void ANimbusHangarMeshManager::OnHangarVisibilityChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHangarMeshManager.OnHangarVisibilityChanged");

	ANimbusHangarMeshManager_OnHangarVisibilityChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHangarMeshManager.OnHangarChanged
// (Event, Public, BlueprintEvent)

void ANimbusHangarMeshManager::OnHangarChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHangarMeshManager.OnHangarChanged");

	ANimbusHangarMeshManager_OnHangarChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHangarMeshManager.HangarLevelsStreamComplete
// (Final, Native, Protected, BlueprintCallable)

void ANimbusHangarMeshManager::HangarLevelsStreamComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHangarMeshManager.HangarLevelsStreamComplete");

	ANimbusHangarMeshManager_HangarLevelsStreamComplete_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHangarMeshManager.GetHangarSubLevels
// (Final, Native, Protected, HasOutParms, BlueprintCallable)
// Parameters:
// struct FHangarSubLevelSettings PreviousSublevels              (Parm, OutParm)
// struct FHangarSubLevelSettings CurrentSublevels               (Parm, OutParm)

void ANimbusHangarMeshManager::GetHangarSubLevels(struct FHangarSubLevelSettings* PreviousSublevels, struct FHangarSubLevelSettings* CurrentSublevels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHangarMeshManager.GetHangarSubLevels");

	ANimbusHangarMeshManager_GetHangarSubLevels_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PreviousSublevels != nullptr)
		*PreviousSublevels = params.PreviousSublevels;
	if (CurrentSublevels != nullptr)
		*CurrentSublevels = params.CurrentSublevels;
}


// Function Nimbus.NimbusHUD.ShowMovieEmblem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UTexture2D*>      ImageTextures                  (ConstParm, Parm, ZeroConstructor)

void ANimbusHUD::ShowMovieEmblem(TArray<class UTexture2D*> ImageTextures)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.ShowMovieEmblem");

	ANimbusHUD_ShowMovieEmblem_Params params;
	params.ImageTextures = ImageTextures;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.SetHUDDistortionScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          NewDistortionScale             (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::SetHUDDistortionScale(float NewDistortionScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.SetHUDDistortionScale");

	ANimbusHUD_SetHUDDistortionScale_Params params;
	params.NewDistortionScale = NewDistortionScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.ResetCameraSensitivePosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsPlaneBodyVisible            (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::ResetCameraSensitivePosition(bool bIsPlaneBodyVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.ResetCameraSensitivePosition");

	ANimbusHUD_ResetCameraSensitivePosition_Params params;
	params.bIsPlaneBodyVisible = bIsPlaneBodyVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.PlayMiniMapScanningEffect
// (Final, Native, Public, BlueprintCallable)

void ANimbusHUD::PlayMiniMapScanningEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.PlayMiniMapScanningEffect");

	ANimbusHUD_PlayMiniMapScanningEffect_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.OpenDebugMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANimbusHUD::OpenDebugMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.OpenDebugMenu");

	ANimbusHUD_OpenDebugMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.OnEndLanding
// (Final, Native, Public)

void ANimbusHUD::OnEndLanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.OnEndLanding");

	ANimbusHUD_OnEndLanding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.OnEndAerialRefueling
// (Final, Native, Public)

void ANimbusHUD::OnEndAerialRefueling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.OnEndAerialRefueling");

	ANimbusHUD_OnEndAerialRefueling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.OnBeginLanding
// (Final, Native, Public)

void ANimbusHUD::OnBeginLanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.OnBeginLanding");

	ANimbusHUD_OnBeginLanding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.OnBeginAerialRefueling
// (Final, Native, Public)

void ANimbusHUD::OnBeginAerialRefueling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.OnBeginAerialRefueling");

	ANimbusHUD_OnBeginAerialRefueling_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.IsDebugMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANimbusHUD::IsDebugMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.IsDebugMode");

	ANimbusHUD_IsDebugMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.IsBehindMiniMap
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               InScreenPosition               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANimbusHUD::IsBehindMiniMap(const struct FVector2D& InScreenPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.IsBehindMiniMap");

	ANimbusHUD_IsBehindMiniMap_Params params;
	params.InScreenPosition = InScreenPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.HideMovieEmblem
// (Final, Native, Public, BlueprintCallable)

void ANimbusHUD::HideMovieEmblem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.HideMovieEmblem");

	ANimbusHUD_HideMovieEmblem_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.HideGuideMessage
// (Final, Native, Public, BlueprintCallable)

void ANimbusHUD::HideGuideMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.HideGuideMessage");

	ANimbusHUD_HideGuideMessage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.GetScreenSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector2D ANimbusHUD::GetScreenSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.GetScreenSize");

	ANimbusHUD_GetScreenSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.GetMiniMapSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D               ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector2D ANimbusHUD::GetMiniMapSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.GetMiniMapSize");

	ANimbusHUD_GetMiniMapSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.GetHUDFont
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UFont* ANimbusHUD::GetHUDFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.GetHUDFont");

	ANimbusHUD_GetHUDFont_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.GetHUDEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANimbusHUD::GetHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.GetHUDEnabled");

	ANimbusHUD_GetHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.GetCurrentMiniMapType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMiniMapType                   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EMiniMapType ANimbusHUD::GetCurrentMiniMapType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.GetCurrentMiniMapType");

	ANimbusHUD_GetCurrentMiniMapType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.EndHUDDistortion
// (Final, Native, Public, BlueprintCallable)

void ANimbusHUD::EndHUDDistortion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.EndHUDDistortion");

	ANimbusHUD_EndHUDDistortion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetTextWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FString                 Text                           (Parm, ZeroConstructor)
// struct FLinearColor            TextColor                      (Parm, IsPlainOldData)
// struct FVector                 WldPos                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               ScreenOffset                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ZOrder                         (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::DrawWidgetTextWorldSpace(const struct FString& Text, const struct FLinearColor& TextColor, const struct FVector& WldPos, const struct FVector2D& ScreenOffset, float Scale, bool bScalePosition, int ZOrder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetTextWorldSpace");

	ANimbusHUD_DrawWidgetTextWorldSpace_Params params;
	params.Text = Text;
	params.TextColor = TextColor;
	params.WldPos = WldPos;
	params.ScreenOffset = ScreenOffset;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.ZOrder = ZOrder;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetTextureWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*              InTexture                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WldPos                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               ScreenOffset                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               Size                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Color                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ZOrder                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNeedDrawAccurately            (Parm, ZeroConstructor, IsPlainOldData)
// float                          inScale                        (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::DrawWidgetTextureWorldSpace(class UTexture2D* InTexture, const struct FVector& WldPos, const struct FVector2D& ScreenOffset, const struct FVector2D& Size, float Rotation, const struct FLinearColor& Color, int ZOrder, bool bNeedDrawAccurately, float inScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetTextureWorldSpace");

	ANimbusHUD_DrawWidgetTextureWorldSpace_Params params;
	params.InTexture = InTexture;
	params.WldPos = WldPos;
	params.ScreenOffset = ScreenOffset;
	params.Size = Size;
	params.Rotation = Rotation;
	params.Color = Color;
	params.ZOrder = ZOrder;
	params.bNeedDrawAccurately = bNeedDrawAccurately;
	params.inScale = inScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetTexture
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UTexture2D*              InTexture                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Pos                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               Size                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Color                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ZOrder                         (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::DrawWidgetTexture(class UTexture2D* InTexture, const struct FVector2D& Pos, const struct FVector2D& Size, float Rotation, const struct FLinearColor& Color, int ZOrder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetTexture");

	ANimbusHUD_DrawWidgetTexture_Params params;
	params.InTexture = InTexture;
	params.Pos = Pos;
	params.Size = Size;
	params.Rotation = Rotation;
	params.Color = Color;
	params.ZOrder = ZOrder;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetText
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FString                 Text                           (Parm, ZeroConstructor)
// struct FLinearColor            TextColor                      (Parm, IsPlainOldData)
// struct FVector2D               Pos                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bScalePosition                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            ZOrder                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Alignment                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ANimbusHUD::DrawWidgetText(const struct FString& Text, const struct FLinearColor& TextColor, const struct FVector2D& Pos, float Scale, bool bScalePosition, int ZOrder, const struct FVector2D& Alignment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetText");

	ANimbusHUD_DrawWidgetText_Params params;
	params.Text = Text;
	params.TextColor = TextColor;
	params.Pos = Pos;
	params.Scale = Scale;
	params.bScalePosition = bScalePosition;
	params.ZOrder = ZOrder;
	params.Alignment = Alignment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetMaterialWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      InMaterial                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 WldPos                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               ScreenOffset                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               Size                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Color                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ZOrder                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bNeedDrawAccurately            (Parm, ZeroConstructor, IsPlainOldData)
// float                          inScale                        (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::DrawWidgetMaterialWorldSpace(class UMaterialInterface* InMaterial, const struct FVector& WldPos, const struct FVector2D& ScreenOffset, const struct FVector2D& Size, float Rotation, const struct FLinearColor& Color, int ZOrder, bool bNeedDrawAccurately, float inScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetMaterialWorldSpace");

	ANimbusHUD_DrawWidgetMaterialWorldSpace_Params params;
	params.InMaterial = InMaterial;
	params.WldPos = WldPos;
	params.ScreenOffset = ScreenOffset;
	params.Size = Size;
	params.Rotation = Rotation;
	params.Color = Color;
	params.ZOrder = ZOrder;
	params.bNeedDrawAccurately = bNeedDrawAccurately;
	params.inScale = inScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetMaterial
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// class UMaterialInterface*      InMaterial                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector2D               Pos                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               Size                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            Color                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            ZOrder                         (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::DrawWidgetMaterial(class UMaterialInterface* InMaterial, const struct FVector2D& Pos, const struct FVector2D& Size, float Rotation, const struct FLinearColor& Color, int ZOrder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetMaterial");

	ANimbusHUD_DrawWidgetMaterial_Params params;
	params.InMaterial = InMaterial;
	params.Pos = Pos;
	params.Size = Size;
	params.Rotation = Rotation;
	params.Color = Color;
	params.ZOrder = ZOrder;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetLineWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartWldPos                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 EndWldPos                      (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            SegmentCount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ANimbusHUD::DrawWidgetLineWorldSpace(const struct FVector& StartWldPos, const struct FVector& EndWldPos, int SegmentCount, const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetLineWorldSpace");

	ANimbusHUD_DrawWidgetLineWorldSpace_Params params;
	params.StartWldPos = StartWldPos;
	params.EndWldPos = EndWldPos;
	params.SegmentCount = SegmentCount;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetLineVectorWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 StartWldPos                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Extent                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          LengthOnScreen                 (Parm, ZeroConstructor, IsPlainOldData)
// int                            SegmentCount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ANimbusHUD::DrawWidgetLineVectorWorldSpace(const struct FVector& StartWldPos, const struct FVector& Extent, float LengthOnScreen, int SegmentCount, const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetLineVectorWorldSpace");

	ANimbusHUD_DrawWidgetLineVectorWorldSpace_Params params;
	params.StartWldPos = StartWldPos;
	params.Extent = Extent;
	params.LengthOnScreen = LengthOnScreen;
	params.SegmentCount = SegmentCount;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetLine
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               StartPos                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector2D               EndPos                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            SegmentCount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ANimbusHUD::DrawWidgetLine(const struct FVector2D& StartPos, const struct FVector2D& EndPos, int SegmentCount, const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetLine");

	ANimbusHUD_DrawWidgetLine_Params params;
	params.StartPos = StartPos;
	params.EndPos = EndPos;
	params.SegmentCount = SegmentCount;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetEllipseWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Center                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 HorizontalExtent               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 VerticalExtent                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 SegmentXAxis                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            SegmentCount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ANimbusHUD::DrawWidgetEllipseWorldSpace(const struct FVector& Center, const struct FVector& HorizontalExtent, const struct FVector& VerticalExtent, const struct FVector& SegmentXAxis, int SegmentCount, const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetEllipseWorldSpace");

	ANimbusHUD_DrawWidgetEllipseWorldSpace_Params params;
	params.Center = Center;
	params.HorizontalExtent = HorizontalExtent;
	params.VerticalExtent = VerticalExtent;
	params.SegmentXAxis = SegmentXAxis;
	params.SegmentCount = SegmentCount;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetEllipse
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               Center                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          HorizontalRadius               (Parm, ZeroConstructor, IsPlainOldData)
// float                          VerticalRadius                 (Parm, ZeroConstructor, IsPlainOldData)
// float                          Rotation                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          SegmentOrientation             (Parm, ZeroConstructor, IsPlainOldData)
// int                            SegmentCount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ANimbusHUD::DrawWidgetEllipse(const struct FVector2D& Center, float HorizontalRadius, float VerticalRadius, float Rotation, float SegmentOrientation, int SegmentCount, const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetEllipse");

	ANimbusHUD_DrawWidgetEllipse_Params params;
	params.Center = Center;
	params.HorizontalRadius = HorizontalRadius;
	params.VerticalRadius = VerticalRadius;
	params.Rotation = Rotation;
	params.SegmentOrientation = SegmentOrientation;
	params.SegmentCount = SegmentCount;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetCircleWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Center                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Normal                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 SegmentXAxis                   (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// int                            SegmentCount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ANimbusHUD::DrawWidgetCircleWorldSpace(const struct FVector& Center, const struct FVector& Normal, float Radius, const struct FVector& SegmentXAxis, int SegmentCount, const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetCircleWorldSpace");

	ANimbusHUD_DrawWidgetCircleWorldSpace_Params params;
	params.Center = Center;
	params.Normal = Normal;
	params.Radius = Radius;
	params.SegmentXAxis = SegmentXAxis;
	params.SegmentCount = SegmentCount;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawWidgetCircle
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D               Center                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          SegmentOrientation             (Parm, ZeroConstructor, IsPlainOldData)
// int                            SegmentCount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ANimbusHUD::DrawWidgetCircle(const struct FVector2D& Center, float Radius, float SegmentOrientation, int SegmentCount, const struct FLinearColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawWidgetCircle");

	ANimbusHUD_DrawWidgetCircle_Params params;
	params.Center = Center;
	params.Radius = Radius;
	params.SegmentOrientation = SegmentOrientation;
	params.SegmentCount = SegmentCount;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DrawSimpleWidgetCircleWorldSpace
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Center                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Up                             (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FVector                 Normal                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// float                          Radius                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            SegmentCount                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FLinearColor            InColor                        (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bDottedLine                    (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::DrawSimpleWidgetCircleWorldSpace(const struct FVector& Center, const struct FVector& Up, const struct FVector& Normal, float Radius, int SegmentCount, const struct FLinearColor& InColor, bool bDottedLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DrawSimpleWidgetCircleWorldSpace");

	ANimbusHUD_DrawSimpleWidgetCircleWorldSpace_Params params;
	params.Center = Center;
	params.Up = Up;
	params.Normal = Normal;
	params.Radius = Radius;
	params.SegmentCount = SegmentCount;
	params.InColor = InColor;
	params.bDottedLine = bDottedLine;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.DisplayGuideMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGuideMessageType              MessageType                    (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::DisplayGuideMessage(EGuideMessageType MessageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.DisplayGuideMessage");

	ANimbusHUD_DisplayGuideMessage_Params params;
	params.MessageType = MessageType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.CloseDebugMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANimbusHUD::CloseDebugMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.CloseDebugMenu");

	ANimbusHUD_CloseDebugMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusHUD.ChangeHUDMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ENimbusHUDMode                 NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::ChangeHUDMode(ENimbusHUDMode NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.ChangeHUDMode");

	ANimbusHUD_ChangeHUDMode_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.BeginHUDDistortion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          MinDistortionScale             (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxDistortionScale             (Parm, ZeroConstructor, IsPlainOldData)
// float                          HideContainerDuration          (Parm, ZeroConstructor, IsPlainOldData)
// float                          ShowContainerDuration          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusHUD::BeginHUDDistortion(float MinDistortionScale, float MaxDistortionScale, float HideContainerDuration, float ShowContainerDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.BeginHUDDistortion");

	ANimbusHUD_BeginHUDDistortion_Params params;
	params.MinDistortionScale = MinDistortionScale;
	params.MaxDistortionScale = MaxDistortionScale;
	params.HideContainerDuration = HideContainerDuration;
	params.ShowContainerDuration = ShowContainerDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusHUD.AddChildToHudWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                 Content                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class UCanvasPanelSlot*        ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UCanvasPanelSlot* ANimbusHUD::AddChildToHudWidget(class UWidget* Content)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusHUD.AddChildToHudWidget");

	ANimbusHUD_AddChildToHudWidget_Params params;
	params.Content = Content;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusLevelScriptActor.StopAllLatentTask
// (Final, Native, Public, BlueprintCallable)

void ANimbusLevelScriptActor::StopAllLatentTask()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusLevelScriptActor.StopAllLatentTask");

	ANimbusLevelScriptActor_StopAllLatentTask_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusLevelScriptActor.OnReadyToPlay
// (Event, Public, BlueprintEvent)

void ANimbusLevelScriptActor::OnReadyToPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusLevelScriptActor.OnReadyToPlay");

	ANimbusLevelScriptActor_OnReadyToPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusLevelScriptActor.OnIntroAnimationStart
// (Event, Public, BlueprintEvent)

void ANimbusLevelScriptActor::OnIntroAnimationStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusLevelScriptActor.OnIntroAnimationStart");

	ANimbusLevelScriptActor_OnIntroAnimationStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusLevelScriptActor.OnBattleNavigationComplete
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            OutBattleNavigationID          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusLevelScriptActor::OnBattleNavigationComplete(int OutBattleNavigationID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusLevelScriptActor.OnBattleNavigationComplete");

	ANimbusLevelScriptActor_OnBattleNavigationComplete_Params params;
	params.OutBattleNavigationID = OutBattleNavigationID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusMapChangeManager.OnWorldCleanupHandler
// (Final, Native, Private)
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSessionEnded                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCleanupResources              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusMapChangeManager::OnWorldCleanupHandler(class UWorld* World, bool bSessionEnded, bool bCleanupResources)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMapChangeManager.OnWorldCleanupHandler");

	UNimbusMapChangeManager_OnWorldCleanupHandler_Params params;
	params.World = World;
	params.bSessionEnded = bSessionEnded;
	params.bCleanupResources = bCleanupResources;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusMapChangeManager.OnPostWorldCleanupHandler
// (Final, Native, Private)
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bSessionEnded                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCleanupResources              (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusMapChangeManager::OnPostWorldCleanupHandler(class UWorld* World, bool bSessionEnded, bool bCleanupResources)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMapChangeManager.OnPostWorldCleanupHandler");

	UNimbusMapChangeManager_OnPostWorldCleanupHandler_Params params;
	params.World = World;
	params.bSessionEnded = bSessionEnded;
	params.bCleanupResources = bCleanupResources;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusMusicPlayer.Stop
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)

void UNimbusMusicPlayer::STATIC_Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.Stop");

	UNimbusMusicPlayer_Stop_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusMusicPlayer.Play
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 in_EventName                   (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusMusicPlayer::STATIC_Play(const struct FString& in_EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.Play");

	UNimbusMusicPlayer_Play_Params params;
	params.in_EventName = in_EventName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusMusicPlayer.Pause
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           Pause                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusMusicPlayer::STATIC_Pause(bool Pause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.Pause");

	UNimbusMusicPlayer_Pause_Params params;
	params.Pause = Pause;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// DelegateFunction Nimbus.NimbusMusicPlayer.MusicPlayerOnEndOfMusic__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UNimbusMusicPlayer::MusicPlayerOnEndOfMusic__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusMusicPlayer.MusicPlayerOnEndOfMusic__DelegateSignature");

	UNimbusMusicPlayer_MusicPlayerOnEndOfMusic__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusMusicPlayer.MusicPlayerOnDuration__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UNimbusMusicPlayer::MusicPlayerOnDuration__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusMusicPlayer.MusicPlayerOnDuration__DelegateSignature");

	UNimbusMusicPlayer_MusicPlayerOnDuration__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusMusicPlayer.IsPlaying
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusMusicPlayer::STATIC_IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.IsPlaying");

	UNimbusMusicPlayer_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusMusicPlayer.IsPause
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusMusicPlayer::STATIC_IsPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.IsPause");

	UNimbusMusicPlayer_IsPause_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusMusicPlayer.IsEndPlay
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusMusicPlayer::STATIC_IsEndPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.IsEndPlay");

	UNimbusMusicPlayer_IsEndPlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusMusicPlayer.GetPlayPosition
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusMusicPlayer::STATIC_GetPlayPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.GetPlayPosition");

	UNimbusMusicPlayer_GetPlayPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusMusicPlayer.GetDuration
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusMusicPlayer::STATIC_GetDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.GetDuration");

	UNimbusMusicPlayer_GetDuration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusMusicPlayer.GetAudioSpectrum
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParms, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<float>                  arry                           (Parm, OutParm, ZeroConstructor)

void UNimbusMusicPlayer::STATIC_GetAudioSpectrum(TArray<float>* arry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusMusicPlayer.GetAudioSpectrum");

	UNimbusMusicPlayer_GetAudioSpectrum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (arry != nullptr)
		*arry = params.arry;
}


// Function Nimbus.NimbusPlayerCameraManager.TestLoopCameraShakePlayAddScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          inScale                        (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerCameraManager::TestLoopCameraShakePlayAddScale(float inScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerCameraManager.TestLoopCameraShakePlayAddScale");

	ANimbusPlayerCameraManager_TestLoopCameraShakePlayAddScale_Params params;
	params.inScale = inScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerCameraManager.TestLoopCameraShakePlay
// (Final, Native, Public, BlueprintCallable)

void ANimbusPlayerCameraManager::TestLoopCameraShakePlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerCameraManager.TestLoopCameraShakePlay");

	ANimbusPlayerCameraManager_TestLoopCameraShakePlay_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.UnpauseAllControllerVibrations
// (Final, Native, Public, BlueprintCallable)

void ANimbusPlayerController::UnpauseAllControllerVibrations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.UnpauseAllControllerVibrations");

	ANimbusPlayerController_UnpauseAllControllerVibrations_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.TogglePlayerDebugInfo
// (Final, Exec, Native, Public)

void ANimbusPlayerController::TogglePlayerDebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.TogglePlayerDebugInfo");

	ANimbusPlayerController_TogglePlayerDebugInfo_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.ToggleHUD
// (Final, Exec, Native, Public)

void ANimbusPlayerController::ToggleHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.ToggleHUD");

	ANimbusPlayerController_ToggleHUD_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.StopControllerVibrationTypes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerVibrationType       Type1                          (Parm, ZeroConstructor, IsPlainOldData)
// EControllerVibrationType       Type2                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::StopControllerVibrationTypes(EControllerVibrationType Type1, EControllerVibrationType Type2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.StopControllerVibrationTypes");

	ANimbusPlayerController_StopControllerVibrationTypes_Params params;
	params.Type1 = Type1;
	params.Type2 = Type2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.StopControllerVibrationType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerVibrationType       Type                           (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::StopControllerVibrationType(EControllerVibrationType Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.StopControllerVibrationType");

	ANimbusPlayerController_StopControllerVibrationType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.StopAllControllerVibrationImmediately
// (Final, Native, Public, BlueprintCallable)

void ANimbusPlayerController::StopAllControllerVibrationImmediately()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.StopAllControllerVibrationImmediately");

	ANimbusPlayerController_StopAllControllerVibrationImmediately_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.StartControllerVibration
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                          intensity                      (Parm, ZeroConstructor, IsPlainOldData)
// float                          Duration                       (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::StartControllerVibration(float intensity, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.StartControllerVibration");

	ANimbusPlayerController_StartControllerVibration_Params params;
	params.intensity = intensity;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.SetXBoxControllerVibrationScalar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::SetXBoxControllerVibrationScalar(float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.SetXBoxControllerVibrationScalar");

	ANimbusPlayerController_SetXBoxControllerVibrationScalar_Params params;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.SetPSControllerVibrationScalar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Scalar                         (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::SetPSControllerVibrationScalar(float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.SetPSControllerVibrationScalar");

	ANimbusPlayerController_SetPSControllerVibrationScalar_Params params;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.SetIsSkipIGC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSkipIGC                       (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::SetIsSkipIGC(bool bSkipIGC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.SetIsSkipIGC");

	ANimbusPlayerController_SetIsSkipIGC_Params params;
	params.bSkipIGC = bSkipIGC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.SetControllerVibrationScales
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerVibrationType       Type1                          (Parm, ZeroConstructor, IsPlainOldData)
// EControllerVibrationType       Type2                          (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::SetControllerVibrationScales(EControllerVibrationType Type1, EControllerVibrationType Type2, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.SetControllerVibrationScales");

	ANimbusPlayerController_SetControllerVibrationScales_Params params;
	params.Type1 = Type1;
	params.Type2 = Type2;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.SetControllerVibrationScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerVibrationType       Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::SetControllerVibrationScale(EControllerVibrationType Type, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.SetControllerVibrationScale");

	ANimbusPlayerController_SetControllerVibrationScale_Params params;
	params.Type = Type;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.PauseAllControllerVibrations
// (Final, Native, Public, BlueprintCallable)

void ANimbusPlayerController::PauseAllControllerVibrations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.PauseAllControllerVibrations");

	ANimbusPlayerController_PauseAllControllerVibrations_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.ForceStopControllerVibration
// (Event, Protected, BlueprintEvent)

void ANimbusPlayerController::ForceStopControllerVibration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.ForceStopControllerVibration");

	ANimbusPlayerController_ForceStopControllerVibration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.ControllerVibrationNotify_OnIGC
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerVibrationType       Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::ControllerVibrationNotify_OnIGC(EControllerVibrationType Type, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.ControllerVibrationNotify_OnIGC");

	ANimbusPlayerController_ControllerVibrationNotify_OnIGC_Params params;
	params.Type = Type;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusPlayerController.ControllerVibrationNotify
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EControllerVibrationType       Type                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Scale                          (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusPlayerController::ControllerVibrationNotify(EControllerVibrationType Type, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusPlayerController.ControllerVibrationNotify");

	ANimbusPlayerController_ControllerVibrationNotify_Params params;
	params.Type = Type;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusReplayPlayTimeManager.OnSystemStartFrameHandler
// (Final, Native, Private)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusReplayPlayTimeManager::OnSystemStartFrameHandler(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusReplayPlayTimeManager.OnSystemStartFrameHandler");

	UNimbusReplayPlayTimeManager_OnSystemStartFrameHandler_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusRibbonCollectionActor.OnPreRestartPhaseEvent
// (Final, Native, Protected)

void ANimbusRibbonCollectionActor::OnPreRestartPhaseEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusRibbonCollectionActor.OnPreRestartPhaseEvent");

	ANimbusRibbonCollectionActor_OnPreRestartPhaseEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusRibbonCollectionActor.OnIGCEnableEvent
// (Final, Native, Protected)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusRibbonCollectionActor::OnIGCEnableEvent(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusRibbonCollectionActor.OnIGCEnableEvent");

	ANimbusRibbonCollectionActor_OnIGCEnableEvent_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.UnloadBank
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioBank*            Bank                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 BankName                       (Parm, ZeroConstructor)

void UNimbusSoundManager::STATIC_UnloadBank(class UAkAudioBank* Bank, const struct FString& BankName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.UnloadBank");

	UNimbusSoundManager_UnloadBank_Params params;
	params.Bank = Bank;
	params.BankName = BankName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.StopAll
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)

void UNimbusSoundManager::STATIC_StopAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.StopAll");

	UNimbusSoundManager_StopAll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.StopActor
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusSoundManager::STATIC_StopActor(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.StopActor");

	UNimbusSoundManager_StopActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.SetSwitch
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   SwitchGroup                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SwitchState                    (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusSoundManager::STATIC_SetSwitch(const struct FName& SwitchGroup, const struct FName& SwitchState, class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.SetSwitch");

	UNimbusSoundManager_SetSwitch_Params params;
	params.SwitchGroup = SwitchGroup;
	params.SwitchState = SwitchState;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.SetState
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   StateGroup                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   State                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusSoundManager::STATIC_SetState(const struct FName& StateGroup, const struct FName& State)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.SetState");

	UNimbusSoundManager_SetState_Params params;
	params.StateGroup = StateGroup;
	params.State = State;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.SetRTPCValue
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FName                   RTPC                           (Parm, ZeroConstructor, IsPlainOldData)
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            InterpolationTimeMs            (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusSoundManager::STATIC_SetRTPCValue(const struct FName& RTPC, float Value, int InterpolationTimeMs, class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.SetRTPCValue");

	UNimbusSoundManager_SetRTPCValue_Params params;
	params.RTPC = RTPC;
	params.Value = Value;
	params.InterpolationTimeMs = InterpolationTimeMs;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.SetOutputMode
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// ENimbusSoundOutputMode         OutputMode                     (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusSoundManager::STATIC_SetOutputMode(ENimbusSoundOutputMode OutputMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.SetOutputMode");

	UNimbusSoundManager_SetOutputMode_Params params;
	params.OutputMode = OutputMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.SetOcclusionRefreshInterval
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          RefreshInterval                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusSoundManager::STATIC_SetOcclusionRefreshInterval(float RefreshInterval, class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.SetOcclusionRefreshInterval");

	UNimbusSoundManager_SetOcclusionRefreshInterval_Params params;
	params.RefreshInterval = RefreshInterval;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.PostEventAtLocation
// (Final, BlueprintCosmetic, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           akevent                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (Parm, IsPlainOldData)
// struct FRotator                Orientation                    (Parm, IsPlainOldData)
// struct FString                 EventName                      (Parm, ZeroConstructor)
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)
// ENimbusSoundType               SoundType                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusSoundManager::STATIC_PostEventAtLocation(class UAkAudioEvent* akevent, const struct FVector& Location, const struct FRotator& Orientation, const struct FString& EventName, class UObject* WorldContextObject, ENimbusSoundType SoundType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.PostEventAtLocation");

	UNimbusSoundManager_PostEventAtLocation_Params params;
	params.akevent = akevent;
	params.Location = Location;
	params.Orientation = Orientation;
	params.EventName = EventName;
	params.WorldContextObject = WorldContextObject;
	params.SoundType = SoundType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusSoundManager.PostEvent
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioEvent*           akevent                        (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bStopWhenAttachedToDestroyed   (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 EventName                      (Parm, ZeroConstructor)
// ENimbusSoundType               SoundType                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UNimbusSoundManager::STATIC_PostEvent(class UAkAudioEvent* akevent, class AActor* Actor, bool bStopWhenAttachedToDestroyed, const struct FString& EventName, ENimbusSoundType SoundType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.PostEvent");

	UNimbusSoundManager_PostEvent_Params params;
	params.akevent = akevent;
	params.Actor = Actor;
	params.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	params.EventName = EventName;
	params.SoundType = SoundType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusSoundManager.LoadInitBank
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)

void UNimbusSoundManager::STATIC_LoadInitBank()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.LoadInitBank");

	UNimbusSoundManager_LoadInitBank_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.LoadBanks
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class UAkAudioBank*>    SoundBanks                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// bool                           SynchronizeSoundBanks          (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusSoundManager::STATIC_LoadBanks(TArray<class UAkAudioBank*> SoundBanks, bool SynchronizeSoundBanks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.LoadBanks");

	UNimbusSoundManager_LoadBanks_Params params;
	params.SoundBanks = SoundBanks;
	params.SynchronizeSoundBanks = SynchronizeSoundBanks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.LoadBank
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAkAudioBank*            Bank                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 BankName                       (Parm, ZeroConstructor)

void UNimbusSoundManager::STATIC_LoadBank(class UAkAudioBank* Bank, const struct FString& BankName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.LoadBank");

	UNimbusSoundManager_LoadBank_Params params;
	params.Bank = Bank;
	params.BankName = BankName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSoundManager.LoadAllFilePackages
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusSoundManager::STATIC_LoadAllFilePackages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.LoadAllFilePackages");

	UNimbusSoundManager_LoadAllFilePackages_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusSoundManager.GetOutputMode
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// ENimbusSoundOutputMode         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ENimbusSoundOutputMode UNimbusSoundManager::STATIC_GetOutputMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.GetOutputMode");

	UNimbusSoundManager_GetOutputMode_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusSoundManager.ClearBanks
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)

void UNimbusSoundManager::STATIC_ClearBanks()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSoundManager.ClearBanks");

	UNimbusSoundManager_ClearBanks_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusSubLevelManager.OnLoadedSubLevel
// (Final, Native, Protected)

void UNimbusSubLevelManager::OnLoadedSubLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusSubLevelManager.OnLoadedSubLevel");

	UNimbusSubLevelManager_OnLoadedSubLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusTriggerBase.IsNimbusOverlappingActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                  Other                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ANimbusTriggerBase::IsNimbusOverlappingActor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusTriggerBase.IsNimbusOverlappingActor");

	ANimbusTriggerBase_IsNimbusOverlappingActor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusTriggerBase.GetNimbusOverlappingActors
// (Final, Native, Public, HasOutParms, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>          OverlappingActors              (Parm, OutParm, ZeroConstructor)
// class UClass*                  ClassFilter                    (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusTriggerBase::GetNimbusOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusTriggerBase.GetNimbusOverlappingActors");

	ANimbusTriggerBase_GetNimbusOverlappingActors_Params params;
	params.ClassFilter = ClassFilter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OverlappingActors != nullptr)
		*OverlappingActors = params.OverlappingActors;
}


// Function Nimbus.NimbusTriggerBase.EnableTriggerVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusTriggerBase::EnableTriggerVolume(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusTriggerBase.EnableTriggerVolume");

	ANimbusTriggerBase_EnableTriggerVolume_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.OnTransitionOutStart
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNimbusUILayer::OnTransitionOutStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.OnTransitionOutStart");

	UNimbusUILayer_OnTransitionOutStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.OnTransitionOutEnd
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNimbusUILayer::OnTransitionOutEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.OnTransitionOutEnd");

	UNimbusUILayer_OnTransitionOutEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.OnTransitionInStart
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNimbusUILayer::OnTransitionInStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.OnTransitionInStart");

	UNimbusUILayer_OnTransitionInStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.OnTransitionInEnd
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNimbusUILayer::OnTransitionInEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.OnTransitionInEnd");

	UNimbusUILayer_OnTransitionInEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.OnPushButtonCancel
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNimbusUILayer::OnPushButtonCancel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.OnPushButtonCancel");

	UNimbusUILayer_OnPushButtonCancel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.OnPushButtonAccept
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UNimbusUILayer::OnPushButtonAccept()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.OnPushButtonAccept");

	UNimbusUILayer_OnPushButtonAccept_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.OnLayerLinkButtonUnfocused
// (Event, Public, BlueprintEvent)
// Parameters:
// class UUILayerLinkButton*      Btn                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UNimbusUILayer::OnLayerLinkButtonUnfocused(class UUILayerLinkButton* Btn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.OnLayerLinkButtonUnfocused");

	UNimbusUILayer_OnLayerLinkButtonUnfocused_Params params;
	params.Btn = Btn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.OnLayerLinkButtonFocused
// (Event, Public, BlueprintEvent)
// Parameters:
// class UUILayerLinkButton*      Btn                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void UNimbusUILayer::OnLayerLinkButtonFocused(class UUILayerLinkButton* Btn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.OnLayerLinkButtonFocused");

	UNimbusUILayer_OnLayerLinkButtonFocused_Params params;
	params.Btn = Btn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.IsCurrentLayer
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UNimbusUILayer::IsCurrentLayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.IsCurrentLayer");

	UNimbusUILayer_IsCurrentLayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusUILayer.GotoPreviousLayer
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UNimbusUILayer::GotoPreviousLayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.GotoPreviousLayer");

	UNimbusUILayer_GotoPreviousLayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.GotoNextLayer
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UNimbusUILayer::GotoNextLayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.GotoNextLayer");

	UNimbusUILayer_GotoNextLayer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayer.GetUILayerManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNimbusUILayerManager*   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UNimbusUILayerManager* UNimbusUILayer::GetUILayerManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayer.GetUILayerManager");

	UNimbusUILayer_GetUILayerManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.NimbusUILayerManager.OnLevelUnloded
// (Final, Native, Protected)

void UNimbusUILayerManager::OnLevelUnloded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayerManager.OnLevelUnloded");

	UNimbusUILayerManager_OnLevelUnloded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusUILayerManager.OnLevelLoaded
// (Final, Native, Protected)

void UNimbusUILayerManager::OnLevelLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusUILayerManager.OnLevelLoaded");

	UNimbusUILayerManager_OnLevelLoaded_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusVRDebugGameMode.SetNextPlayerPawnClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 nextPawnClass                  (Parm, ZeroConstructor)

void ANimbusVRDebugGameMode::SetNextPlayerPawnClass(const struct FString& nextPawnClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusVRDebugGameMode.SetNextPlayerPawnClass");

	ANimbusVRDebugGameMode_SetNextPlayerPawnClass_Params params;
	params.nextPawnClass = nextPawnClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusWidgetComponent.FitToCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FOVAngle                       (Parm, ZeroConstructor, IsPlainOldData)

void UNimbusWidgetComponent::FitToCamera(float FOVAngle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusWidgetComponent.FitToCamera");

	UNimbusWidgetComponent_FitToCamera_Params params;
	params.FOVAngle = FOVAngle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.ObjectMapper.OnPreRestartPhaseEvent
// (Final, Native, Protected)

void AObjectMapper::OnPreRestartPhaseEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ObjectMapper.OnPreRestartPhaseEvent");

	AObjectMapper_OnPreRestartPhaseEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.ObjectMapper.OnCombatZoneUpdatedEvent
// (Final, Native, Protected)

void AObjectMapper::OnCombatZoneUpdatedEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ObjectMapper.OnCombatZoneUpdatedEvent");

	AObjectMapper_OnCombatZoneUpdatedEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiResultRewardsWidget.ProceedToNextAnimationPhase
// (Final, Native, Private)

void UMultiResultRewardsWidget::ProceedToNextAnimationPhase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiResultRewardsWidget.ProceedToNextAnimationPhase");

	UMultiResultRewardsWidget_ProceedToNextAnimationPhase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.MultiResultRewardsWidget.OnRankUpAnimationFinished
// (Final, Native, Private)

void UMultiResultRewardsWidget::OnRankUpAnimationFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.MultiResultRewardsWidget.OnRankUpAnimationFinished");

	UMultiResultRewardsWidget_OnRankUpAnimationFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PersistentUserWidget.OnWeaponActivatorInitialize
// (Final, Native, Private)

void UPersistentUserWidget::OnWeaponActivatorInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PersistentUserWidget.OnWeaponActivatorInitialize");

	UPersistentUserWidget_OnWeaponActivatorInitialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PersistentUserWidget.OnSpecialWeaponChanged
// (Final, Native, Private)

void UPersistentUserWidget::OnSpecialWeaponChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PersistentUserWidget.OnSpecialWeaponChanged");

	UPersistentUserWidget_OnSpecialWeaponChanged_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PersistentUserWidget.OnHUDEnabled
// (Native, Public)

void UPersistentUserWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PersistentUserWidget.OnHUDEnabled");

	UPersistentUserWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PersistentUserWidget.OnCurrentHUDAlertColorUpdated
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UPersistentUserWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PersistentUserWidget.OnCurrentHUDAlertColorUpdated");

	UPersistentUserWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PitchMeterWidget.CurrentHUDAlertColorUpdated
// (Native, Event, Protected, HasOutParms, HasDefaults, BlueprintEvent)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UPitchMeterWidget::CurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PitchMeterWidget.CurrentHUDAlertColorUpdated");

	UPitchMeterWidget_CurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlaneVFXComponent.ResetParameters
// (Final, Native, Public, BlueprintCallable)

void UPlaneVFXComponent::ResetParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlaneVFXComponent.ResetParameters");

	UPlaneVFXComponent_ResetParameters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlaneVFXComponent.OnRestored
// (Final, Native, Public)

void UPlaneVFXComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlaneVFXComponent.OnRestored");

	UPlaneVFXComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlaneVFXComponent.OnReposition
// (Final, Native, Public)

void UPlaneVFXComponent::OnReposition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlaneVFXComponent.OnReposition");

	UPlaneVFXComponent_OnReposition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlaneVFXComponent.OnOwnerVisibilityChanged
// (Final, Native, Public)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneVFXComponent::OnOwnerVisibilityChanged(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlaneVFXComponent.OnOwnerVisibilityChanged");

	UPlaneVFXComponent_OnOwnerVisibilityChanged_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlaneVFXComponent.IGCUpdateParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          WingTipVapor                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ShoulderVapor                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          WingSurfaceVapor               (Parm, ZeroConstructor, IsPlainOldData)
// float                          WingOverVapor                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          WingOverVaporHighGTurn         (Parm, ZeroConstructor, IsPlainOldData)
// float                          AfterBurner                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneVFXComponent::IGCUpdateParams(float WingTipVapor, float ShoulderVapor, float WingSurfaceVapor, float WingOverVapor, float WingOverVaporHighGTurn, float AfterBurner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlaneVFXComponent.IGCUpdateParams");

	UPlaneVFXComponent_IGCUpdateParams_Params params;
	params.WingTipVapor = WingTipVapor;
	params.ShoulderVapor = ShoulderVapor;
	params.WingSurfaceVapor = WingSurfaceVapor;
	params.WingOverVapor = WingOverVapor;
	params.WingOverVaporHighGTurn = WingOverVaporHighGTurn;
	params.AfterBurner = AfterBurner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerHUDModeManager.OnTransitionToMiniGameHandler
// (Final, Native, Private)
// Parameters:
// bool                           bIsTransitingIn                (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHUDModeManager::OnTransitionToMiniGameHandler(bool bIsTransitingIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerHUDModeManager.OnTransitionToMiniGameHandler");

	UPlayerHUDModeManager_OnTransitionToMiniGameHandler_Params params;
	params.bIsTransitingIn = bIsTransitingIn;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerHUDModeManager.OnReferencedActorEndPlayHandler
// (Final, Native, Private)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)
// TEnumAsByte<EEndPlayReason>    EndPlayReason                  (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHUDModeManager::OnReferencedActorEndPlayHandler(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerHUDModeManager.OnReferencedActorEndPlayHandler");

	UPlayerHUDModeManager_OnReferencedActorEndPlayHandler_Params params;
	params.Actor = Actor;
	params.EndPlayReason = EndPlayReason;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerHUDModeManager.OnPreStartMiniGamePhaseHandler
// (Final, Native, Private)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHUDModeManager::OnPreStartMiniGamePhaseHandler(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerHUDModeManager.OnPreStartMiniGamePhaseHandler");

	UPlayerHUDModeManager_OnPreStartMiniGamePhaseHandler_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerHUDModeManager.OnPreRestartPhaseHandler
// (Final, Native, Private)

void UPlayerHUDModeManager::OnPreRestartPhaseHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerHUDModeManager.OnPreRestartPhaseHandler");

	UPlayerHUDModeManager_OnPreRestartPhaseHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerHUDModeManager.OnMultiAbortHandler
// (Final, Native, Private)

void UPlayerHUDModeManager::OnMultiAbortHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerHUDModeManager.OnMultiAbortHandler");

	UPlayerHUDModeManager_OnMultiAbortHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerHUDModeManager.OnDebugStateChangeHandler
// (Final, Native, Private)
// Parameters:
// EDebugModeState                State                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerHUDModeManager::OnDebugStateChangeHandler(EDebugModeState State)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerHUDModeManager.OnDebugStateChangeHandler");

	UPlayerHUDModeManager_OnDebugStateChangeHandler_Params params;
	params.State = State;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.UpdateThrusterAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*           AnimInst                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   CloseShapeName                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   OpenShapeName                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          LoopMagnitude                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          LoopFrequency                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::UpdateThrusterAnimation(class UAnimInstance* AnimInst, const struct FName& CloseShapeName, const struct FName& OpenShapeName, float LoopMagnitude, float LoopFrequency)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.UpdateThrusterAnimation");

	APlayerPlane_UpdateThrusterAnimation_Params params;
	params.AnimInst = AnimInst;
	params.CloseShapeName = CloseShapeName;
	params.OpenShapeName = OpenShapeName;
	params.LoopMagnitude = LoopMagnitude;
	params.LoopFrequency = LoopFrequency;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.ToggleMiniMapRadar
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::ToggleMiniMapRadar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.ToggleMiniMapRadar");

	APlayerPlane_ToggleMiniMapRadar_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.TargetLostJammer
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::TargetLostJammer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.TargetLostJammer");

	APlayerPlane_TargetLostJammer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.StartTargetLostJammerCheck
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::StartTargetLostJammerCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.StartTargetLostJammerCheck");

	APlayerPlane_StartTargetLostJammerCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.StartSeekerJammerCheck
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::StartSeekerJammerCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.StartSeekerJammerCheck");

	APlayerPlane_StartSeekerJammerCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetStallAltitude
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          altStall                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetStallAltitude(float altStall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetStallAltitude");

	APlayerPlane_SetStallAltitude_Params params;
	params.altStall = altStall;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetSandVFXMaxTransparency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          TargetTransparency             (Parm, ZeroConstructor, IsPlainOldData)
// float                          SwitchingTime                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetSandVFXMaxTransparency(float TargetTransparency, float SwitchingTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetSandVFXMaxTransparency");

	APlayerPlane_SetSandVFXMaxTransparency_Params params;
	params.TargetTransparency = TargetTransparency;
	params.SwitchingTime = SwitchingTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetSandVFXMaxDensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          TargetDensity                  (Parm, ZeroConstructor, IsPlainOldData)
// float                          SwitchingTime                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetSandVFXMaxDensity(float TargetDensity, float SwitchingTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetSandVFXMaxDensity");

	APlayerPlane_SetSandVFXMaxDensity_Params params;
	params.TargetDensity = TargetDensity;
	params.SwitchingTime = SwitchingTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetRestrictedAltitude
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          AltitudeMeters                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::STATIC_SetRestrictedAltitude(float AltitudeMeters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetRestrictedAltitude");

	APlayerPlane_SetRestrictedAltitude_Params params;
	params.AltitudeMeters = AltitudeMeters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetMaxPursuitAttackers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            NewMax                         (Parm, ZeroConstructor, IsPlainOldData)
// int                            NewMaxPursuitAttackers         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::STATIC_SetMaxPursuitAttackers(int NewMax, int NewMaxPursuitAttackers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetMaxPursuitAttackers");

	APlayerPlane_SetMaxPursuitAttackers_Params params;
	params.NewMax = NewMax;
	params.NewMaxPursuitAttackers = NewMaxPursuitAttackers;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetMaxNonpursuitAttackers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            NewMax                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::STATIC_SetMaxNonpursuitAttackers(int NewMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetMaxNonpursuitAttackers");

	APlayerPlane_SetMaxNonpursuitAttackers_Params params;
	params.NewMax = NewMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetMaxEnemyMissileNum
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            PursuitAttackerMissileNum      (Parm, ZeroConstructor, IsPlainOldData)
// int                            NonPursuitAttackerMissileNum   (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::STATIC_SetMaxEnemyMissileNum(int PursuitAttackerMissileNum, int NonPursuitAttackerMissileNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetMaxEnemyMissileNum");

	APlayerPlane_SetMaxEnemyMissileNum_Params params;
	params.PursuitAttackerMissileNum = PursuitAttackerMissileNum;
	params.NonPursuitAttackerMissileNum = NonPursuitAttackerMissileNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetHudWarningMessageDisplayTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DisplayTime                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetHudWarningMessageDisplayTime(float DisplayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetHudWarningMessageDisplayTime");

	APlayerPlane_SetHudWarningMessageDisplayTime_Params params;
	params.DisplayTime = DisplayTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetFELocationAndRotation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FRotator                Rotation                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void APlayerPlane::SetFELocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetFELocationAndRotation");

	APlayerPlane_SetFELocationAndRotation_Params params;
	params.Location = Location;
	params.Rotation = Rotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetFakeGroundHeightOnlyForAirShow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          FakeHeight                     (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEnableFake                  (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetFakeGroundHeightOnlyForAirShow(float FakeHeight, bool bIsEnableFake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetFakeGroundHeightOnlyForAirShow");

	APlayerPlane_SetFakeGroundHeightOnlyForAirShow_Params params;
	params.FakeHeight = FakeHeight;
	params.bIsEnableFake = bIsEnableFake;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetEnableCheckCockpitCameraOutOfBound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           IsEnable                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetEnableCheckCockpitCameraOutOfBound(bool IsEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetEnableCheckCockpitCameraOutOfBound");

	APlayerPlane_SetEnableCheckCockpitCameraOutOfBound_Params params;
	params.IsEnable = IsEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetControlType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsExpert                      (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetControlType(bool bIsExpert)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetControlType");

	APlayerPlane_SetControlType_Params params;
	params.bIsExpert = bIsExpert;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetCatapultShuttleActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                  Actor                          (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetCatapultShuttleActor(class AActor* Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetCatapultShuttleActor");

	APlayerPlane_SetCatapultShuttleActor_Params params;
	params.Actor = Actor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetCameraLocationAndOrientation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraComponent*        CamComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USkeletalMeshComponent*  SkeletalMeshComp               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetCameraLocationAndOrientation(class UCameraComponent* CamComponent, class USkeletalMeshComponent* SkeletalMeshComp, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetCameraLocationAndOrientation");

	APlayerPlane_SetCameraLocationAndOrientation_Params params;
	params.CamComponent = CamComponent;
	params.SkeletalMeshComp = SkeletalMeshComp;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetCameraAndTargetLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraComponent*        CamComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USceneComponent*         TargetComp                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class USkeletalMeshComponent*  SkeletalMeshComp               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FName                   BoneName                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   TargetBoneName                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetCameraAndTargetLocation(class UCameraComponent* CamComponent, class USceneComponent* TargetComp, class USkeletalMeshComponent* SkeletalMeshComp, const struct FName& BoneName, const struct FName& TargetBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetCameraAndTargetLocation");

	APlayerPlane_SetCameraAndTargetLocation_Params params;
	params.CamComponent = CamComponent;
	params.TargetComp = TargetComp;
	params.SkeletalMeshComp = SkeletalMeshComp;
	params.BoneName = BoneName;
	params.TargetBoneName = TargetBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.SetBattleMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBattleMode                    NewMode                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::SetBattleMode(EBattleMode NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.SetBattleMode");

	APlayerPlane_SetBattleMode_Params params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.RestoreWeaponFromCheckpoint
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int                            WeaponSet                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            GunCount                       (Parm, ZeroConstructor, IsPlainOldData)
// int                            MainWeaponCount                (Parm, ZeroConstructor, IsPlainOldData)
// int                            SpecialWeaponCount             (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::RestoreWeaponFromCheckpoint(int WeaponSet, int GunCount, int MainWeaponCount, int SpecialWeaponCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.RestoreWeaponFromCheckpoint");

	APlayerPlane_RestoreWeaponFromCheckpoint_Params params;
	params.WeaponSet = WeaponSet;
	params.GunCount = GunCount;
	params.MainWeaponCount = MainWeaponCount;
	params.SpecialWeaponCount = SpecialWeaponCount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.ResetTargetLostJammer
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::ResetTargetLostJammer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.ResetTargetLostJammer");

	APlayerPlane_ResetTargetLostJammer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.ResetStallAltitude
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::ResetStallAltitude()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.ResetStallAltitude");

	APlayerPlane_ResetStallAltitude_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.PlayVRSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVRSoundActor                  Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 EventName                      (Parm, ZeroConstructor)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int APlayerPlane::PlayVRSound(EVRSoundActor Type, const struct FString& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.PlayVRSound");

	APlayerPlane_PlayVRSound_Params params;
	params.Type = Type;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.OnWeaponSwitch
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::OnWeaponSwitch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnWeaponSwitch");

	APlayerPlane_OnWeaponSwitch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnWeaponFireReleased
// (Final, Native, Public)

void APlayerPlane::OnWeaponFireReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnWeaponFireReleased");

	APlayerPlane_OnWeaponFireReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnWeaponFirePressed
// (Final, Native, Public)

void APlayerPlane::OnWeaponFirePressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnWeaponFirePressed");

	APlayerPlane_OnWeaponFirePressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnWeaponFireMissileReleased
// (Final, Native, Public)

void APlayerPlane::OnWeaponFireMissileReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnWeaponFireMissileReleased");

	APlayerPlane_OnWeaponFireMissileReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnWeaponFireMissilePressed
// (Final, Native, Public)

void APlayerPlane::OnWeaponFireMissilePressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnWeaponFireMissilePressed");

	APlayerPlane_OnWeaponFireMissilePressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnWeaponFireMissile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           pressed                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::OnWeaponFireMissile(bool pressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnWeaponFireMissile");

	APlayerPlane_OnWeaponFireMissile_Params params;
	params.pressed = pressed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnWeaponFire
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           pressed                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::OnWeaponFire(bool pressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnWeaponFire");

	APlayerPlane_OnWeaponFire_Params params;
	params.pressed = pressed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnUnpauseHandler
// (Final, Native, Private)

void APlayerPlane::OnUnpauseHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnUnpauseHandler");

	APlayerPlane_OnUnpauseHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnTargetSelectReleased
// (Final, Native, Public)

void APlayerPlane::OnTargetSelectReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnTargetSelectReleased");

	APlayerPlane_OnTargetSelectReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnTargetSelectPressed
// (Final, Native, Public)

void APlayerPlane::OnTargetSelectPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnTargetSelectPressed");

	APlayerPlane_OnTargetSelectPressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnReplayCameraChanged
// (Final, Native, Public)
// Parameters:
// unsigned char                  Type                           (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::OnReplayCameraChanged(unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnReplayCameraChanged");

	APlayerPlane_OnReplayCameraChanged_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnPlaneEndOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::OnPlaneEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnPlaneEndOverlap");

	APlayerPlane_OnPlaneEndOverlap_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnPlaneBeginOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                  OverlappedActor                (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::OnPlaneBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnPlaneBeginOverlap");

	APlayerPlane_OnPlaneBeginOverlap_Params params;
	params.OverlappedActor = OverlappedActor;
	params.OtherActor = OtherActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnPauseHandler
// (Final, Native, Private)

void APlayerPlane::OnPauseHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnPauseHandler");

	APlayerPlane_OnPauseHandler_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnInputViewPressed
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::OnInputViewPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnInputViewPressed");

	APlayerPlane_OnInputViewPressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnFlareActivationRightReleased
// (Final, Native, Public)

void APlayerPlane::OnFlareActivationRightReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnFlareActivationRightReleased");

	APlayerPlane_OnFlareActivationRightReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnFlareActivationRightPressed
// (Final, Native, Public)

void APlayerPlane::OnFlareActivationRightPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnFlareActivationRightPressed");

	APlayerPlane_OnFlareActivationRightPressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnFlareActivationLeftReleased
// (Final, Native, Public)

void APlayerPlane::OnFlareActivationLeftReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnFlareActivationLeftReleased");

	APlayerPlane_OnFlareActivationLeftReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnFlareActivationLeftPressed
// (Final, Native, Public)

void APlayerPlane::OnFlareActivationLeftPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnFlareActivationLeftPressed");

	APlayerPlane_OnFlareActivationLeftPressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnFlareActivation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           pressed                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::OnFlareActivation(bool pressed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnFlareActivation");

	APlayerPlane_OnFlareActivation_Params params;
	params.pressed = pressed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnExitCloud
// (Event, Public, BlueprintEvent)

void APlayerPlane::OnExitCloud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnExitCloud");

	APlayerPlane_OnExitCloud_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnEnterCloud
// (Event, Public, BlueprintEvent)

void APlayerPlane::OnEnterCloud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnEnterCloud");

	APlayerPlane_OnEnterCloud_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.PlayerPlane.OnEndTakeoff__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void APlayerPlane::OnEndTakeoff__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.PlayerPlane.OnEndTakeoff__DelegateSignature");

	APlayerPlane_OnEndTakeoff__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.PlayerPlane.OnEndLanding__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void APlayerPlane::OnEndLanding__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.PlayerPlane.OnEndLanding__DelegateSignature");

	APlayerPlane_OnEndLanding__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnDeactivateMADComponent
// (Final, Native, Public)
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)

void APlayerPlane::OnDeactivateMADComponent(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnDeactivateMADComponent");

	APlayerPlane_OnDeactivateMADComponent_Params params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnCombatZoneUpdatedEvent
// (Final, Native, Private)

void APlayerPlane::OnCombatZoneUpdatedEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnCombatZoneUpdatedEvent");

	APlayerPlane_OnCombatZoneUpdatedEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnChangeViewReleased
// (Final, Native, Public)

void APlayerPlane::OnChangeViewReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnChangeViewReleased");

	APlayerPlane_OnChangeViewReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnChangeViewPressed
// (Final, Native, Public)

void APlayerPlane::OnChangeViewPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnChangeViewPressed");

	APlayerPlane_OnChangeViewPressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnCameraViewChanged
// (Final, Native, Public)
// Parameters:
// ECameraType                    CameraViewType                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::OnCameraViewChanged(ECameraType CameraViewType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnCameraViewChanged");

	APlayerPlane_OnCameraViewChanged_Params params;
	params.CameraViewType = CameraViewType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.PlayerPlane.OnBeginTakeoff__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void APlayerPlane::OnBeginTakeoff__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.PlayerPlane.OnBeginTakeoff__DelegateSignature");

	APlayerPlane_OnBeginTakeoff__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.PlayerPlane.OnBeginLanding__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void APlayerPlane::OnBeginLanding__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.PlayerPlane.OnBeginLanding__DelegateSignature");

	APlayerPlane_OnBeginLanding__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.PlayerPlane.OnBeginCatapultTakeoff__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void APlayerPlane::OnBeginCatapultTakeoff__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.PlayerPlane.OnBeginCatapultTakeoff__DelegateSignature");

	APlayerPlane_OnBeginCatapultTakeoff__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.OnActivateMADComponent
// (Final, Native, Public)
// Parameters:
// class UActorComponent*         Component                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::OnActivateMADComponent(class UActorComponent* Component, bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.OnActivateMADComponent");

	APlayerPlane_OnActivateMADComponent_Params params;
	params.Component = Component;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.IsWeaponSystemDisabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsWeaponSystemDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsWeaponSystemDisabled");

	APlayerPlane_IsWeaponSystemDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsSpecialWeaponTGTP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsSpecialWeaponTGTP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsSpecialWeaponTGTP");

	APlayerPlane_IsSpecialWeaponTGTP_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsSpecialWeaponArmed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsSpecialWeaponArmed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsSpecialWeaponArmed");

	APlayerPlane_IsSpecialWeaponArmed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsPulseGunArmed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsPulseGunArmed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsPulseGunArmed");

	APlayerPlane_IsPulseGunArmed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsOverRestrictedAltitude
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsOverRestrictedAltitude()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsOverRestrictedAltitude");

	APlayerPlane_IsOverRestrictedAltitude_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsOnGround
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsOnGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsOnGround");

	APlayerPlane_IsOnGround_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsInTunnel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsInTunnel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsInTunnel");

	APlayerPlane_IsInTunnel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsInSpaceElevator
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsInSpaceElevator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsInSpaceElevator");

	APlayerPlane_IsInSpaceElevator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsInSearchLight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsInSearchLight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsInSearchLight");

	APlayerPlane_IsInSearchLight_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsInRadarArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsInRadarArea()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsInRadarArea");

	APlayerPlane_IsInRadarArea_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsInJammingArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsInJammingArea()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsInJammingArea");

	APlayerPlane_IsInJammingArea_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsInImpactArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsInImpactArea()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsInImpactArea");

	APlayerPlane_IsInImpactArea_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsInCloud
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsInCloud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsInCloud");

	APlayerPlane_IsInCloud_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsExpertControlType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsExpertControlType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsExpertControlType");

	APlayerPlane_IsExpertControlType_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.IsBeyondPulloutLine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::IsBeyondPulloutLine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.IsBeyondPulloutLine");

	APlayerPlane_IsBeyondPulloutLine_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.InitializeWeaponSystem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            WeaponSet                      (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::InitializeWeaponSystem(int WeaponSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.InitializeWeaponSystem");

	APlayerPlane_InitializeWeaponSystem_Params params;
	params.WeaponSet = WeaponSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.InitializeTargetLostJammer
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AAIGameObject*>   InJammerTargets                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          InMinLostTargetTime            (Parm, ZeroConstructor, IsPlainOldData)
// float                          InMaxLostTargetTime            (Parm, ZeroConstructor, IsPlainOldData)
// float                          InLostTargetWaveingTime        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::InitializeTargetLostJammer(TArray<class AAIGameObject*> InJammerTargets, float InMinLostTargetTime, float InMaxLostTargetTime, float InLostTargetWaveingTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.InitializeTargetLostJammer");

	APlayerPlane_InitializeTargetLostJammer_Params params;
	params.InJammerTargets = InJammerTargets;
	params.InMinLostTargetTime = InMinLostTargetTime;
	params.InMaxLostTargetTime = InMaxLostTargetTime;
	params.InLostTargetWaveingTime = InLostTargetWaveingTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.InitializeSeekerJammer
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AAIGameObject*>   InJammerTargets                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// float                          InSeekerJammerRangeInMeter     (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::InitializeSeekerJammer(TArray<class AAIGameObject*> InJammerTargets, float InSeekerJammerRangeInMeter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.InitializeSeekerJammer");

	APlayerPlane_InitializeSeekerJammer_Params params;
	params.InJammerTargets = InJammerTargets;
	params.InSeekerJammerRangeInMeter = InSeekerJammerRangeInMeter;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.HitTest
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::HitTest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.HitTest");

	APlayerPlane_HitTest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetSpaceElevatorHeightRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerPlane::GetSpaceElevatorHeightRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetSpaceElevatorHeightRatio");

	APlayerPlane_GetSpaceElevatorHeightRatio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetSelectedTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* APlayerPlane::GetSelectedTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetSelectedTarget");

	APlayerPlane_GetSelectedTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetNimbusHUDEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool APlayerPlane::GetNimbusHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetNimbusHUDEnabled");

	APlayerPlane_GetNimbusHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetNimbusHUD
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ANimbusHUD*              ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ANimbusHUD* APlayerPlane::GetNimbusHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetNimbusHUD");

	APlayerPlane_GetNimbusHUD_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetMaxSpeedKmph
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerPlane::GetMaxSpeedKmph()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetMaxSpeedKmph");

	APlayerPlane_GetMaxSpeedKmph_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetLockedOnTarget
// (Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* APlayerPlane::GetLockedOnTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetLockedOnTarget");

	APlayerPlane_GetLockedOnTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetFirstCameraLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector APlayerPlane::GetFirstCameraLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetFirstCameraLocation");

	APlayerPlane_GetFirstCameraLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetDirectionMove
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FVector APlayerPlane::GetDirectionMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetDirectionMove");

	APlayerPlane_GetDirectionMove_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetCockpitPartsAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FNimbusCockpitPartsAnim ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FNimbusCockpitPartsAnim APlayerPlane::GetCockpitPartsAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetCockpitPartsAnimation");

	APlayerPlane_GetCockpitPartsAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetBodyPartsAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FNimbusBodyPartsAnim    ReturnValue                    (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm)

struct FNimbusBodyPartsAnim APlayerPlane::GetBodyPartsAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetBodyPartsAnimation");

	APlayerPlane_GetBodyPartsAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.GetAllLockedOnTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AGameObject*>     ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AGameObject*> APlayerPlane::GetAllLockedOnTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.GetAllLockedOnTargets");

	APlayerPlane_GetAllLockedOnTargets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.FrameUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          DeltaSeconds                   (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::FrameUpdate(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.FrameUpdate");

	APlayerPlane_FrameUpdate_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.ForcedInvalidSeekers
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::ForcedInvalidSeekers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.ForcedInvalidSeekers");

	APlayerPlane_ForcedInvalidSeekers_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.EndTargetLostJammerCheck
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::EndTargetLostJammerCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.EndTargetLostJammerCheck");

	APlayerPlane_EndTargetLostJammerCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.EndSeekerJammerCheck
// (Final, Native, Public, BlueprintCallable)

void APlayerPlane::EndSeekerJammerCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.EndSeekerJammerCheck");

	APlayerPlane_EndSeekerJammerCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.EnableTakeoffInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInEnable                      (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::EnableTakeoffInput(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.EnableTakeoffInput");

	APlayerPlane_EnableTakeoffInput_Params params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.EnablePullupWarning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::EnablePullupWarning(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.EnablePullupWarning");

	APlayerPlane_EnablePullupWarning_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.EnablePlayerInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInEnable                      (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::EnablePlayerInput(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.EnablePlayerInput");

	APlayerPlane_EnablePlayerInput_Params params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.EnableAllExcludingCameraInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInEnable                      (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::EnableAllExcludingCameraInput(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.EnableAllExcludingCameraInput");

	APlayerPlane_EnableAllExcludingCameraInput_Params params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.DisableWeaponSystem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsDisabled                    (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::DisableWeaponSystem(bool bIsDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.DisableWeaponSystem");

	APlayerPlane_DisableWeaponSystem_Params params;
	params.bIsDisabled = bIsDisabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.CameraViewChangedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// ECameraType                    CameraViewType                 (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::CameraViewChangedEvent(ECameraType CameraViewType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.CameraViewChangedEvent");

	APlayerPlane_CameraViewChangedEvent_Params params;
	params.CameraViewType = CameraViewType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.BeginTakeoff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bCarrier                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          AutoTakeoffDelay               (Parm, ZeroConstructor, IsPlainOldData)
// float                          CatapultTakeoffEndTime         (Parm, ZeroConstructor, IsPlainOldData)
// float                          GearUpTakeoffEndTime           (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::BeginTakeoff(bool bCarrier, float AutoTakeoffDelay, float CatapultTakeoffEndTime, float GearUpTakeoffEndTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.BeginTakeoff");

	APlayerPlane_BeginTakeoff_Params params;
	params.bCarrier = bCarrier;
	params.AutoTakeoffDelay = AutoTakeoffDelay;
	params.CatapultTakeoffEndTime = CatapultTakeoffEndTime;
	params.GearUpTakeoffEndTime = GearUpTakeoffEndTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.BeginLanding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bCarrier                       (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::BeginLanding(bool bCarrier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.BeginLanding");

	APlayerPlane_BeginLanding_Params params;
	params.bCarrier = bCarrier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.ApplySystemDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPlayerSystemDamageType        SystemDamageType               (Parm, ZeroConstructor, IsPlainOldData)
// float                          Amount                         (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float APlayerPlane::ApplySystemDamage(EPlayerSystemDamageType SystemDamageType, float Amount, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.ApplySystemDamage");

	APlayerPlane_ApplySystemDamage_Params params;
	params.SystemDamageType = SystemDamageType;
	params.Amount = Amount;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerPlane.AddSeaSprayTrigger
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 HitLocation                    (Parm, IsPlainOldData)
// struct FSeaExplosionInfo       SeaExplosionInfo               (Parm)

void APlayerPlane::AddSeaSprayTrigger(const struct FVector& HitLocation, const struct FSeaExplosionInfo& SeaExplosionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.AddSeaSprayTrigger");

	APlayerPlane_AddSeaSprayTrigger_Params params;
	params.HitLocation = HitLocation;
	params.SeaExplosionInfo = SeaExplosionInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlane.AddKillBountyScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             Target                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bDisplayHUDMessage             (Parm, ZeroConstructor, IsPlainOldData)

void APlayerPlane::AddKillBountyScore(class AGameObject* Target, bool bDisplayHUDMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlane.AddKillBountyScore");

	APlayerPlane_AddKillBountyScore_Params params;
	params.Target = Target;
	params.bDisplayHUDMessage = bDisplayHUDMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.SetPlayerSpeedKmph
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          SpeedKmph                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerPlaneSoundComponent::SetPlayerSpeedKmph(float SpeedKmph)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.SetPlayerSpeedKmph");

	UPlayerPlaneSoundComponent_SetPlayerSpeedKmph_Params params;
	params.SpeedKmph = SpeedKmph;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.SetPlayerObstacleDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerPlaneSoundComponent::SetPlayerObstacleDistance(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.SetPlayerObstacleDistance");

	UPlayerPlaneSoundComponent_SetPlayerObstacleDistance_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.SetPlayerManeuver
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerPlaneSoundComponent::SetPlayerManeuver(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.SetPlayerManeuver");

	UPlayerPlaneSoundComponent_SetPlayerManeuver_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.SetHighGTurn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerPlaneSoundComponent::SetHighGTurn(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.SetHighGTurn");

	UPlayerPlaneSoundComponent_SetHighGTurn_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.SetEnginePower
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          EnginePower                    (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerPlaneSoundComponent::SetEnginePower(float EnginePower)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.SetEnginePower");

	UPlayerPlaneSoundComponent_SetEnginePower_Params params;
	params.EnginePower = EnginePower;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.SetCloudDensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          CloudDensity                   (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerPlaneSoundComponent::SetCloudDensity(float CloudDensity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.SetCloudDensity");

	UPlayerPlaneSoundComponent_SetCloudDensity_Params params;
	params.CloudDensity = CloudDensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.SetAltitudeMeters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          AltitudeMeters                 (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerPlaneSoundComponent::SetAltitudeMeters(float AltitudeMeters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.SetAltitudeMeters");

	UPlayerPlaneSoundComponent_SetAltitudeMeters_Params params;
	params.AltitudeMeters = AltitudeMeters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.SetAirCurrentDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Direction                      (Parm, ZeroConstructor, IsPlainOldData)

void UPlayerPlaneSoundComponent::SetAirCurrentDirection(float Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.SetAirCurrentDirection");

	UPlayerPlaneSoundComponent_SetAirCurrentDirection_Params params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerPlaneSoundComponent.OnRestored
// (Final, Native, Public)

void UPlayerPlaneSoundComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerPlaneSoundComponent.OnRestored");

	UPlayerPlaneSoundComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlaneRadioStateComponent.Restore
// (Final, Native, Public)

void UPlaneRadioStateComponent::Restore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlaneRadioStateComponent.Restore");

	UPlaneRadioStateComponent_Restore_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlaneRadioStateComponent.HandlerObjectFireWeapon
// (Final, Native, Private)
// Parameters:
// class AGameObject*             Causer                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             WeaponTarget                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// int                            WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)

void UPlaneRadioStateComponent::HandlerObjectFireWeapon(class AGameObject* Causer, class AGameObject* WeaponTarget, class AWeaponBase* Weapon, int WeaponNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlaneRadioStateComponent.HandlerObjectFireWeapon");

	UPlaneRadioStateComponent_HandlerObjectFireWeapon_Params params;
	params.Causer = Causer;
	params.WeaponTarget = WeaponTarget;
	params.Weapon = Weapon;
	params.WeaponNumber = WeaponNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerWeaponActivator.ToggleSpecial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UPlayerWeaponActivator::ToggleSpecial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.ToggleSpecial");

	UPlayerWeaponActivator_ToggleSpecial_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.ReleaseWeaponInput
// (Final, Native, Public, BlueprintCallable)

void UPlayerWeaponActivator::ReleaseWeaponInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.ReleaseWeaponInput");

	UPlayerWeaponActivator_ReleaseWeaponInput_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerWeaponActivator.MainWeaponReleased
// (Final, Native, Public, BlueprintCallable)

void UPlayerWeaponActivator::MainWeaponReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.MainWeaponReleased");

	UPlayerWeaponActivator_MainWeaponReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerWeaponActivator.MainWeaponPressed
// (Final, Native, Public, BlueprintCallable)

void UPlayerWeaponActivator::MainWeaponPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.MainWeaponPressed");

	UPlayerWeaponActivator_MainWeaponPressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerWeaponActivator.MachineGunReleased
// (Final, Native, Public, BlueprintCallable)

void UPlayerWeaponActivator::MachineGunReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.MachineGunReleased");

	UPlayerWeaponActivator_MachineGunReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerWeaponActivator.MachineGunPressed
// (Final, Native, Public, BlueprintCallable)

void UPlayerWeaponActivator::MachineGunPressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.MachineGunPressed");

	UPlayerWeaponActivator_MachineGunPressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerWeaponActivator.GetWeaponNameString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EWeaponNumber                  WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UPlayerWeaponActivator::GetWeaponNameString(EWeaponNumber WeaponNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetWeaponNameString");

	UPlayerWeaponActivator_GetWeaponNameString_Params params;
	params.WeaponNumber = WeaponNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetSpecialWeaponNameString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UPlayerWeaponActivator::GetSpecialWeaponNameString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetSpecialWeaponNameString");

	UPlayerWeaponActivator_GetSpecialWeaponNameString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetSpecialWeaponCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlayerWeaponActivator::GetSpecialWeaponCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetSpecialWeaponCount");

	UPlayerWeaponActivator_GetSpecialWeaponCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetMainWeaponNameString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UPlayerWeaponActivator::GetMainWeaponNameString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetMainWeaponNameString");

	UPlayerWeaponActivator_GetMainWeaponNameString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetMainWeaponCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlayerWeaponActivator::GetMainWeaponCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetMainWeaponCount");

	UPlayerWeaponActivator_GetMainWeaponCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetGunWeaponNameString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString UPlayerWeaponActivator::GetGunWeaponNameString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetGunWeaponNameString");

	UPlayerWeaponActivator_GetGunWeaponNameString_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetGunCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlayerWeaponActivator::GetGunCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetGunCount");

	UPlayerWeaponActivator_GetGunCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetFlareCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UPlayerWeaponActivator::GetFlareCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetFlareCount");

	UPlayerWeaponActivator_GetFlareCount_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetArmedWeaponParameters
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWeaponParameters*       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class UWeaponParameters* UPlayerWeaponActivator::GetArmedWeaponParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetArmedWeaponParameters");

	UPlayerWeaponActivator_GetArmedWeaponParameters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.GetArmedWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AWeaponBase*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AWeaponBase* UPlayerWeaponActivator::GetArmedWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.GetArmedWeapon");

	UPlayerWeaponActivator_GetArmedWeapon_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.PlayerWeaponActivator.FlareReleased
// (Final, Native, Public, BlueprintCallable)

void UPlayerWeaponActivator::FlareReleased()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.FlareReleased");

	UPlayerWeaponActivator_FlareReleased_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.PlayerWeaponActivator.FlarePressed
// (Final, Native, Public, BlueprintCallable)

void UPlayerWeaponActivator::FlarePressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.PlayerWeaponActivator.FlarePressed");

	UPlayerWeaponActivator_FlarePressed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Radio.PlayMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 MessageID                      (Parm, ZeroConstructor)

void ARadio::PlayMessage(const struct FString& MessageID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Radio.PlayMessage");

	ARadio_PlayMessage_Params params;
	params.MessageID = MessageID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Radio.OnMessageShow__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FString                 MessageID                      (Parm, ZeroConstructor)

void ARadio::OnMessageShow__DelegateSignature(const struct FString& MessageID)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Radio.OnMessageShow__DelegateSignature");

	ARadio_OnMessageShow__DelegateSignature_Params params;
	params.MessageID = MessageID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Radio.OnMessageHide__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FString                 MessageID                      (Parm, ZeroConstructor)

void ARadio::OnMessageHide__DelegateSignature(const struct FString& MessageID)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Radio.OnMessageHide__DelegateSignature");

	ARadio_OnMessageHide__DelegateSignature_Params params;
	params.MessageID = MessageID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Radio.OnMessageEnd__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FString                 MessageID                      (Parm, ZeroConstructor)

void ARadio::OnMessageEnd__DelegateSignature(const struct FString& MessageID)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Radio.OnMessageEnd__DelegateSignature");

	ARadio_OnMessageEnd__DelegateSignature_Params params;
	params.MessageID = MessageID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Radio.OnMessageBegin__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FString                 MessageID                      (Parm, ZeroConstructor)

void ARadio::OnMessageBegin__DelegateSignature(const struct FString& MessageID)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Radio.OnMessageBegin__DelegateSignature");

	ARadio_OnMessageBegin__DelegateSignature_Params params;
	params.MessageID = MessageID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Radio.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadio::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Radio.IsPlaying");

	ARadio_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Radio.GetCurrentSpeaker
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString ARadio::GetCurrentSpeaker()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Radio.GetCurrentSpeaker");

	ARadio_GetCurrentSpeaker_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Radio.GetCurrentMessageID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString ARadio::GetCurrentMessageID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Radio.GetCurrentMessageID");

	ARadio_GetCurrentMessageID_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Radio.GetCurrentMessage
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FString                 ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm)

struct FString ARadio::GetCurrentMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Radio.GetCurrentMessage");

	ARadio_GetCurrentMessage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Radio.ClearAllMessages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bFireCurrentMessageEndEvent    (Parm, ZeroConstructor, IsPlainOldData)

void ARadio::ClearAllMessages(bool bFireCurrentMessageEndEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Radio.ClearAllMessages");

	ARadio_ClearAllMessages_Params params;
	params.bFireCurrentMessageEndEvent = bFireCurrentMessageEndEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.RadioManager.UpdateSubtitleEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// struct FRadioText              Subtitle                       (ConstParm, Parm, OutParm, ReferenceParm)

void ARadioManager::UpdateSubtitleEventDelegate__DelegateSignature(const struct FRadioText& Subtitle)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.RadioManager.UpdateSubtitleEventDelegate__DelegateSignature");

	ARadioManager_UpdateSubtitleEventDelegate__DelegateSignature_Params params;
	params.Subtitle = Subtitle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetSilentGroupEnabled_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            SilentGroupIndex               (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEnabled                     (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_SetSilentGroupEnabled_S(int SilentGroupIndex, bool bIsEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetSilentGroupEnabled_S");

	ARadioManager_SetSilentGroupEnabled_S_Params params;
	params.SilentGroupIndex = SilentGroupIndex;
	params.bIsEnabled = bIsEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetRadioTypeEnabled_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERadioType                     RadioType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_SetRadioTypeEnabled_S(ERadioType RadioType, bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetRadioTypeEnabled_S");

	ARadioManager_SetRadioTypeEnabled_S_Params params;
	params.RadioType = RadioType;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetRadioTypeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERadioType                     RadioType                      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::SetRadioTypeEnabled(ERadioType RadioType, bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetRadioTypeEnabled");

	ARadioManager_SetRadioTypeEnabled_Params params;
	params.RadioType = RadioType;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetRadioSkipEnabled_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_SetRadioSkipEnabled_S(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetRadioSkipEnabled_S");

	ARadioManager_SetRadioSkipEnabled_S_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetPlayByPlayRadioGroupIDPostfixes_S
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FRadioGroupIDPostfix> InRadioGroupIDPostfixes        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void ARadioManager::STATIC_SetPlayByPlayRadioGroupIDPostfixes_S(TArray<struct FRadioGroupIDPostfix> InRadioGroupIDPostfixes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetPlayByPlayRadioGroupIDPostfixes_S");

	ARadioManager_SetPlayByPlayRadioGroupIDPostfixes_S_Params params;
	params.InRadioGroupIDPostfixes = InRadioGroupIDPostfixes;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetPlayByPlayAllowRadius_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          RadiusInMeters                 (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_SetPlayByPlayAllowRadius_S(float RadiusInMeters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetPlayByPlayAllowRadius_S");

	ARadioManager_SetPlayByPlayAllowRadius_S_Params params;
	params.RadiusInMeters = RadiusInMeters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetForceOfflineEnabled_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_SetForceOfflineEnabled_S(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetForceOfflineEnabled_S");

	ARadioManager_SetForceOfflineEnabled_S_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetEnemyTensionEnabled_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERadioTension                  Tension                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEnabled                     (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_SetEnemyTensionEnabled_S(ERadioTension Tension, bool bIsEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetEnemyTensionEnabled_S");

	ARadioManager_SetEnemyTensionEnabled_S_Params params;
	params.Tension = Tension;
	params.bIsEnabled = bIsEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.SetAllyTensionEnabled_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ERadioTension                  Tension                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsEnabled                     (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_SetAllyTensionEnabled_S(ERadioTension Tension, bool bIsEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.SetAllyTensionEnabled_S");

	ARadioManager_SetAllyTensionEnabled_S_Params params;
	params.Tension = Tension;
	params.bIsEnabled = bIsEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.ResetPlayCount_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)

void ARadioManager::STATIC_ResetPlayCount_S(const struct FString& RadioGroupID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.ResetPlayCount_S");

	ARadioManager_ResetPlayCount_S_Params params;
	params.RadioGroupID = RadioGroupID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.ResetPlayByPlayRadioGroupIDPostfixes_S
// (Final, Native, Static, Public, BlueprintCallable)

void ARadioManager::STATIC_ResetPlayByPlayRadioGroupIDPostfixes_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.ResetPlayByPlayRadioGroupIDPostfixes_S");

	ARadioManager_ResetPlayByPlayRadioGroupIDPostfixes_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.RadioManager.RequeueingWaitTimeQueueUpdateEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// ERadioManagerChannel           Channel                        (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::RequeueingWaitTimeQueueUpdateEventDelegate__DelegateSignature(ERadioManagerChannel Channel)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.RadioManager.RequeueingWaitTimeQueueUpdateEventDelegate__DelegateSignature");

	ARadioManager_RequeueingWaitTimeQueueUpdateEventDelegate__DelegateSignature_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.RequestPlayRadioWithKeySpeaker_S
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)
// int                            RequestID                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           Condition                      (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             KeySpeaker                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::STATIC_RequestPlayRadioWithKeySpeaker_S(const struct FString& RadioGroupID, bool Condition, class AGameObject* KeySpeaker, int* RequestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RequestPlayRadioWithKeySpeaker_S");

	ARadioManager_RequestPlayRadioWithKeySpeaker_S_Params params;
	params.RadioGroupID = RadioGroupID;
	params.Condition = Condition;
	params.KeySpeaker = KeySpeaker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RequestID != nullptr)
		*RequestID = params.RequestID;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.RequestPlayRadioWithKeySpeaker
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)
// int                            RequestID                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           Condition                      (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             KeySpeaker                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::RequestPlayRadioWithKeySpeaker(const struct FString& RadioGroupID, bool Condition, class AGameObject* KeySpeaker, int* RequestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RequestPlayRadioWithKeySpeaker");

	ARadioManager_RequestPlayRadioWithKeySpeaker_Params params;
	params.RadioGroupID = RadioGroupID;
	params.Condition = Condition;
	params.KeySpeaker = KeySpeaker;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RequestID != nullptr)
		*RequestID = params.RequestID;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.RequestPlayRadio_S
// (Final, Native, Static, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)
// int                            RequestID                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           Condition                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 KeySpeakerID                   (ConstParm, Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::STATIC_RequestPlayRadio_S(const struct FString& RadioGroupID, bool Condition, const struct FString& KeySpeakerID, int* RequestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RequestPlayRadio_S");

	ARadioManager_RequestPlayRadio_S_Params params;
	params.RadioGroupID = RadioGroupID;
	params.Condition = Condition;
	params.KeySpeakerID = KeySpeakerID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RequestID != nullptr)
		*RequestID = params.RequestID;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.RequestPlayRadio
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)
// int                            RequestID                      (Parm, OutParm, ZeroConstructor, IsPlainOldData)
// bool                           Condition                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 KeySpeakerID                   (ConstParm, Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::RequestPlayRadio(const struct FString& RadioGroupID, bool Condition, const struct FString& KeySpeakerID, int* RequestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RequestPlayRadio");

	ARadioManager_RequestPlayRadio_Params params;
	params.RadioGroupID = RadioGroupID;
	params.Condition = Condition;
	params.KeySpeakerID = KeySpeakerID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RequestID != nullptr)
		*RequestID = params.RequestID;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.ReplaceRadioSpeakerName_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 SpeakerID                      (Parm, ZeroConstructor)
// struct FString                 ReplaceSpeakerID               (Parm, ZeroConstructor)

void ARadioManager::STATIC_ReplaceRadioSpeakerName_S(const struct FString& SpeakerID, const struct FString& ReplaceSpeakerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.ReplaceRadioSpeakerName_S");

	ARadioManager_ReplaceRadioSpeakerName_S_Params params;
	params.SpeakerID = SpeakerID;
	params.ReplaceSpeakerID = ReplaceSpeakerID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.ReplaceEnvseID_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 EnvseID                        (Parm, ZeroConstructor)
// struct FString                 ReplaceEnvseID                 (Parm, ZeroConstructor)

void ARadioManager::STATIC_ReplaceEnvseID_S(const struct FString& EnvseID, const struct FString& ReplaceEnvseID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.ReplaceEnvseID_S");

	ARadioManager_ReplaceEnvseID_S_Params params;
	params.EnvseID = EnvseID;
	params.ReplaceEnvseID = ReplaceEnvseID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.RemoveRadioRequest_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)

void ARadioManager::STATIC_RemoveRadioRequest_S(const struct FString& RadioGroupID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RemoveRadioRequest_S");

	ARadioManager_RemoveRadioRequest_S_Params params;
	params.RadioGroupID = RadioGroupID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.RemoveRadioRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)

void ARadioManager::RemoveRadioRequest(const struct FString& RadioGroupID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RemoveRadioRequest");

	ARadioManager_RemoveRadioRequest_Params params;
	params.RadioGroupID = RadioGroupID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.RemoveAllRadioRequestAndRemainingRadio_S
// (Final, Native, Static, Public, BlueprintCallable)

void ARadioManager::STATIC_RemoveAllRadioRequestAndRemainingRadio_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RemoveAllRadioRequestAndRemainingRadio_S");

	ARadioManager_RemoveAllRadioRequestAndRemainingRadio_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.RemoveAllRadioRequest_S
// (Final, Native, Static, Public, BlueprintCallable)

void ARadioManager::STATIC_RemoveAllRadioRequest_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RemoveAllRadioRequest_S");

	ARadioManager_RemoveAllRadioRequest_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.RemoveAllRadioRequest
// (Final, Native, Public, BlueprintCallable)

void ARadioManager::RemoveAllRadioRequest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.RemoveAllRadioRequest");

	ARadioManager_RemoveAllRadioRequest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.RadioManager.RadioQueueUpdateEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// ERadioManagerChannel           Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::RadioQueueUpdateEventDelegate__DelegateSignature(ERadioManagerChannel Channel, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.RadioManager.RadioQueueUpdateEventDelegate__DelegateSignature");

	ARadioManager_RadioQueueUpdateEventDelegate__DelegateSignature_Params params;
	params.Channel = Channel;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.PushRequeueingWait_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 RadioGroupID                   (Parm, ZeroConstructor)
// float                          Time                           (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bShrink                        (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_PushRequeueingWait_S(const struct FString& RadioGroupID, float Time, bool bShrink)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.PushRequeueingWait_S");

	ARadioManager_PushRequeueingWait_S_Params params;
	params.RadioGroupID = RadioGroupID;
	params.Time = Time;
	params.bShrink = bShrink;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.OnPreStopBusEvent
// (Final, Native, Private)
// Parameters:
// ENimbusSoundType               BusType                        (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::OnPreStopBusEvent(ENimbusSoundType BusType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.OnPreStopBusEvent");

	ARadioManager_OnPreStopBusEvent_Params params;
	params.BusType = BusType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.OnPreStartMiniGamePhaseEvent
// (Final, Native, Private)
// Parameters:
// bool                           bIsRetry                       (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::OnPreStartMiniGamePhaseEvent(bool bIsRetry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.OnPreStartMiniGamePhaseEvent");

	ARadioManager_OnPreStartMiniGamePhaseEvent_Params params;
	params.bIsRetry = bIsRetry;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.OnPreRestartPhaseEvent
// (Final, Native, Private)

void ARadioManager::OnPreRestartPhaseEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.OnPreRestartPhaseEvent");

	ARadioManager_OnPreRestartPhaseEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.OnPhaseEndEvent
// (Final, Native, Private)

void ARadioManager::OnPhaseEndEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.OnPhaseEndEvent");

	ARadioManager_OnPhaseEndEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.RadioManager.OnMessageEnd__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FString                 GroupID                        (Parm, ZeroConstructor)
// struct FString                 VoiceID                        (Parm, ZeroConstructor)
// bool                           bGroupEnd                      (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::OnMessageEnd__DelegateSignature(const struct FString& GroupID, const struct FString& VoiceID, bool bGroupEnd)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.RadioManager.OnMessageEnd__DelegateSignature");

	ARadioManager_OnMessageEnd__DelegateSignature_Params params;
	params.GroupID = GroupID;
	params.VoiceID = VoiceID;
	params.bGroupEnd = bGroupEnd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.RadioManager.OnMessageBegin__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FString                 GroupID                        (Parm, ZeroConstructor)
// struct FString                 VoiceID                        (Parm, ZeroConstructor)

void ARadioManager::OnMessageBegin__DelegateSignature(const struct FString& GroupID, const struct FString& VoiceID)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.RadioManager.OnMessageBegin__DelegateSignature");

	ARadioManager_OnMessageBegin__DelegateSignature_Params params;
	params.GroupID = GroupID;
	params.VoiceID = VoiceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.OnIGCEnableEvent
// (Final, Native, Private)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::OnIGCEnableEvent(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.OnIGCEnableEvent");

	ARadioManager_OnIGCEnableEvent_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.IsRadioSkipEnabled_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::STATIC_IsRadioSkipEnabled_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.IsRadioSkipEnabled_S");

	ARadioManager_IsRadioSkipEnabled_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.IsChannelPlaying_S
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ERadioManagerChannel           Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::STATIC_IsChannelPlaying_S(ERadioManagerChannel Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.IsChannelPlaying_S");

	ARadioManager_IsChannelPlaying_S_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.IsChannelPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERadioManagerChannel           Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::IsChannelPlaying(ERadioManagerChannel Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.IsChannelPlaying");

	ARadioManager_IsChannelPlaying_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.IsChannelEnabled_S
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ERadioManagerChannel           Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::STATIC_IsChannelEnabled_S(ERadioManagerChannel Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.IsChannelEnabled_S");

	ARadioManager_IsChannelEnabled_S_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.IsChannelEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERadioManagerChannel           Channel                        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARadioManager::IsChannelEnabled(ERadioManagerChannel Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.IsChannelEnabled");

	ARadioManager_IsChannelEnabled_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.GetRadioGroupIDs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<struct FString> ARadioManager::GetRadioGroupIDs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.GetRadioGroupIDs");

	ARadioManager_GetRadioGroupIDs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RadioManager.EnableAllRadio_S
// (Final, Native, Static, Public, BlueprintCallable)

void ARadioManager::STATIC_EnableAllRadio_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.EnableAllRadio_S");

	ARadioManager_EnableAllRadio_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.EnableAllRadio
// (Final, Native, Public, BlueprintCallable)

void ARadioManager::EnableAllRadio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.EnableAllRadio");

	ARadioManager_EnableAllRadio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.RadioManager.EditorVolumeChangeEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ARadioManager::EditorVolumeChangeEventDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.RadioManager.EditorVolumeChangeEventDelegate__DelegateSignature");

	ARadioManager_EditorVolumeChangeEventDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.RadioManager.EditorRadioDataTableUpdateEventDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ARadioManager::EditorRadioDataTableUpdateEventDelegate__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.RadioManager.EditorRadioDataTableUpdateEventDelegate__DelegateSignature");

	ARadioManager_EditorRadioDataTableUpdateEventDelegate__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.DisableRadioAfterRequest_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int                            RequestID                      (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::STATIC_DisableRadioAfterRequest_S(int RequestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.DisableRadioAfterRequest_S");

	ARadioManager_DisableRadioAfterRequest_S_Params params;
	params.RequestID = RequestID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.DisableRadioAfterRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int                            RequestID                      (Parm, ZeroConstructor, IsPlainOldData)

void ARadioManager::DisableRadioAfterRequest(int RequestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.DisableRadioAfterRequest");

	ARadioManager_DisableRadioAfterRequest_Params params;
	params.RequestID = RequestID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.ClearReplacedRadioSpeakerNames_S
// (Final, Native, Static, Public, BlueprintCallable)

void ARadioManager::STATIC_ClearReplacedRadioSpeakerNames_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.ClearReplacedRadioSpeakerNames_S");

	ARadioManager_ClearReplacedRadioSpeakerNames_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.ClearReplacedRadioSpeakerName_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 SpeakerID                      (Parm, ZeroConstructor)

void ARadioManager::STATIC_ClearReplacedRadioSpeakerName_S(const struct FString& SpeakerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.ClearReplacedRadioSpeakerName_S");

	ARadioManager_ClearReplacedRadioSpeakerName_S_Params params;
	params.SpeakerID = SpeakerID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.ClearAllReplacedEnvseID_S
// (Final, Native, Static, Public, BlueprintCallable)

void ARadioManager::STATIC_ClearAllReplacedEnvseID_S()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.ClearAllReplacedEnvseID_S");

	ARadioManager_ClearAllReplacedEnvseID_S_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RadioManager.AddPlayByPlayRadioGroupIDPostfix_S
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FString                 KeySpeakerID                   (Parm, ZeroConstructor)
// struct FString                 RadioGroupIDPostfix            (Parm, ZeroConstructor)

void ARadioManager::STATIC_AddPlayByPlayRadioGroupIDPostfix_S(const struct FString& KeySpeakerID, const struct FString& RadioGroupIDPostfix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RadioManager.AddPlayByPlayRadioGroupIDPostfix_S");

	ARadioManager_AddPlayByPlayRadioGroupIDPostfix_S_Params params;
	params.KeySpeakerID = KeySpeakerID;
	params.RadioGroupIDPostfix = RadioGroupIDPostfix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RailgunControliComponent.PlayChargeSound
// (Final, Native, Public, BlueprintCallable)

void URailgunControliComponent::PlayChargeSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RailgunControliComponent.PlayChargeSound");

	URailgunControliComponent_PlayChargeSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RailgunControliComponent.GetHitResult_AndReset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ERailgunControliResult         ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ERailgunControliResult URailgunControliComponent::GetHitResult_AndReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RailgunControliComponent.GetHitResult_AndReset");

	URailgunControliComponent_GetHitResult_AndReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RailgunControliComponent.EndChargeSound
// (Final, Native, Public, BlueprintCallable)

void URailgunControliComponent::EndChargeSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RailgunControliComponent.EndChargeSound");

	URailgunControliComponent_EndChargeSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RectennaBarrierEffect.OnRingMove
// (Event, Public, BlueprintEvent)

void ARectennaBarrierEffect::OnRingMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrierEffect.OnRingMove");

	ARectennaBarrierEffect_OnRingMove_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RectennaBarrierEffect.OnBarrierIn
// (Event, Public, BlueprintEvent)

void ARectennaBarrierEffect::OnBarrierIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrierEffect.OnBarrierIn");

	ARectennaBarrierEffect_OnBarrierIn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RectennaBarrierEffect.OnBarrierFade
// (Event, Public, BlueprintEvent)

void ARectennaBarrierEffect::OnBarrierFade()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrierEffect.OnBarrierFade");

	ARectennaBarrierEffect_OnBarrierFade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RectennaBarrierEffect.OnBarrierActive
// (Event, Public, BlueprintEvent)

void ARectennaBarrierEffect::OnBarrierActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrierEffect.OnBarrierActive");

	ARectennaBarrierEffect_OnBarrierActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.RectennaBarrier.OnReleaseBarrierWeapon__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ARectennaBarrier::OnReleaseBarrierWeapon__DelegateSignature()
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.RectennaBarrier.OnReleaseBarrierWeapon__DelegateSignature");

	ARectennaBarrier_OnReleaseBarrierWeapon__DelegateSignature_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.RectennaBarrier.IsActiveBarrier
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ARectennaBarrier::IsActiveBarrier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrier.IsActiveBarrier");

	ARectennaBarrier_IsActiveBarrier_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RectennaBarrier.GetBarrierRippleSurfaceRadiusMeters
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARectennaBarrier::GetBarrierRippleSurfaceRadiusMeters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrier.GetBarrierRippleSurfaceRadiusMeters");

	ARectennaBarrier_GetBarrierRippleSurfaceRadiusMeters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RectennaBarrier.GetBarrierDamageRadiusMeters
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARectennaBarrier::GetBarrierDamageRadiusMeters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrier.GetBarrierDamageRadiusMeters");

	ARectennaBarrier_GetBarrierDamageRadiusMeters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RectennaBarrier.GetBarrierChargeDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARectennaBarrier::GetBarrierChargeDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrier.GetBarrierChargeDuration");

	ARectennaBarrier_GetBarrierChargeDuration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RectennaBarrier.GetBarrierActiveDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARectennaBarrier::GetBarrierActiveDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrier.GetBarrierActiveDuration");

	ARectennaBarrier_GetBarrierActiveDuration_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.RectennaBarrier.BarrierEndOpacity
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float ARectennaBarrier::BarrierEndOpacity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.RectennaBarrier.BarrierEndOpacity");

	ARectennaBarrier_BarrierEndOpacity_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.ReplayCameraInfoWidget.OnCameraSettingsUpdate
// (Event, Public, HasOutParms, BlueprintEvent)
// Parameters:
// unsigned char                  CameraId                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FCameraSettings         CameraSettings                 (ConstParm, Parm, OutParm, ReferenceParm)

void UReplayCameraInfoWidget::OnCameraSettingsUpdate(unsigned char CameraId, const struct FCameraSettings& CameraSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ReplayCameraInfoWidget.OnCameraSettingsUpdate");

	UReplayCameraInfoWidget_OnCameraSettingsUpdate_Params params;
	params.CameraId = CameraId;
	params.CameraSettings = CameraSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.ReplayManager.IsIGCPlaybackAllowed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                  World                          (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UReplayManager::STATIC_IsIGCPlaybackAllowed(class UWorld* World)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ReplayManager.IsIGCPlaybackAllowed");

	UReplayManager_IsIGCPlaybackAllowed_Params params;
	params.World = World;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.ReplayPassCameraComponent.GetCameraView
// (Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// float                          DeltaTime                      (Parm, ZeroConstructor, IsPlainOldData)
// struct FMinimalViewInfo        DesiredView                    (Parm, OutParm)

void UReplayPassCameraComponent::GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ReplayPassCameraComponent.GetCameraView");

	UReplayPassCameraComponent_GetCameraView_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredView != nullptr)
		*DesiredView = params.DesiredView;
}


// Function Nimbus.ReplayPassCameraComponent.Deactivate
// (Native, Public, BlueprintCallable)

void UReplayPassCameraComponent::Deactivate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ReplayPassCameraComponent.Deactivate");

	UReplayPassCameraComponent_Deactivate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.ReplayPassCameraComponent.Activate
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                           bReset                         (Parm, ZeroConstructor, IsPlainOldData)

void UReplayPassCameraComponent::Activate(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.ReplayPassCameraComponent.Activate");

	UReplayPassCameraComponent_Activate_Params params;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.NimbusReplayPawn.OnPlayerReposition
// (Final, Native, Public)

void ANimbusReplayPawn::OnPlayerReposition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.NimbusReplayPawn.OnPlayerReposition");

	ANimbusReplayPawn_OnPlayerReposition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusReplayPawn.OnCameraSettingsUpdated__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasOutParms)
// Parameters:
// unsigned char                  CameraId                       (Parm, ZeroConstructor, IsPlainOldData)
// struct FCameraSettings         CameraSettings                 (ConstParm, Parm, OutParm, ReferenceParm)

void ANimbusReplayPawn::OnCameraSettingsUpdated__DelegateSignature(unsigned char CameraId, const struct FCameraSettings& CameraSettings)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusReplayPawn.OnCameraSettingsUpdated__DelegateSignature");

	ANimbusReplayPawn_OnCameraSettingsUpdated__DelegateSignature_Params params;
	params.CameraId = CameraId;
	params.CameraSettings = CameraSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.NimbusReplayPawn.OnCameraChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// unsigned char                  CameraId                       (Parm, ZeroConstructor, IsPlainOldData)

void ANimbusReplayPawn::OnCameraChanged__DelegateSignature(unsigned char CameraId)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.NimbusReplayPawn.OnCameraChanged__DelegateSignature");

	ANimbusReplayPawn_OnCameraChanged__DelegateSignature_Params params;
	params.CameraId = CameraId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SoundChannelActor.MakeAdditionalSoundParams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          InCloudDensity                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FAdditionalSoundChannelParams ReturnValue                    (Parm, OutParm, ReturnParm)

struct FAdditionalSoundChannelParams ASoundChannelActor::STATIC_MakeAdditionalSoundParams(float InCloudDensity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SoundChannelActor.MakeAdditionalSoundParams");

	ASoundChannelActor_MakeAdditionalSoundParams_Params params;
	params.InCloudDensity = InCloudDensity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.SoundChannelActor.GetIsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASoundChannelActor::GetIsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SoundChannelActor.GetIsPlaying");

	ASoundChannelActor_GetIsPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.SoundChannelManager.PlaySoundAttached
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// ESoundChannelType              Type                           (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  AttachActor                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 RelativeLocation               (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FAdditionalSoundChannelParams Params                         (Parm)

void ASoundChannelManager::PlaySoundAttached(ESoundChannelType Type, class AActor* AttachActor, const struct FVector& RelativeLocation, const struct FAdditionalSoundChannelParams& Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SoundChannelManager.PlaySoundAttached");

	ASoundChannelManager_PlaySoundAttached_Params params;
	params.Type = Type;
	params.AttachActor = AttachActor;
	params.RelativeLocation = RelativeLocation;
	params.Params = Params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SoundChannelManager.PlaySoundAtLocationWithSwitch
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// ESoundChannelType              Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FAdditionalSoundChannelParams Params                         (Parm)
// struct FName                   SwitchGroup                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FName                   SwitchState                    (Parm, ZeroConstructor, IsPlainOldData)

void ASoundChannelManager::PlaySoundAtLocationWithSwitch(ESoundChannelType Type, const struct FVector& Location, const struct FAdditionalSoundChannelParams& Params, const struct FName& SwitchGroup, const struct FName& SwitchState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SoundChannelManager.PlaySoundAtLocationWithSwitch");

	ASoundChannelManager_PlaySoundAtLocationWithSwitch_Params params;
	params.Type = Type;
	params.Location = Location;
	params.Params = Params;
	params.SwitchGroup = SwitchGroup;
	params.SwitchState = SwitchState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SoundChannelManager.PlaySoundAtLocation
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable)
// Parameters:
// ESoundChannelType              Type                           (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Location                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// struct FAdditionalSoundChannelParams Params                         (Parm)

void ASoundChannelManager::PlaySoundAtLocation(ESoundChannelType Type, const struct FVector& Location, const struct FAdditionalSoundChannelParams& Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SoundChannelManager.PlaySoundAtLocation");

	ASoundChannelManager_PlaySoundAtLocation_Params params;
	params.Type = Type;
	params.Location = Location;
	params.Params = Params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SoundChannelManager.OnPreRestartPhaseEvent
// (Final, Native, Public)

void ASoundChannelManager::OnPreRestartPhaseEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SoundChannelManager.OnPreRestartPhaseEvent");

	ASoundChannelManager_OnPreRestartPhaseEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SoundChannelManager.GetSoundChannelManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASoundChannelManager*    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class ASoundChannelManager* ASoundChannelManager::STATIC_GetSoundChannelManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SoundChannelManager.GetSoundChannelManager");

	ASoundChannelManager_GetSoundChannelManager_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.StandaloneTextStatWidget.OnWeaponActivatorInitialize
// (Final, Native, Protected)

void UStandaloneTextStatWidget::OnWeaponActivatorInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.StandaloneTextStatWidget.OnWeaponActivatorInitialize");

	UStandaloneTextStatWidget_OnWeaponActivatorInitialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineDamagedState.OnVisibilityChanged
// (Final, Native, Public)
// Parameters:
// bool                           bVisibility                    (Parm, ZeroConstructor, IsPlainOldData)

void USubmarineDamagedState::OnVisibilityChanged(bool bVisibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineDamagedState.OnVisibilityChanged");

	USubmarineDamagedState_OnVisibilityChanged_Params params;
	params.bVisibility = bVisibility;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineDamagedState.OnRestored
// (Final, Native, Public)

void USubmarineDamagedState::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineDamagedState.OnRestored");

	USubmarineDamagedState_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineDamagedState.OnComponentHitSurface
// (Final, Native, Private, HasOutParms, HasDefaults)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  OtherActor                     (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// struct FVector                 NormalImpulse                  (Parm, IsPlainOldData)
// struct FHitResult              Hit                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void USubmarineDamagedState::OnComponentHitSurface(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineDamagedState.OnComponentHitSurface");

	USubmarineDamagedState_OnComponentHitSurface_Params params;
	params.HitComponent = HitComponent;
	params.OtherActor = OtherActor;
	params.OtherComp = OtherComp;
	params.NormalImpulse = NormalImpulse;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineBarrierDroneComponent.StartBarrierDroneDefenceBySocketInfo
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FBarrierDroneSocketInfo> InBarrierDroneSocketInfoList   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USubmarineBarrierDroneComponent::StartBarrierDroneDefenceBySocketInfo(TArray<struct FBarrierDroneSocketInfo> InBarrierDroneSocketInfoList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineBarrierDroneComponent.StartBarrierDroneDefenceBySocketInfo");

	USubmarineBarrierDroneComponent_StartBarrierDroneDefenceBySocketInfo_Params params;
	params.InBarrierDroneSocketInfoList = InBarrierDroneSocketInfoList;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineBarrierDroneComponent.StartBarrierDroneDefence
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<class AAIHeli*>         InBarrierDroneList             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void USubmarineBarrierDroneComponent::StartBarrierDroneDefence(TArray<class AAIHeli*> InBarrierDroneList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineBarrierDroneComponent.StartBarrierDroneDefence");

	USubmarineBarrierDroneComponent_StartBarrierDroneDefence_Params params;
	params.InBarrierDroneList = InBarrierDroneList;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineBarrierDroneComponent.OnRestored
// (Final, Native, Public)

void USubmarineBarrierDroneComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineBarrierDroneComponent.OnRestored");

	USubmarineBarrierDroneComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineBarrierDroneComponent.EndBarrierDroneDefence
// (Final, Native, Public, BlueprintCallable)

void USubmarineBarrierDroneComponent::EndBarrierDroneDefence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineBarrierDroneComponent.EndBarrierDroneDefence");

	USubmarineBarrierDroneComponent_EndBarrierDroneDefence_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineMoveComponent.StartBreakDownProgress
// (Final, Native, Public, BlueprintCallable)

void USubmarineMoveComponent::StartBreakDownProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineMoveComponent.StartBreakDownProgress");

	USubmarineMoveComponent_StartBreakDownProgress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubmarineMoveComponent.OnRestored
// (Final, Native, Public)

void USubmarineMoveComponent::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubmarineMoveComponent.OnRestored");

	USubmarineMoveComponent_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SurveillanceComponent.OnPlayerEngaged
// (Event, Public, BlueprintEvent)

void USurveillanceComponent::OnPlayerEngaged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SurveillanceComponent.OnPlayerEngaged");

	USurveillanceComponent_OnPlayerEngaged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SurveillanceComponent.OnPlayerDetected
// (Event, Public, BlueprintEvent)

void USurveillanceComponent::OnPlayerDetected()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SurveillanceComponent.OnPlayerDetected");

	USurveillanceComponent_OnPlayerDetected_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SurveillanceComponent.OnDroneSpawned
// (Event, Public, BlueprintEvent)

void USurveillanceComponent::OnDroneSpawned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SurveillanceComponent.OnDroneSpawned");

	USurveillanceComponent_OnDroneSpawned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SurveillanceComponent.OnDroneDestroyed
// (Event, Public, BlueprintEvent)

void USurveillanceComponent::OnDroneDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SurveillanceComponent.OnDroneDestroyed");

	USurveillanceComponent_OnDroneDestroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.RadioMessageReceived
// (Final, Native, Public, HasOutParms)
// Parameters:
// struct FRadioText              RadioText                      (ConstParm, Parm, OutParm, ReferenceParm)

void USubtitleWidget::RadioMessageReceived(const struct FRadioText& RadioText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.RadioMessageReceived");

	USubtitleWidget_RadioMessageReceived_Params params;
	params.RadioText = RadioText;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnHUDEnabled
// (Native, Public)

void USubtitleWidget::OnHUDEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnHUDEnabled");

	USubtitleWidget_OnHUDEnabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnHUDDisabled
// (Native, Public)

void USubtitleWidget::OnHUDDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnHUDDisabled");

	USubtitleWidget_OnHUDDisabled_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnHUDAlertEnd
// (Native, Public)

void USubtitleWidget::OnHUDAlertEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnHUDAlertEnd");

	USubtitleWidget_OnHUDAlertEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnHUDAlertBegin
// (Native, Public)

void USubtitleWidget::OnHUDAlertBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnHUDAlertBegin");

	USubtitleWidget_OnHUDAlertBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnCurrentHUDAlertColorUpdated
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void USubtitleWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnCurrentHUDAlertColorUpdated");

	USubtitleWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnCameraViewChanged
// (Native, Public)
// Parameters:
// ECameraType                    CameraType                     (Parm, ZeroConstructor, IsPlainOldData)

void USubtitleWidget::OnCameraViewChanged(ECameraType CameraType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnCameraViewChanged");

	USubtitleWidget_OnCameraViewChanged_Params params;
	params.CameraType = CameraType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnAnalyzeAnimationStart
// (Event, Public, BlueprintEvent)

void USubtitleWidget::OnAnalyzeAnimationStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnAnalyzeAnimationStart");

	USubtitleWidget_OnAnalyzeAnimationStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnAnalyzeAnimationShow
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                           bShow                          (Parm, ZeroConstructor, IsPlainOldData)

void USubtitleWidget::OnAnalyzeAnimationShow(bool bShow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnAnalyzeAnimationShow");

	USubtitleWidget_OnAnalyzeAnimationShow_Params params;
	params.bShow = bShow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.OnAnalyzeAnimationEnd
// (Event, Public, BlueprintEvent)

void USubtitleWidget::OnAnalyzeAnimationEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.OnAnalyzeAnimationEnd");

	USubtitleWidget_OnAnalyzeAnimationEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.DebugSetVRLocation
// (Final, Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FVector2D               NewLocation                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void USubtitleWidget::DebugSetVRLocation(const struct FVector2D& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.DebugSetVRLocation");

	USubtitleWidget_DebugSetVRLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SubtitleWidget.DebugPrintVRLocation
// (Final, Native, Public)

void USubtitleWidget::DebugPrintVRLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SubtitleWidget.DebugPrintVRLocation");

	USubtitleWidget_DebugPrintVRLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectImpactArea.SetAreaModeShrinking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InTime                         (Parm, ZeroConstructor, IsPlainOldData)
// float                          InWaitTime                     (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectImpactArea::SetAreaModeShrinking(float InTime, float InWaitTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectImpactArea.SetAreaModeShrinking");

	ASystemObjectImpactArea_SetAreaModeShrinking_Params params;
	params.InTime = InTime;
	params.InWaitTime = InWaitTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectImpactArea.SetAreaModeExpansion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InFallDelaySeconds             (Parm, ZeroConstructor, IsPlainOldData)
// float                          InHeliosRadioForeWarnTime      (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectImpactArea::SetAreaModeExpansion(float InFallDelaySeconds, float InHeliosRadioForeWarnTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectImpactArea.SetAreaModeExpansion");

	ASystemObjectImpactArea_SetAreaModeExpansion_Params params;
	params.InFallDelaySeconds = InFallDelaySeconds;
	params.InHeliosRadioForeWarnTime = InHeliosRadioForeWarnTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectLightning.OnLightningStrike
// (Final, Native, Protected, BlueprintCallable)

void ASystemObjectLightning::OnLightningStrike()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectLightning.OnLightningStrike");

	ASystemObjectLightning_OnLightningStrike_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectLightning.IsPositionInRange
// (Final, Native, Public, HasOutParms, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                 Position                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASystemObjectLightning::IsPositionInRange(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectLightning.IsPositionInRange");

	ASystemObjectLightning_IsPositionInRange_Params params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.SystemObjectLightning.IsEnableVFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASystemObjectLightning::IsEnableVFX()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectLightning.IsEnableVFX");

	ASystemObjectLightning_IsEnableVFX_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.SystemObjectLightning.InitializeVariablesFromBP
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                          MinDelay                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxDelay                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinLifeTime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          MaxLifetime                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          LightIntensityMultiplier       (Parm, ZeroConstructor, IsPlainOldData)
// float                          MinDistanceFromCamera          (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectLightning::InitializeVariablesFromBP(float MinDelay, float MaxDelay, float MinLifeTime, float MaxLifetime, float LightIntensityMultiplier, float MinDistanceFromCamera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectLightning.InitializeVariablesFromBP");

	ASystemObjectLightning_InitializeVariablesFromBP_Params params;
	params.MinDelay = MinDelay;
	params.MaxDelay = MaxDelay;
	params.MinLifeTime = MinLifeTime;
	params.MaxLifetime = MaxLifetime;
	params.LightIntensityMultiplier = LightIntensityMultiplier;
	params.MinDistanceFromCamera = MinDistanceFromCamera;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectLightning.EnableVFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectLightning::EnableVFX(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectLightning.EnableVFX");

	ASystemObjectLightning_EnableVFX_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectLine.OnCombatZoneUpdatedEvent
// (Final, Native, Private)

void ASystemObjectLine::OnCombatZoneUpdatedEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectLine.OnCombatZoneUpdatedEvent");

	ASystemObjectLine_OnCombatZoneUpdatedEvent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSE.StopAmbientSound
// (Final, Native, Public, BlueprintCallable)

void ASystemObjectSE::StopAmbientSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSE.StopAmbientSound");

	ASystemObjectSE_StopAmbientSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSE.SetVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InVolume                       (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSE::SetVolume(float InVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSE.SetVolume");

	ASystemObjectSE_SetVolume_Params params;
	params.InVolume = InVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSE.PlayAmbientSound
// (Final, Native, Public, BlueprintCallable)

void ASystemObjectSE::PlayAmbientSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSE.PlayAmbientSound");

	ASystemObjectSE_PlayAmbientSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSearchLight.TurnOn
// (Final, Native, Public, BlueprintCallable)

void ASystemObjectSearchLight::TurnOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.TurnOn");

	ASystemObjectSearchLight_TurnOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSearchLight.TurnOff
// (Final, Native, Public, BlueprintCallable)

void ASystemObjectSearchLight::TurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.TurnOff");

	ASystemObjectSearchLight_TurnOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSearchLight.StopAmbientSound
// (Final, Native, Public, BlueprintCallable)

void ASystemObjectSearchLight::StopAmbientSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.StopAmbientSound");

	ASystemObjectSearchLight_StopAmbientSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSearchLight.PlayAmbientSound
// (Final, Native, Public, BlueprintCallable)

void ASystemObjectSearchLight::PlayAmbientSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.PlayAmbientSound");

	ASystemObjectSearchLight_PlayAmbientSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.SystemObjectSearchLight.OnReached__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             Target                         (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSearchLight::OnReached__DelegateSignature(class AGameObject* Target)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.SystemObjectSearchLight.OnReached__DelegateSignature");

	ASystemObjectSearchLight_OnReached__DelegateSignature_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSearchLight.OnEndOverlap
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*     OverlappedComp                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSearchLight::OnEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.OnEndOverlap");

	ASystemObjectSearchLight_OnEndOverlap_Params params;
	params.OverlappedComp = OverlappedComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.SystemObjectSearchLight.OnCaptured__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AGameObject*             Target                         (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCaptured                      (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSearchLight::OnCaptured__DelegateSignature(class AGameObject* Target, bool bCaptured)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.SystemObjectSearchLight.OnCaptured__DelegateSignature");

	ASystemObjectSearchLight_OnCaptured__DelegateSignature_Params params;
	params.Target = Target;
	params.bCaptured = bCaptured;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSearchLight.OnBeginOverlap
// (Final, Native, Public, HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OverlappedComp                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// class AActor*                  Other                          (Parm, ZeroConstructor, IsPlainOldData)
// class UPrimitiveComponent*     OtherComp                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData)
// int                            OtherBodyIndex                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bFromSweep                     (Parm, ZeroConstructor, IsPlainOldData)
// struct FHitResult              OverlapInfo                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)

void ASystemObjectSearchLight::OnBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.OnBeginOverlap");

	ASystemObjectSearchLight_OnBeginOverlap_Params params;
	params.OverlappedComp = OverlappedComp;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.OtherBodyIndex = OtherBodyIndex;
	params.bFromSweep = bFromSweep;
	params.OverlapInfo = OverlapInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSearchLight.IsTurnOn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASystemObjectSearchLight::IsTurnOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.IsTurnOn");

	ASystemObjectSearchLight_IsTurnOn_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.SystemObjectSearchLight.IsTracking
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool ASystemObjectSearchLight::IsTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.IsTracking");

	ASystemObjectSearchLight_IsTracking_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.SystemObjectSearchLight.GetTrackingTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* ASystemObjectSearchLight::GetTrackingTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSearchLight.GetTrackingTarget");

	ASystemObjectSearchLight_GetTrackingTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.SystemObjectSonobuoy.Scan
// (Final, Native, Public, BlueprintCallable)

void ASystemObjectSonobuoy::Scan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSonobuoy.Scan");

	ASystemObjectSonobuoy_Scan_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.SystemObjectSonobuoy.OnSonobuoyEventOccurred__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ASystemObjectSonobuoy*   Sonobuoy                       (Parm, ZeroConstructor, IsPlainOldData)
// ESonobuoyEvent                 Event                          (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSonobuoy::OnSonobuoyEventOccurred__DelegateSignature(class ASystemObjectSonobuoy* Sonobuoy, ESonobuoyEvent Event)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.SystemObjectSonobuoy.OnSonobuoyEventOccurred__DelegateSignature");

	ASystemObjectSonobuoy_OnSonobuoyEventOccurred__DelegateSignature_Params params;
	params.Sonobuoy = Sonobuoy;
	params.Event = Event;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSonobuoy.Drop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             Dropper                        (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSonobuoy::Drop(class AGameObject* Dropper)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSonobuoy.Drop");

	ASystemObjectSonobuoy_Drop_Params params;
	params.Dropper = Dropper;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSubmarineSearchArea.SetSearchArea
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                 NewPosition                    (ConstParm, Parm, IsPlainOldData)
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSubmarineSearchArea::SetSearchArea(const struct FVector& NewPosition, float InRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSubmarineSearchArea.SetSearchArea");

	ASystemObjectSubmarineSearchArea_SetSearchArea_Params params;
	params.NewPosition = NewPosition;
	params.InRadius = InRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSubmarineSearchArea.SetRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InRadius                       (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSubmarineSearchArea::SetRadius(float InRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSubmarineSearchArea.SetRadius");

	ASystemObjectSubmarineSearchArea_SetRadius_Params params;
	params.InRadius = InRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSubmarineSearchArea.SetEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectSubmarineSearchArea::SetEnable(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSubmarineSearchArea.SetEnable");

	ASystemObjectSubmarineSearchArea_SetEnable_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectSubmarineSearchArea.PlaySonarEffect
// (Final, Native, Public, BlueprintCallable)

void ASystemObjectSubmarineSearchArea::PlaySonarEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectSubmarineSearchArea.PlaySonarEffect");

	ASystemObjectSubmarineSearchArea_PlaySonarEffect_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectVFX.OnSpawnLensEffectActor
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                  InLensEffectActor              (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  InTarget                       (Parm, ZeroConstructor, IsPlainOldData)
// float                          InLifeTime                     (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectVFX::OnSpawnLensEffectActor(class AActor* InLensEffectActor, class AActor* InTarget, float InLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectVFX.OnSpawnLensEffectActor");

	ASystemObjectVFX_OnSpawnLensEffectActor_Params params;
	params.InLensEffectActor = InLensEffectActor;
	params.InTarget = InTarget;
	params.InLifeTime = InLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectVFX.OnEnablePostProcess
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                           bEnable                        (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectVFX::OnEnablePostProcess(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectVFX.OnEnablePostProcess");

	ASystemObjectVFX_OnEnablePostProcess_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.SystemObjectVFX.EnableVFX
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bEnabled                       (Parm, ZeroConstructor, IsPlainOldData)

void ASystemObjectVFX::EnableVFX(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.SystemObjectVFX.EnableVFX");

	ASystemObjectVFX_EnableVFX_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetContainerWidget.OnHUDAlertEnd
// (Native, Public)

void UTargetContainerWidget::OnHUDAlertEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetContainerWidget.OnHUDAlertEnd");

	UTargetContainerWidget_OnHUDAlertEnd_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetContainerWidget.OnHUDAlertBegin
// (Native, Public)

void UTargetContainerWidget::OnHUDAlertBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetContainerWidget.OnHUDAlertBegin");

	UTargetContainerWidget_OnHUDAlertBegin_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetContainerWidget.OnCurrentHUDAlertColorUpdated
// (Native, Public, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UTargetContainerWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetContainerWidget.OnCurrentHUDAlertColorUpdated");

	UTargetContainerWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetSelectionComponent.StartSelectTarget
// (Final, Native, Public, BlueprintCallable)

void UTargetSelectionComponent::StartSelectTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.StartSelectTarget");

	UTargetSelectionComponent_StartSelectTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetSelectionComponent.SetJammed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bJammed                        (Parm, ZeroConstructor, IsPlainOldData)

void UTargetSelectionComponent::SetJammed(bool bJammed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.SetJammed");

	UTargetSelectionComponent_SetJammed_Params params;
	params.bJammed = bJammed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetSelectionComponent.SetIsWideMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bWideMode                      (Parm, ZeroConstructor, IsPlainOldData)

void UTargetSelectionComponent::SetIsWideMode(bool bWideMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.SetIsWideMode");

	UTargetSelectionComponent_SetIsWideMode_Params params;
	params.bWideMode = bWideMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetSelectionComponent.SetIsAngleFirst
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsAngleFirst                  (Parm, ZeroConstructor, IsPlainOldData)

void UTargetSelectionComponent::SetIsAngleFirst(bool bIsAngleFirst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.SetIsAngleFirst");

	UTargetSelectionComponent_SetIsAngleFirst_Params params;
	params.bIsAngleFirst = bIsAngleFirst;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetSelectionComponent.SelectTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bForcedSelect                  (Parm, ZeroConstructor, IsPlainOldData)
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* UTargetSelectionComponent::SelectTarget(bool bForcedSelect)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.SelectTarget");

	UTargetSelectionComponent_SelectTarget_Params params;
	params.bForcedSelect = bForcedSelect;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TargetSelectionComponent.Reset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          LockonRange                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bResetLockOnRange              (Parm, ZeroConstructor, IsPlainOldData)
// float                          LockonHeight                   (Parm, ZeroConstructor, IsPlainOldData)

void UTargetSelectionComponent::Reset(float LockonRange, bool bResetLockOnRange, float LockonHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.Reset");

	UTargetSelectionComponent_Reset_Params params;
	params.LockonRange = LockonRange;
	params.bResetLockOnRange = bResetLockOnRange;
	params.LockonHeight = LockonHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetSelectionComponent.OverrideCloudParameters
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FCloudVisibilityTime> VisibilityTimeSettings         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FCloudVisibilityTime> SWPVisibilityTimeSettings      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FCloudVisibilityDistance> VisibilityDistanceSettings     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FCloudVisibilityDistance> SWPVisibilityDistanceSettings  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)

void UTargetSelectionComponent::OverrideCloudParameters(TArray<struct FCloudVisibilityTime> VisibilityTimeSettings, TArray<struct FCloudVisibilityTime> SWPVisibilityTimeSettings, TArray<struct FCloudVisibilityDistance> VisibilityDistanceSettings, TArray<struct FCloudVisibilityDistance> SWPVisibilityDistanceSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.OverrideCloudParameters");

	UTargetSelectionComponent_OverrideCloudParameters_Params params;
	params.VisibilityTimeSettings = VisibilityTimeSettings;
	params.SWPVisibilityTimeSettings = SWPVisibilityTimeSettings;
	params.VisibilityDistanceSettings = VisibilityDistanceSettings;
	params.SWPVisibilityDistanceSettings = SWPVisibilityDistanceSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetSelectionComponent.OnToggleWeapon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWeaponBase*             Weapon                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// class UWeaponParameters*       WeaponParam                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsWeaponSpecial               (Parm, ZeroConstructor, IsPlainOldData)

void UTargetSelectionComponent::OnToggleWeapon(class AWeaponBase* Weapon, class UWeaponParameters* WeaponParam, bool bIsWeaponSpecial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.OnToggleWeapon");

	UTargetSelectionComponent_OnToggleWeapon_Params params;
	params.Weapon = Weapon;
	params.WeaponParam = WeaponParam;
	params.bIsWeaponSpecial = bIsWeaponSpecial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TargetSelectionComponent.GetSelectionAssistTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* UTargetSelectionComponent::GetSelectionAssistTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.GetSelectionAssistTarget");

	UTargetSelectionComponent_GetSelectionAssistTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TargetSelectionComponent.GetSelectedTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* UTargetSelectionComponent::GetSelectedTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.GetSelectedTarget");

	UTargetSelectionComponent_GetSelectedTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TargetSelectionComponent.GetFirstLockedOnTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGameObject*             ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

class AGameObject* UTargetSelectionComponent::GetFirstLockedOnTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.GetFirstLockedOnTarget");

	UTargetSelectionComponent_GetFirstLockedOnTarget_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TargetSelectionComponent.GetAllLockedOnTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AGameObject*>     ReturnValue                    (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm)

TArray<class AGameObject*> UTargetSelectionComponent::GetAllLockedOnTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TargetSelectionComponent.GetAllLockedOnTargets");

	UTargetSelectionComponent_GetAllLockedOnTargets_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TeamDeathMatchResult.DisplayResults
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// TArray<struct FString>         Team1PlayerNames               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<int>                    Team1PlayerScores              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<struct FString>         Team2PlayerNames               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// TArray<int>                    Team2PlayerScores              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm)
// int                            Team1Score                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            Team2Score                     (Parm, ZeroConstructor, IsPlainOldData)
// int                            LocalTeamIndex                 (Parm, ZeroConstructor, IsPlainOldData)

void UTeamDeathMatchResult::DisplayResults(TArray<struct FString> Team1PlayerNames, TArray<int> Team1PlayerScores, TArray<struct FString> Team2PlayerNames, TArray<int> Team2PlayerScores, int Team1Score, int Team2Score, int LocalTeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TeamDeathMatchResult.DisplayResults");

	UTeamDeathMatchResult_DisplayResults_Params params;
	params.Team1PlayerNames = Team1PlayerNames;
	params.Team1PlayerScores = Team1PlayerScores;
	params.Team2PlayerNames = Team2PlayerNames;
	params.Team2PlayerScores = Team2PlayerScores;
	params.Team1Score = Team1Score;
	params.Team2Score = Team2Score;
	params.LocalTeamIndex = LocalTeamIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TimeScoreStatBaseWidget.OnCurrentHUDAlertColorUpdated
// (Native, Protected, HasOutParms, HasDefaults)
// Parameters:
// struct FLinearColor            NewColor                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData)
// bool                           bIsDefaultColor                (Parm, ZeroConstructor, IsPlainOldData)

void UTimeScoreStatBaseWidget::OnCurrentHUDAlertColorUpdated(const struct FLinearColor& NewColor, bool bIsDefaultColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TimeScoreStatBaseWidget.OnCurrentHUDAlertColorUpdated");

	UTimeScoreStatBaseWidget_OnCurrentHUDAlertColorUpdated_Params params;
	params.NewColor = NewColor;
	params.bIsDefaultColor = bIsDefaultColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TrueSkyWrapper.SetTrueSkyVisible
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           bVisible                       (Parm, ZeroConstructor, IsPlainOldData)
// class UObject*                 WorldContextObject             (Parm, ZeroConstructor, IsPlainOldData)

void UTrueSkyWrapper::STATIC_SetTrueSkyVisible(bool bVisible, class UObject* WorldContextObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.SetTrueSkyVisible");

	UTrueSkyWrapper_SetTrueSkyVisible_Params params;
	params.bVisible = bVisible;
	params.WorldContextObject = WorldContextObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TrueSkyWrapper.SetTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          Value                          (Parm, ZeroConstructor, IsPlainOldData)

void UTrueSkyWrapper::STATIC_SetTime(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.SetTime");

	UTrueSkyWrapper_SetTime_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TrueSkyWrapper.SetShadowBase
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                          ShadowBaseUU                   (Parm, ZeroConstructor, IsPlainOldData)

void UTrueSkyWrapper::STATIC_SetShadowBase(float ShadowBaseUU)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.SetShadowBase");

	UTrueSkyWrapper_SetShadowBase_Params params;
	params.ShadowBaseUU = ShadowBaseUU;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.TrueSkyWrapper.SandPointTest
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            QueryID                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Pos                            (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTrueSkyWrapper::STATIC_SandPointTest(int QueryID, const struct FVector& Pos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.SandPointTest");

	UTrueSkyWrapper_SandPointTest_Params params;
	params.QueryID = QueryID;
	params.Pos = Pos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.SandLineTest
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            QueryID                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 EndPos                         (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTrueSkyWrapper::STATIC_SandLineTest(int QueryID, const struct FVector& StartPos, const struct FVector& EndPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.SandLineTest");

	UTrueSkyWrapper_SandLineTest_Params params;
	params.QueryID = QueryID;
	params.StartPos = StartPos;
	params.EndPos = EndPos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetSunRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UTrueSkyWrapper::STATIC_GetSunRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetSunRotation");

	UTrueSkyWrapper_GetSunRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetSunOrMoonRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UTrueSkyWrapper::STATIC_GetSunOrMoonRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetSunOrMoonRotation");

	UTrueSkyWrapper_GetSunOrMoonRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetSunColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor            ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FLinearColor UTrueSkyWrapper::STATIC_GetSunColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetSunColor");

	UTrueSkyWrapper_GetSunColor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetShadowBase
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTrueSkyWrapper::STATIC_GetShadowBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetShadowBase");

	UTrueSkyWrapper_GetShadowBase_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetNextModifiableCloudKeyframe
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            Layer                          (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int UTrueSkyWrapper::STATIC_GetNextModifiableCloudKeyframe(int Layer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetNextModifiableCloudKeyframe");

	UTrueSkyWrapper_GetNextModifiableCloudKeyframe_Params params;
	params.Layer = Layer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetMoonRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm, IsPlainOldData)

struct FRotator UTrueSkyWrapper::STATIC_GetMoonRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetMoonRotation");

	UTrueSkyWrapper_GetMoonRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetKeyframeFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            KeyframeUid                    (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 Name                           (Parm, ZeroConstructor)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTrueSkyWrapper::STATIC_GetKeyframeFloat(int KeyframeUid, const struct FString& Name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetKeyframeFloat");

	UTrueSkyWrapper_GetKeyframeFloat_Params params;
	params.KeyframeUid = KeyframeUid;
	params.Name = Name;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetCloudMinAltitude
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTrueSkyWrapper::STATIC_GetCloudMinAltitude()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetCloudMinAltitude");

	UTrueSkyWrapper_GetCloudMinAltitude_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.GetCloudMaxAltitude
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTrueSkyWrapper::STATIC_GetCloudMaxAltitude()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.GetCloudMaxAltitude");

	UTrueSkyWrapper_GetCloudMaxAltitude_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.CloudPointTest
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            QueryID                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Pos                            (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTrueSkyWrapper::STATIC_CloudPointTest(int QueryID, const struct FVector& Pos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.CloudPointTest");

	UTrueSkyWrapper_CloudPointTest_Params params;
	params.QueryID = QueryID;
	params.Pos = Pos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.TrueSkyWrapper.CloudLineTest
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// int                            QueryID                        (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 StartPos                       (Parm, IsPlainOldData)
// struct FVector                 EndPos                         (Parm, IsPlainOldData)
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float UTrueSkyWrapper::STATIC_CloudLineTest(int QueryID, const struct FVector& StartPos, const struct FVector& EndPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.TrueSkyWrapper.CloudLineTest");

	UTrueSkyWrapper_CloudLineTest_Params params;
	params.QueryID = QueryID;
	params.StartPos = StartPos;
	params.EndPos = EndPos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.UI3DWidgetActor.GetWidgetComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidgetComponent*        ReturnValue                    (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData)

class UWidgetComponent* AUI3DWidgetActor::GetWidgetComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UI3DWidgetActor.GetWidgetComponent");

	AUI3DWidgetActor_GetWidgetComponent_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.UIVRPawn.TurnAtRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void AUIVRPawn::TurnAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIVRPawn.TurnAtRate");

	AUIVRPawn_TurnAtRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.UIVRPawn.MoveUp_World
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void AUIVRPawn::MoveUp_World(float Val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIVRPawn.MoveUp_World");

	AUIVRPawn_MoveUp_World_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.UIVRPawn.MoveRight
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void AUIVRPawn::MoveRight(float Val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIVRPawn.MoveRight");

	AUIVRPawn_MoveRight_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.UIVRPawn.MoveForward
// (Native, Public, BlueprintCallable)
// Parameters:
// float                          Val                            (Parm, ZeroConstructor, IsPlainOldData)

void AUIVRPawn::MoveForward(float Val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIVRPawn.MoveForward");

	AUIVRPawn_MoveForward_Params params;
	params.Val = Val;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.UIVRPawn.LookUpAtRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          Rate                           (Parm, ZeroConstructor, IsPlainOldData)

void AUIVRPawn::LookUpAtRate(float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.UIVRPawn.LookUpAtRate");

	AUIVRPawn_LookUpAtRate_Params params;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.UndockChildActorUAVs
// (Final, Native, Public, BlueprintCallable)

void AUnit::UndockChildActorUAVs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.UndockChildActorUAVs");

	AUnit_UndockChildActorUAVs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SkipOutOfWoldCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bSkip                          (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SkipOutOfWoldCheck(bool bSkip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SkipOutOfWoldCheck");

	AUnit_SkipOutOfWoldCheck_Params params;
	params.bSkip = bSkip;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetWeaponSpecialBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWeaponNumber                  WeaponNumber                   (Parm, ZeroConstructor, IsPlainOldData)
// EWeaponSpecialBehaviorType     BehaviorType                   (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetWeaponSpecialBehavior(EWeaponNumber WeaponNumber, EWeaponSpecialBehaviorType BehaviorType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetWeaponSpecialBehavior");

	AUnit_SetWeaponSpecialBehavior_Params params;
	params.WeaponNumber = WeaponNumber;
	params.BehaviorType = BehaviorType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetWeaponSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInCanDamageTGT                (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bInCanFireNoCollisionWeapon    (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetWeaponSettings(bool bInCanDamageTGT, bool bInCanFireNoCollisionWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetWeaponSettings");

	AUnit_SetWeaponSettings_Params params;
	params.bInCanDamageTGT = bInCanDamageTGT;
	params.bInCanFireNoCollisionWeapon = bInCanFireNoCollisionWeapon;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetShowHudBox
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShowHUDBox                    (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetShowHudBox(bool bShowHUDBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetShowHudBox");

	AUnit_SetShowHudBox_Params params;
	params.bShowHUDBox = bShowHUDBox;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetRadiusMeters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          RadiusInMeters                 (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetRadiusMeters(float RadiusInMeters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetRadiusMeters");

	AUnit_SetRadiusMeters_Params params;
	params.RadiusInMeters = RadiusInMeters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetPathParameter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InSpeedKmph                    (Parm, ZeroConstructor, IsPlainOldData)
// float                          InAccelerationMpss             (Parm, ZeroConstructor, IsPlainOldData)
// float                          InRotationSpeedDegree          (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetPathParameter(float InSpeedKmph, float InAccelerationMpss, float InRotationSpeedDegree)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetPathParameter");

	AUnit_SetPathParameter_Params params;
	params.InSpeedKmph = InSpeedKmph;
	params.InAccelerationMpss = InAccelerationMpss;
	params.InRotationSpeedDegree = InRotationSpeedDegree;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetMinHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          InHealth                       (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetMinHealth(float InHealth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetMinHealth");

	AUnit_SetMinHealth_Params params;
	params.InHealth = InHealth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetMinAltitudeMeters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          MinAltitudeMeters              (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetMinAltitudeMeters(float MinAltitudeMeters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetMinAltitudeMeters");

	AUnit_SetMinAltitudeMeters_Params params;
	params.MinAltitudeMeters = MinAltitudeMeters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetMaxAltitudeMeters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          MaxAltitudeMeters              (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetMaxAltitudeMeters(float MaxAltitudeMeters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetMaxAltitudeMeters");

	AUnit_SetMaxAltitudeMeters_Params params;
	params.MaxAltitudeMeters = MaxAltitudeMeters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetIsTGT
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bIsTarget                      (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetIsTGT(bool bIsTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetIsTGT");

	AUnit_SetIsTGT_Params params;
	params.bIsTarget = bIsTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetIsInvincible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInvincible                    (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetIsInvincible(bool bInvincible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetIsInvincible");

	AUnit_SetIsInvincible_Params params;
	params.bInvincible = bInvincible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetIsCosmetic
// (Final, Native, Public, BlueprintCallable)

void AUnit::SetIsCosmetic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetIsCosmetic");

	AUnit_SetIsCosmetic_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetIsAttackTargetsException
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bAttackTargetsException        (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetIsAttackTargetsException(bool bAttackTargetsException)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetIsAttackTargetsException");

	AUnit_SetIsAttackTargetsException_Params params;
	params.bAttackTargetsException = bAttackTargetsException;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetHudBoxVisibilityRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          RadiusMeters                   (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetHudBoxVisibilityRange(float RadiusMeters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetHudBoxVisibilityRange");

	AUnit_SetHudBoxVisibilityRange_Params params;
	params.RadiusMeters = RadiusMeters;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetHudBoxAttribute
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHudBoxAttribute               Attribute                      (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetHudBoxAttribute(EHudBoxAttribute Attribute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetHudBoxAttribute");

	AUnit_SetHudBoxAttribute_Params params;
	params.Attribute = Attribute;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetGameObjectCurrentSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                          SpeedKmph                      (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetGameObjectCurrentSpeed(float SpeedKmph)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetGameObjectCurrentSpeed");

	AUnit_SetGameObjectCurrentSpeed_Params params;
	params.SpeedKmph = SpeedKmph;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetFaction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFaction                       NewFaction                     (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetFaction(EFaction NewFaction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetFaction");

	AUnit_SetFaction_Params params;
	params.NewFaction = NewFaction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetExceptionTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             ExceptionTarget                (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetExceptionTarget(class AGameObject* ExceptionTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetExceptionTarget");

	AUnit_SetExceptionTarget_Params params;
	params.ExceptionTarget = ExceptionTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetEnemySearchType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETargetType                    InType                         (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetEnemySearchType(ETargetType InType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetEnemySearchType");

	AUnit_SetEnemySearchType_Params params;
	params.InType = InType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.SetCommonAttributes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShowHUDBox                    (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsInvincible                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIsTGT                         (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::SetCommonAttributes(bool bShowHUDBox, bool bIsInvincible, bool bIsTGT)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.SetCommonAttributes");

	AUnit_SetCommonAttributes_Params params;
	params.bShowHUDBox = bShowHUDBox;
	params.bIsInvincible = bIsInvincible;
	params.bIsTGT = bIsTGT;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.RestoreUnit
// (Final, Native, Public, BlueprintCallable)

void AUnit::RestoreUnit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.RestoreUnit");

	AUnit_RestoreUnit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.RequestSpecialAction
// (Final, Native, Public, HasOutParms, BlueprintCallable)
// Parameters:
// struct FAISpecialActionRequestInfo SpecialActionRequestInfo       (ConstParm, Parm, OutParm, ReferenceParm)

void AUnit::RequestSpecialAction(const struct FAISpecialActionRequestInfo& SpecialActionRequestInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.RequestSpecialAction");

	AUnit_RequestSpecialAction_Params params;
	params.SpecialActionRequestInfo = SpecialActionRequestInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.RepositionUnit
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// EUnitActivationType            RepositionType                 (Parm, ZeroConstructor, IsPlainOldData)
// struct FVector                 Position                       (Parm, IsPlainOldData)
// struct FRotator                Rotation                       (Parm, IsPlainOldData)
// class AActor*                  TransformReferenceActor        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bAddHeightOfGroundToZ          (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::RepositionUnit(EUnitActivationType RepositionType, const struct FVector& Position, const struct FRotator& Rotation, class AActor* TransformReferenceActor, bool bAddHeightOfGroundToZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.RepositionUnit");

	AUnit_RepositionUnit_Params params;
	params.RepositionType = RepositionType;
	params.Position = Position;
	params.Rotation = Rotation;
	params.TransformReferenceActor = TransformReferenceActor;
	params.bAddHeightOfGroundToZ = bAddHeightOfGroundToZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.RemoveAIGameObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AAIGameObject*           Object                         (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::RemoveAIGameObject(class AAIGameObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.RemoveAIGameObject");

	AUnit_RemoveAIGameObject_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Unit.OnStartedMovingOnPath__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPath*                 Path                           (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::OnStartedMovingOnPath__DelegateSignature(class AAIPath* Path)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Unit.OnStartedMovingOnPath__DelegateSignature");

	AUnit_OnStartedMovingOnPath__DelegateSignature_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.OnRestored
// (Native, Event, Public, BlueprintEvent)

void AUnit::OnRestored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.OnRestored");

	AUnit_OnRestored_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Unit.OnResetPath__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPath*                 Path                           (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::OnResetPath__DelegateSignature(class AAIPath* Path)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Unit.OnResetPath__DelegateSignature");

	AUnit_OnResetPath__DelegateSignature_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Unit.OnReachedPathPoint__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPathPoint*            PathPoint                      (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::OnReachedPathPoint__DelegateSignature(class AAIPathPoint* PathPoint)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Unit.OnReachedPathPoint__DelegateSignature");

	AUnit_OnReachedPathPoint__DelegateSignature_Params params;
	params.PathPoint = PathPoint;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Unit.OnReachedPathEntryPoint__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPath*                 Path                           (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::OnReachedPathEntryPoint__DelegateSignature(class AAIPath* Path)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Unit.OnReachedPathEntryPoint__DelegateSignature");

	AUnit_OnReachedPathEntryPoint__DelegateSignature_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.Unit.OnFinishedMovingOnPath__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AAIPath*                 Path                           (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::OnFinishedMovingOnPath__DelegateSignature(class AAIPath* Path)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.Unit.OnFinishedMovingOnPath__DelegateSignature");

	AUnit_OnFinishedMovingOnPath__DelegateSignature_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.OnDeath
// (Event, Public, BlueprintEvent)
// Parameters:
// class AUnit*                   DeadUnit                       (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::OnDeath(class AUnit* DeadUnit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.OnDeath");

	AUnit_OnDeath_Params params;
	params.DeadUnit = DeadUnit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.OnActivation
// (Event, Public, BlueprintEvent)
// Parameters:
// class AUnit*                   ActivatedUnit                  (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::OnActivation(class AUnit* ActivatedUnit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.OnActivation");

	AUnit_OnActivation_Params params;
	params.ActivatedUnit = ActivatedUnit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.ModifyHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHPModifier                    ModType                        (Parm, ZeroConstructor, IsPlainOldData)
// float                          InValue                        (Parm, ZeroConstructor, IsPlainOldData)
// class APawn*                   DamageCauser                   (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bCauseDamageEvent              (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::ModifyHealth(EHPModifier ModType, float InValue, class APawn* DamageCauser, bool bCauseDamageEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.ModifyHealth");

	AUnit_ModifyHealth_Params params;
	params.ModType = ModType;
	params.InValue = InValue;
	params.DamageCauser = DamageCauser;
	params.bCauseDamageEvent = bCauseDamageEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.K2_DestroyActor
// (Native, Public, BlueprintCallable)

void AUnit::K2_DestroyActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.K2_DestroyActor");

	AUnit_K2_DestroyActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.IsDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AUnit::IsDestroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.IsDestroyed");

	AUnit_IsDestroyed_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.IsActivated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AUnit::IsActivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.IsActivated");

	AUnit_IsActivated_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.HasAliveGameObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bIncludeChild                  (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AUnit::HasAliveGameObject(bool bIncludeChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.HasAliveGameObject");

	AUnit_HasAliveGameObject_Params params;
	params.bIncludeChild = bIncludeChild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.GetUnitDamagePercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AUnit::GetUnitDamagePercentage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.GetUnitDamagePercentage");

	AUnit_GetUnitDamagePercentage_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.GetTotalGameObjectNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bIncludeChild                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AUnit::GetTotalGameObjectNum(bool bIncludeChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.GetTotalGameObjectNum");

	AUnit_GetTotalGameObjectNum_Params params;
	params.bIncludeChild = bIncludeChild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.GetSubFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESubFaction                    ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

ESubFaction AUnit::GetSubFaction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.GetSubFaction");

	AUnit_GetSubFaction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.GetRadiusMeters
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

float AUnit::GetRadiusMeters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.GetRadiusMeters");

	AUnit_GetRadiusMeters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.GetFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFaction                       ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

EFaction AUnit::GetFaction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.GetFaction");

	AUnit_GetFaction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.GetDeadGameObjectNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bIncludeChild                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AUnit::GetDeadGameObjectNum(bool bIncludeChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.GetDeadGameObjectNum");

	AUnit_GetDeadGameObjectNum_Params params;
	params.bIncludeChild = bIncludeChild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.GetAliveGameObjectNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                           bIncludeChild                  (Parm, ZeroConstructor, IsPlainOldData)
// int                            ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

int AUnit::GetAliveGameObjectNum(bool bIncludeChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.GetAliveGameObjectNum");

	AUnit_GetAliveGameObjectNum_Params params;
	params.bIncludeChild = bIncludeChild;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.GetAIGameObjectsCopy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                  SubClass                       (Parm, ZeroConstructor, IsPlainOldData)
// TArray<class AAIGameObject*>   ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm)

TArray<class AAIGameObject*> AUnit::GetAIGameObjectsCopy(class UClass* SubClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.GetAIGameObjectsCopy");

	AUnit_GetAIGameObjectsCopy_Params params;
	params.SubClass = SubClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.EngagementOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EEngagement                    Order                          (Parm, ZeroConstructor, IsPlainOldData)
// class AActor*                  TargetEnemy                    (Parm, ZeroConstructor, IsPlainOldData)
// EEnemySearchPriority           SearchPriority                 (Parm, ZeroConstructor, IsPlainOldData)
// EEnemySearchPriorityExtension  SearchPriorityExtension        (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bIgnoreUnidentifiedObject      (Parm, ZeroConstructor, IsPlainOldData)
// bool                           IgnoreAttackQuota              (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CanFireWeapon1                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CanFireWeapon2                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           CanFireWeapon3                 (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::EngagementOrder(EEngagement Order, class AActor* TargetEnemy, EEnemySearchPriority SearchPriority, EEnemySearchPriorityExtension SearchPriorityExtension, bool bIgnoreUnidentifiedObject, bool IgnoreAttackQuota, bool CanFireWeapon1, bool CanFireWeapon2, bool CanFireWeapon3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.EngagementOrder");

	AUnit_EngagementOrder_Params params;
	params.Order = Order;
	params.TargetEnemy = TargetEnemy;
	params.SearchPriority = SearchPriority;
	params.SearchPriorityExtension = SearchPriorityExtension;
	params.bIgnoreUnidentifiedObject = bIgnoreUnidentifiedObject;
	params.IgnoreAttackQuota = IgnoreAttackQuota;
	params.CanFireWeapon1 = CanFireWeapon1;
	params.CanFireWeapon2 = CanFireWeapon2;
	params.CanFireWeapon3 = CanFireWeapon3;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.EnableKDSMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bInEnabled                     (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::EnableKDSMode(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.EnableKDSMode");

	AUnit_EnableKDSMode_Params params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.DockUAVsToActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AGameObject*             ParentObject                   (Parm, ZeroConstructor, IsPlainOldData)
// struct FString                 DockSocketName                 (Parm, ZeroConstructor)
// int                            FirstSlot                      (Parm, ZeroConstructor, IsPlainOldData)
// int                            LastSlot                       (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::DockUAVsToActor(class AGameObject* ParentObject, const struct FString& DockSocketName, int FirstSlot, int LastSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.DockUAVsToActor");

	AUnit_DockUAVsToActor_Params params;
	params.ParentObject = ParentObject;
	params.DockSocketName = DockSocketName;
	params.FirstSlot = FirstSlot;
	params.LastSlot = LastSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.DockChildActorUAVs
// (Final, Native, Public, BlueprintCallable)

void AUnit::DockChildActorUAVs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.DockChildActorUAVs");

	AUnit_DockChildActorUAVs_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.DeactivateUnit
// (Final, Native, Public, BlueprintCallable)

void AUnit::DeactivateUnit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.DeactivateUnit");

	AUnit_DeactivateUnit_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.AreAllUnitsUAVDocked
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class AUnit*>           Units                          (Parm, ZeroConstructor)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AUnit::STATIC_AreAllUnitsUAVDocked(TArray<class AUnit*> Units)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.AreAllUnitsUAVDocked");

	AUnit_AreAllUnitsUAVDocked_Params params;
	params.Units = Units;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.AreAllUAVDocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AUnit::AreAllUAVDocked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.AreAllUAVDocked");

	AUnit_AreAllUAVDocked_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.Unit.AddAIGameObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AAIGameObject*           Object                         (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::AddAIGameObject(class AAIGameObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.AddAIGameObject");

	AUnit_AddAIGameObject_Params params;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.Unit.Activate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bActivate                      (Parm, ZeroConstructor, IsPlainOldData)

void AUnit::Activate(bool bActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.Unit.Activate");

	AUnit_Activate_Params params;
	params.bActivate = bActivate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMenuBaseWidget.PlayViewerFrameOutAnimBP
// (Event, Protected, BlueprintEvent)

void UVRMenuBaseWidget::PlayViewerFrameOutAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMenuBaseWidget.PlayViewerFrameOutAnimBP");

	UVRMenuBaseWidget_PlayViewerFrameOutAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMenuBaseWidget.PlayViewerFrameInAnimBP
// (Event, Protected, BlueprintEvent)

void UVRMenuBaseWidget::PlayViewerFrameInAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMenuBaseWidget.PlayViewerFrameInAnimBP");

	UVRMenuBaseWidget_PlayViewerFrameInAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMenuBaseWidget.PlayFrameOutAnimBP
// (Event, Protected, BlueprintEvent)

void UVRMenuBaseWidget::PlayFrameOutAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMenuBaseWidget.PlayFrameOutAnimBP");

	UVRMenuBaseWidget_PlayFrameOutAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMenuBaseWidget.PlayFrameInAnimBP
// (Event, Protected, BlueprintEvent)

void UVRMenuBaseWidget::PlayFrameInAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMenuBaseWidget.PlayFrameInAnimBP");

	UVRMenuBaseWidget_PlayFrameInAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMenuBaseWidget.OnFrameOutAnimationEndBP
// (Final, Native, Protected, BlueprintCallable)

void UVRMenuBaseWidget::OnFrameOutAnimationEndBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMenuBaseWidget.OnFrameOutAnimationEndBP");

	UVRMenuBaseWidget_OnFrameOutAnimationEndBP_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRAircraftViewerWidget.OnFrameInAnimationFinished
// (Final, Native, Protected, BlueprintCallable)

void UVRAircraftViewerWidget::OnFrameInAnimationFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRAircraftViewerWidget.OnFrameInAnimationFinished");

	UVRAircraftViewerWidget_OnFrameInAnimationFinished_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRAircraftViewerWidget.OnFadeOutStarted
// (Event, Protected, BlueprintEvent)

void UVRAircraftViewerWidget::OnFadeOutStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRAircraftViewerWidget.OnFadeOutStarted");

	UVRAircraftViewerWidget_OnFadeOutStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRBriefingWidget.PlayMapAnimationBP
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            Mission                        (Parm, ZeroConstructor, IsPlainOldData)
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UVRBriefingWidget::PlayMapAnimationBP(int Mission, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRBriefingWidget.PlayMapAnimationBP");

	UVRBriefingWidget_PlayMapAnimationBP_Params params;
	params.Mission = Mission;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRDebriefingWidget.OnInitializedCustom
// (Event, Protected, BlueprintEvent)

void UVRDebriefingWidget::OnInitializedCustom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRDebriefingWidget.OnInitializedCustom");

	UVRDebriefingWidget_OnInitializedCustom_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRDescriptionTextWidget.InitializeAnimate
// (Final, Native, Public, BlueprintCallable)

void UVRDescriptionTextWidget::InitializeAnimate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRDescriptionTextWidget.InitializeAnimate");

	UVRDescriptionTextWidget_InitializeAnimate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRDialogWidget.PlayFrameOutAnimBP
// (Event, Public, BlueprintEvent)

void UVRDialogWidget::PlayFrameOutAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRDialogWidget.PlayFrameOutAnimBP");

	UVRDialogWidget_PlayFrameOutAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRDialogWidget.PlayFrameInAnimBP
// (Event, Public, BlueprintEvent)

void UVRDialogWidget::PlayFrameInAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRDialogWidget.PlayFrameInAnimBP");

	UVRDialogWidget_PlayFrameInAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRDialogWidget.OnFrameOutAnimationEndBP
// (Final, Native, Public, BlueprintCallable)

void UVRDialogWidget::OnFrameOutAnimationEndBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRDialogWidget.OnFrameOutAnimationEndBP");

	UVRDialogWidget_OnFrameOutAnimationEndBP_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VREdWidget.PlaySubtitleAnimationBP
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UVREdWidget::PlaySubtitleAnimationBP(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VREdWidget.PlaySubtitleAnimationBP");

	UVREdWidget_PlaySubtitleAnimationBP_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRHangarCockpitWidget.OnInitializedCustom
// (Event, Protected, BlueprintEvent)

void UVRHangarCockpitWidget::OnInitializedCustom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRHangarCockpitWidget.OnInitializedCustom");

	UVRHangarCockpitWidget_OnInitializedCustom_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRHangarWidget.SkipVisorAnimation
// (Event, Protected, BlueprintEvent)

void UVRHangarWidget::SkipVisorAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRHangarWidget.SkipVisorAnimation");

	UVRHangarWidget_SkipVisorAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRHangarWidget.OnVRFadingCompletedCustom
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                           IsFadeIn                       (Parm, ZeroConstructor, IsPlainOldData)

void UVRHangarWidget::OnVRFadingCompletedCustom(bool IsFadeIn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRHangarWidget.OnVRFadingCompletedCustom");

	UVRHangarWidget_OnVRFadingCompletedCustom_Params params;
	params.IsFadeIn = IsFadeIn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRHangarWidget.OnVisorStartupAnimFinishedBP
// (Final, Native, Protected, BlueprintCallable)

void UVRHangarWidget::OnVisorStartupAnimFinishedBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRHangarWidget.OnVisorStartupAnimFinishedBP");

	UVRHangarWidget_OnVisorStartupAnimFinishedBP_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRHangarWidget.ChangeNextMenu
// (Final, Native, Protected, BlueprintCallable)

void UVRHangarWidget::ChangeNextMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRHangarWidget.ChangeNextMenu");

	UVRHangarWidget_ChangeNextMenu_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRHudPauseWidget.PlayFrameOutAnimBP
// (Event, Public, BlueprintEvent)

void UVRHudPauseWidget::PlayFrameOutAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRHudPauseWidget.PlayFrameOutAnimBP");

	UVRHudPauseWidget_PlayFrameOutAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRHudPauseWidget.PlayFrameInAnimBP
// (Event, Public, BlueprintEvent)

void UVRHudPauseWidget::PlayFrameInAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRHudPauseWidget.PlayFrameInAnimBP");

	UVRHudPauseWidget_PlayFrameInAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRHudPauseWidget.OnFrameOutAnimationEndBP
// (Final, Native, Public, BlueprintCallable)

void UVRHudPauseWidget::OnFrameOutAnimationEndBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRHudPauseWidget.OnFrameOutAnimationEndBP");

	UVRHudPauseWidget_OnFrameOutAnimationEndBP_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.VRKeyEventActor.OnKeyRepeated__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EUIKeys                        Key                            (Parm, ZeroConstructor, IsPlainOldData)

void AVRKeyEventActor::OnKeyRepeated__DelegateSignature(EUIKeys Key)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.VRKeyEventActor.OnKeyRepeated__DelegateSignature");

	AVRKeyEventActor_OnKeyRepeated__DelegateSignature_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.VRKeyEventActor.OnKeyJustPressed__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EUIKeys                        Key                            (Parm, ZeroConstructor, IsPlainOldData)

void AVRKeyEventActor::OnKeyJustPressed__DelegateSignature(EUIKeys Key)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.VRKeyEventActor.OnKeyJustPressed__DelegateSignature");

	AVRKeyEventActor_OnKeyJustPressed__DelegateSignature_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRKeyEventActor.IsKeyDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIKeys                        Key                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AVRKeyEventActor::IsKeyDown(EUIKeys Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRKeyEventActor.IsKeyDown");

	AVRKeyEventActor_IsKeyDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.VRMissionLoadWidget.PlayFrameOutAnimBP
// (Event, Public, BlueprintEvent)

void UVRMissionLoadWidget::PlayFrameOutAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMissionLoadWidget.PlayFrameOutAnimBP");

	UVRMissionLoadWidget_PlayFrameOutAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMissionLoadWidget.PlayFrameInAnimBP
// (Event, Public, BlueprintEvent)

void UVRMissionLoadWidget::PlayFrameInAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMissionLoadWidget.PlayFrameInAnimBP");

	UVRMissionLoadWidget_PlayFrameInAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMissionLoadWidget.OnFrameOutAnimationEndBP
// (Final, Native, Public, BlueprintCallable)

void UVRMissionLoadWidget::OnFrameOutAnimationEndBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMissionLoadWidget.OnFrameOutAnimationEndBP");

	UVRMissionLoadWidget_OnFrameOutAnimationEndBP_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMissionSelectWidget.SetVRMissionSelectBgAlreadyFrameInFlag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                           Flag                           (Parm, ZeroConstructor, IsPlainOldData)

void UVRMissionSelectWidget::STATIC_SetVRMissionSelectBgAlreadyFrameInFlag(bool Flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMissionSelectWidget.SetVRMissionSelectBgAlreadyFrameInFlag");

	UVRMissionSelectWidget_SetVRMissionSelectBgAlreadyFrameInFlag_Params params;
	params.Flag = Flag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRMissionSelectWidget.IsToPlayFrameInAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRMissionSelectWidget::IsToPlayFrameInAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRMissionSelectWidget.IsToPlayFrameInAnimation");

	UVRMissionSelectWidget_IsToPlayFrameInAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.VRPlaneHealthWarningLight.SetPlayerPlane
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerPlane*            Plane                          (Parm, ZeroConstructor, IsPlainOldData)

void AVRPlaneHealthWarningLight::SetPlayerPlane(class APlayerPlane* Plane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRPlaneHealthWarningLight.SetPlayerPlane");

	AVRPlaneHealthWarningLight_SetPlayerPlane_Params params;
	params.Plane = Plane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRRetryWidget.PlayFrameOutAnimBP
// (Event, Public, BlueprintEvent)

void UVRRetryWidget::PlayFrameOutAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRRetryWidget.PlayFrameOutAnimBP");

	UVRRetryWidget_PlayFrameOutAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRRetryWidget.PlayFrameInAnimBP
// (Event, Public, BlueprintEvent)

void UVRRetryWidget::PlayFrameInAnimBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRRetryWidget.PlayFrameInAnimBP");

	UVRRetryWidget_PlayFrameInAnimBP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRRetryWidget.OnFrameOutAnimationEndBP
// (Final, Native, Public, BlueprintCallable)

void UVRRetryWidget::OnFrameOutAnimationEndBP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRRetryWidget.OnFrameOutAnimationEndBP");

	UVRRetryWidget_OnFrameOutAnimationEndBP_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRPrologueWidget.PlaySubtitleAnimationBP
// (Event, Public, BlueprintEvent)
// Parameters:
// int                            Index                          (Parm, ZeroConstructor, IsPlainOldData)

void UVRPrologueWidget::PlaySubtitleAnimationBP(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRPrologueWidget.PlaySubtitleAnimationBP");

	UVRPrologueWidget_PlaySubtitleAnimationBP_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRPrologueWidget.IsToPlayFrameInAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRPrologueWidget::IsToPlayFrameInAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRPrologueWidget.IsToPlayFrameInAnimation");

	UVRPrologueWidget_IsToPlayFrameInAnimation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.VRPlaneSubActor.IsKeyDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIKeys                        Key                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool AVRPlaneSubActor::IsKeyDown(EUIKeys Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRPlaneSubActor.IsKeyDown");

	AVRPlaneSubActor_IsKeyDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// DelegateFunction Nimbus.VRSimpleUserWidget.OnKeyRepeated__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EUIKeys                        Key                            (Parm, ZeroConstructor, IsPlainOldData)

void UVRSimpleUserWidget::OnKeyRepeated__DelegateSignature(EUIKeys Key)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.VRSimpleUserWidget.OnKeyRepeated__DelegateSignature");

	UVRSimpleUserWidget_OnKeyRepeated__DelegateSignature_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// DelegateFunction Nimbus.VRSimpleUserWidget.OnKeyJustPressed__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// EUIKeys                        Key                            (Parm, ZeroConstructor, IsPlainOldData)

void UVRSimpleUserWidget::OnKeyJustPressed__DelegateSignature(EUIKeys Key)
{
	static auto fn = UObject::FindObject<UFunction>("DelegateFunction Nimbus.VRSimpleUserWidget.OnKeyJustPressed__DelegateSignature");

	UVRSimpleUserWidget_OnKeyJustPressed__DelegateSignature_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Nimbus.VRSimpleUserWidget.IsKeyDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIKeys                        Key                            (Parm, ZeroConstructor, IsPlainOldData)
// bool                           ReturnValue                    (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData)

bool UVRSimpleUserWidget::IsKeyDown(EUIKeys Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.VRSimpleUserWidget.IsKeyDown");

	UVRSimpleUserWidget_IsKeyDown_Params params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Nimbus.WeaponMeshManager.SetAllExtraMeshesMasterVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                           bShowAllMeshes                 (Parm, ZeroConstructor, IsPlainOldData)
// bool                           bForceOperation                (Parm, ZeroConstructor, IsPlainOldData)

void UWeaponMeshManager::SetAllExtraMeshesMasterVisibility(bool bShowAllMeshes, bool bForceOperation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Nimbus.WeaponMeshManager.SetAllExtraMeshesMasterVisibility");

	UWeaponMeshManager_SetAllExtraMeshesMasterVisibility_Params params;
	params.bShowAllMeshes = bShowAllMeshes;
	params.bForceOperation = bForceOperation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
